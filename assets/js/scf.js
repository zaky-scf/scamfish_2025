$( function() {

    if( $(window).width() >= 993 ){

        $("#header_2020 .search-form-2020 .tabs").hover(function(){
            $(".search-form-2020 .tabs .hide-tabs").show();
            },
            function () {
                $(".search-form-2020 .tabs .hide-tabs").hide();
                $(".search-form-2020 .tabs a.active").show();
        });

    }

    var token = sessionStorage.getItem("token");

    $.ajaxSetup({
        headers: {
            'Custom-Auth': 'Bearer ' +  token
        }
    });
});

const gpcValue = navigator.globalPrivacyControl
if (gpcValue) {
    $("#gpc-banner").css("display", "flex");
}

function filter_Search_dropdowns(thisItem) {
    var valThis = $(thisItem).val();
    $('.dropdown-select-search ul > li').each(function(){
        var text = $(this).text();
        (text.toLowerCase().indexOf(valThis.toLowerCase()) > -1) ? $(this).show() : $(this).hide();         
    });
};

function optout_frmvalidation(){
    $("#myself").val( $('input[name=rdo_data_company]:checked').val() );
    if( $('input[name=rdo_data_company]:checked').val() == 2 ) {
        $("#comname").val( $("#txtcomname").val() );
        if($("#chkagreed").is(":checked")) $("#agreed").val( 1 );
    }
    return true;
};
    function optout_check_single() {
        $('.scf-table').on("click", 'input[name="opt_check[]"]', function () {
            var is_checked = $(this).is(':checked');
            scf.http.ajax_request('check_single_opt', 'post', { id: $(this).val(), is_checked: is_checked, class: $(this).attr('class') }, function (response) {

            });
        });
    }

jQuery(document).ready(function($) {
( function($) {

    var quick_speed = false;

    // Remove Vars
    var
        var_name = 'js-v';

    $('[data-' + var_name + ']').each( function() {

        var
            $this = $(this),
            val = $this.data( var_name );

        $this.removeAttr( 'data-' + var_name );

    } );
    $('body').on('click', '.scf-notify-close', function() {
        $(this).parent().hide('slow');
        setInterval(function() {
            $(this).parent().remove();
        }, 1500);
       
    });
    // jQuery Extensions
    $.fn.extend( {
        toggleText: function(a, b) {

            return this.text( this.text() == b ? a : b);

        },
        extract_vars: function(scope) {
            this.find('*').filter(function() {
                return $(this).data(var_name) !== undefined;
            }).each(function(i, el) {
                var $el = $(el);
                if (typeof scope[$el.data(var_name)] !== "undefined") {
                    scope[$el.data(var_name)] = scope[$el.data(var_name)].add($el);
                } else {
                    scope[$el.data(var_name)] = $el;
                }
            });
        
            return this;
        },        
        scrollTo: function( relative_offset, speed, ease, on_complete ) {

            relative_offset = ( typeof relative_offset != "number" ) ? 0 : relative_offset;
            speed = ( typeof speed != "number" ) ? 1000 : speed;
            ease = ( typeof ease == "undefined" ) ? 'swing' : ease;
            on_complete = ( typeof on_complete != "function" ) ? null : on_complete;

            $('html, body').animate( { scrollTop: ( this.offset().top + relative_offset ) }, speed, ease, on_complete );

        },
        show_flex: function() {

            return this.css( { display: 'flex' } );

        },
        input_phone_number: function() {

            var $elm = this;
            $elm.on( "keypress", function( e ) {

                if ( e.keyCode == 43 ) {

                    if ( $elm.val().length ) e.preventDefault();

                } else if ( e.keyCode < 48 || e.keyCode > 57 ) e.preventDefault();

            } ).on( "paste", function( e ) {

                e.target.value = e.originalEvent.clipboardData.getData('text').replace(/[^0-9\+]/img, "");
                return false;

            } );

        },
        serializeObject: function() {

            var data = {};

            this.serializeArray().forEach( function( v ) {

                if ( /\[\]$/m.test( v.name ) ) {

                    v.name = v.name.slice( 0, -2 );
                    if ( typeof data[ v.name ] == "undefined" ) data[ v.name ] = [];
                    data[ v.name ].push( v.value );

                } else {

                    data[ v.name ] = v.value;

                }

            } );

            return data;

        },
        
        loading: function( toggle ) {

            toggle = ( typeof toggle == "undefined" ) ? false : true
            this.toggleClass( "loading", toggle );
            return this;

        },
        is_loading: function() {

            return this.hasClass("loading");

        },
        scf_notification: function (option) {

            var backgroundCl, textCl, leftIcon,autoClose,closeElm
            switch (option.type) {
                case 'green':
                    backgroundCl = '#EFFCF0'
                    textCl = '#31A865'
                    leftIcon = 'si-done-circle'
                    break;
                case 'orange':
                    backgroundCl = '#FFF0E3'
                    textCl = '#F8933C'
                    leftIcon = 'si-done-circle'
                    break;
                case 'blue':
                    backgroundCl = '#EFF3FC'
                    textCl = '#0f63ec'
                    leftIcon = 'si-done-circle'
                    break;
                case 'deleted':
                    backgroundCl = '#FFEEF2'
                    textCl = '#E52727'
                    leftIcon = 'si-delete-fill'
                    break;
                default:
                    backgroundCl = '#EFFCF0'
                    textCl = '#31A865'
                    leftIcon = 'si-done-circle'
            }

            backgroundCl='backgroundCl' in option ?option.backgroundCl:backgroundCl 
            textCl='textCl' in option ?option.textCl:textCl 
            leftIcon='leftIcon' in option ?option.leftIcon:leftIcon
            autoClose='autoClose' in option ?option.autoClose:5000 
            closeElm=$('<i/>', { class: 'si-close-circle right-icon scf-notify-close' })
            var newDiv = $('<div/>', { 'class': 'scf-js-notification', 'style': 'background-color:' + backgroundCl + ';color:' + textCl + ';' }).append(
                $('<i/>', { class: leftIcon + ' left-icon' })
            ).append(
                $('<p/>', {}).html(option.text)
            ).append(closeElm)
            this.prepend(newDiv);
            if(autoClose!='no'){
                setInterval(function() {
                    closeElm.click()
                }, autoClose);
            }
        }

    });

    // New Implementation
    // General
    var func = {
        data: function( element, f ) {

            return element.getAttribute( 'data-' + f );

        },
        set_data: function( element, f, v ) {

            element.setAttribute( 'data-' + f, v );

        },
        dcc: function( element ) {

            element.onmousedown = function( e ) {

                if ( 1 === e.button ) return false;

            }

        },
        l: function( element, t ) {

            element.addEventListener( 'click', function( e ) {
                // baselines cancel CSI-5092
                if ($(".module-cancel-alt").length) {
                    setTimeout(function () {
                        t.fl( t.data( element, 'target' ) );
                        element.classList.add('loading');
                    }, 1000);
                } else {
                    t.fl( t.data( element, 'target' ) );
                    element.classList.add('loading');    
                }
                
            } );
        },
        lnt: function( element, t ) {

            t.dcc( element );
            element.addEventListener( 'mouseup', function( e ) {

				e.preventDefault();
                if ( 2 !== e.button ) t.onw( t.data( element, 'target' ) );

            } );
        },
        tl: function( element, t ) {

            setTimeout( function() {

               t.fl( element.href );

            }, t.data( element, 'interval' ) * 1000 );

        },
        rp: function( el, t ) {

            el.addEventListener( 'click', function( e ) {

                location.reload();

            } );

        },
        onw: function( url ) {

            if ( url ) window.open( url );

        },
        fl: function( url ) {

            window.location.href = url;

        },
        activatingLookup: function (el) {
            var $this = $(el);
    
            $this.find('li a[data-type]').each(function () {
                $(this).click(function (event) {
                    event.preventDefault();
    
                    const targetType = this.getAttribute('data-type');
                    const targetDiv = document.querySelector(`.search-type[data-type="${targetType}"]`);
    
                    // Activate the target div based on the clicked link
                    if (targetDiv) {
                        document.querySelectorAll('.search-type').forEach(function (div) {
                            div.classList.remove('active'); // Ensure only one active at a time
                        });
                        targetDiv.classList.add('active');
                    }
                    document.querySelectorAll('.search-type').forEach(function (div, index) {
                        if (index >= 3) {
                            div.style.display = 'inline-flex'; // Show elements that would normally appear after arrow clicks
                        }
                    });
                    // Store the active lookup type in localStorage
                    localStorage.setItem('activeLookupType', targetType);
                                // Redirect the page
            const targetUrl = this.getAttribute('href'); // Assuming href contains the target URL for redirection
            if (targetUrl) {
                window.location.href = targetUrl; // Redirect to the desired page
            }
                });
            });
        },
    
        loader: {
            loaded: {
                google_charts: false,
                google_maps: false,
                google_recaptcha: false,
                lottie: false,
                sheetjs: false,
                chartjs: false,
            },
            onload_funcs: {},
            onload_completed: {},
            load: function( type, src, callback ) {

                var t = this;
                if ( ! t.loaded[ type ] ) {

                    ( function ( d, s ) {
                        var
                            f = d.getElementsByTagName(s)[0],
                            j = d.createElement(s); j.async=true;

                        if ( "function" == typeof callback ) {

                            ( ! t.onload_funcs[ type ] ) && ( t.onload_funcs[ type ] = [] );
                            t.onload_funcs[ type ].push( callback );

                        }

                        t.onload_completed[ type ] = false;
                        j.onload = function() {

                            if ( t.onload_funcs[ type ].length ) {

                                t.onload_completed[ type ] = true;
                                t.onload_funcs[ type ].forEach( function( func ) {

                                    func();

                                } );

                            }

                        };
                        j.src=src;
                        f.parentNode.insertBefore(j,f);

                        t.loaded[ type ] = true;

                    } )( document,'script' );

                } else if ( "function" == typeof callback ) {

                    if ( ! t.onload_completed[ type ] ) {

                        t.onload_funcs[ type ].push( callback );

                    } else {

                        callback();

                    }

                }

            },
            google_charts: function( onload, chart_on_load_call_back = false ) {

                this.load( 'google_charts', '//www.gstatic.com/charts/loader.js', function() {

                    google.charts.load('current', {'packages':['corechart']});
                    if(chart_on_load_call_back){
                        google.charts.setOnLoadCallback(onload);
                    }else{
                        if ( typeof onload == 'function' ) onload();
                    }
                } );

            },
            google_maps: function( onload ) {

                this.load( 'google_maps', '//maps.googleapis.com/maps/api/js?key=AIzaSyD5PYaVEERjQLmgPtSjfKLUeNp2_nyDTg4&libraries=places', onload );

            },
            google_recaptcha: function( onload ) {

                this.load( 'google_recaptcha', '//www.google.com/recaptcha/api.js?render=explicit', onload );

            },
            lottie: function( onload ) {

                this.load( 'lottie', path.cdn_url + 'common/js/lottie.js', onload );

            },
            sheetjs: function( onload ) {

                this.load( 'sheetjs', '//unpkg.com/xlsx@0.15.1/dist/xlsx.full.min.js', onload );

            },
            chartjs: function( onload ) {

                this.load( 'chartjs', '//spcdn.socialcatfish.com/common/js/ChartJS/chart.min.js', onload );

            },
        },
        throttle: function ( callback, wait ) {

            var skip = false;

            return function () {

                if ( ! skip ) {

                    context = this;
                    args = arguments;
                    callback.apply( context, args )
                    skip = true;
                    setTimeout( function () {

                        skip = false;

                    }, wait );

                }

            }
        },
        jl: function( el, t ) {

            $(el).on( 'click', function() {

                $( scf.data( el, 'target' ) ).scrollTo( 0, 1000 );

            } );

        },
        ocfs: function( el ) {

            $(el).on( 'change', function() {

                $(el).parents("form").submit();

            } );

        },
        fs: function( el, t ) {

            var $this = $(el);
            $this.on( 'click', function() {

                if ( $this.is_loading() ) return false;
                if ($this.data('disabled')=='disabled') return false;
                $this.loading( true ).parents("form").submit();

            } );

        },
        recpatcha_fs: function (el, t) {

            var $this = $(el);
            $this.on('click', function () {
                grecaptcha.ready(function () {
                    grecaptcha.execute('6LftTMMeAAAAAHodlggyeFfE5vOJRAvyArRZqkZv', { action: $this.attr('id') }).then(function (token) {
                    });
                });
                if ($this.is_loading()) return false;
                $this.loading(true).parents("form").submit();

            });

        },
        recaptcha_token_fs: function (el, t) {
            var $this = $(el);
            $this.on('click', function () {
                // Ensure there's a hidden input for the reCAPTCHA token
                var $form = $this.parents("form");
                if ($form.find('input[name="g-recaptcha-v3"]').length === 0) {
                    $form.append('<input type="hidden" name="g-recaptcha-v3" value="">');
                }
        
                grecaptcha.ready(function () {
                    grecaptcha.execute('6LftTMMeAAAAAHodlggyeFfE5vOJRAvyArRZqkZv', { action: $this.attr('id') }).then(function (token) {
                        // Update the hidden input with the token
                        $form.find('input[name="g-recaptcha-v3"]').val(token);
                    });
                });
        
                if ($this.is_loading()) return false;
        
                // Ensure the token is set before submitting
                setTimeout(function () {
                    $this.loading(true).parents("form").submit();
                }, 2000); // Allow time for the token to be set
            });
        },
        
        mailto: function( el, t ) {

            var $this = $(el);
            $this.on( 'click', function() {
                var href = $this.attr("data-to");
                window.location.href = "mailto:" + href + "@socialcatfish.com";

            } );

        },
        email_subscribe: function( el, t ) {

            var $this = $(el);
            $this.on( 'click', function() {

                if ( $this.is_loading() ) return false;

                var email = $("#scf_email_subscribe").val();
                $("form.email-subscribe span").remove();
                if ( ! t.validator.email( email ) ) {
                    $("form.email-subscribe").append( "<span>Invalid Email Address*</span>" );
                    return false;
                }

                $this.loading( true ).parents("form").submit();

            } );

        },
        http: {
            request: function(url, method, post_data, expected_return_format, on_success, on_failure, on_progress ) {

                if (typeof url == "undefined") return;
                method = (typeof method == "undefined") ? "GET" : method;
                post_data = (typeof post_data == "undefined") ? "" : post_data;
                expected_return_format = (typeof expected_return_format == "undefined") ? "json" : expected_return_format;
                on_success = (typeof on_success != "function") ? function() {} : on_success;
                on_failure = (typeof on_failure != "function") ? function() {} : on_failure;

                

            var params = {
                    url: url,
                    method: method,
                    data: post_data,
                    success: on_success,
                    error: on_failure,
                };

                if ( typeof on_progress == "function" ) {

                    params.contentType = params.processData = false;
                    params.xhr = function() {

                        xhr = $.ajaxSettings.xhr();
                        if ( xhr instanceof window.XMLHttpRequest ) {

                            xhr.upload.onprogress = on_progress;

                        }
                        return xhr;

                    };

                }

                $.ajax(params);
            },
            ajax_request: function(cmd, method, post_data, on_success, on_failure, on_progress ) {

                this.request(path.relative_url + "ajax.html?cmd=" + cmd, method, post_data, 'json', on_success, on_failure, on_progress );

            },
        },
        get_cities: {
            list: function( state, callback ) {

                scf.http.ajax_request( 'get_cities', 'post', { 'state': state }, function( response ) {

                    if ( typeof callback == "function" ) {

                        callback( ( typeof response.data == "object" ) ? response.data : [] );

                    }

                } );

            },
            dropdown: function( el, state, skip,cityOnly=false ) {

                var
                    $cities = $(el),
                    $loading = $("<option>Loading...</option>");

                if ( typeof skip == "undefined" ) skip = 1;

                $cities.prop("disabled", true).find("option:nth-child(n+" + skip + ")").remove().end().append( $loading ).val("Loading...");

                this.list( state, function( cities ) {

                    var
                        list = cities.map( function( val ) {
                            if(cityOnly){
                                return '<option value="' + val +'">' + val + '</option>';

                            }else{
                                return '<option value="' + val + ', '+state+'">' + val + '</option>';
                            }

                        } );
                    $loading.remove();
                    $cities.removeAttr('disabled').append( $( list.join('') ) ).val('Select a City').change();
                    create_Search_dropdowns();

                } );

            }
        },
        print: function( el, t ) {

            $(el).on( "click", function() {

                window.print();

            } );

        },
        slider: {
            _slide: function( el, t, direction ) {

                var
                    $this = $(el),
                    width = $this.children()[0].offsetWidth,
                    left = $this.scrollLeft(),
                    size = $this[0].scrollWidth - $this.outerWidth();
                    offset = Math.floor( ( ( '+' == direction ) ? ( left + width ) : ( left - width ) ) / width ) * width;

                if ( left <= 0 && '-' == direction ) offset = size;
                else if ( size <= left && '+' == direction ) offset = 0;

                $this.animate( { scrollLeft: offset }, 500 );

            },
            slide: function( el, t, o ) {

                $(el).on( "click", function() {

                    var
                        $this = $(el),
                        target = $this.data("target");
                        direction = $this.data("direction");
                    o._slide( t.v[ target ], t, direction );

                } );

            },
        },
        accordion: {
            item: function( el, t, o ) {

                $(el).on( "click", function() {

                    if( $(this).hasClass( "mobile_only" ) ) {
                        if ( t.is_mobile() ) {
                            var flg = false;
                            if( $(this).parent().parent().parent().find(".active").attr('class') == $(this).parent().attr('class') ) flg = true;

                            $(this).parent().parent().parent().find(".active").toggleClass("active");                    
                            if(flg == false) $(this).parent().toggleClass("active");
                        }
                    } else {
                        var flg = false;
                        if( $(this).parent().parent().parent().find(".active").attr('class') == $(this).parent().attr('class') ) flg = true;

                        $(this).parent().parent().parent().find(".active").toggleClass("active");                    
                        if(flg == false) $(this).parent().toggleClass("active");
                    }

                } );

            },
            show_more: function( el, t, o ) {
                var btnText,toggle;
                $(el).on( "click", function() {


if($(this).text().includes('More')){
    toggle='More';
    btnText= $(el).text();
    $(el).text('Less');  
    
}else{
    toggle='Less';
    $(el).text(btnText);  
}
$.each( $(this).parent('ul').find('li.al'), function( target, source ) {
    if(toggle=='More' && !$(this).is(':visible'))
    {
        $(this).css({ display: "inline-block" }).addClass('sh')
    }else if(toggle=='Less' && $(this).hasClass('sh')){
        $(this).hide() 
    }


} );

                } );

            },
            show_more_v2: function( el, t, o ) {
                var pretext = $('#people-associated-more').html();
                $(el).on("click", function () {                 
                    var elm = $(this).parents(".people-associated");
                    if (elm.hasClass('limit')) {
                        elm.removeClass('limit');
                        $(this).text('Show Less').append("<i class='si-up' style='float:right'></i>");
                    } else {
                        elm.addClass('limit');

                        $(this).html(pretext)
                    }
             
                });

            },
        },
        timer: function( el, t, o ) {

            var
                $this = $(el),
                timer = $this.data("target"),
                mins = Math.floor( timer / 60 ),
                secs = timer % 60,
                interval = setInterval( function() {

                    $this.text( mins + ":" + ( "00" + secs ).slice( -2 ) );
                    if ( mins == 0 && secs == 0 ) clearInterval( interval );

                    secs--;
                    if ( secs < 0 ) {

                        secs = 59;
                        mins--;

                    }

                }, 1000 );

        },
        create: {
            notification: function( type, message ) {

                return $('<div class="scf-notification ' + type + '">' + message + '</div>');

            }
        },
        input_data_update: function( $target, $source, mapping ) {

            $.each( mapping, function( target, source ) {

                if ( typeof $target[ target ] == "object" && typeof $source[source] == "object" ) {

                    $target[ target ].val( $source[source].val() );

                }

            } );

        },
        validator: {
            first_last_name: function( value ) {

                var trimmedValue = value.trimStart();
                return /^[a-z']{2,} ([a-z']+ )*([a-z']{2,} *)+$/im.test( trimmedValue );

            },
            email: function( value ) {

                var trimmedValue = value.trimStart();
                var result = /^([a-zA-Z0-9_.+-])+\@(([a-zA-Z0-9-])+\.)+([a-zA-Z0-9]{2,4})+$/.test( trimmedValue );
                if( result == false ) return result;
                return /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/.test( trimmedValue );

            },
            email_confirm: function (value) {
              
                return $("#email_address").val() == value;

            },
            username: function( value ) {

                var trimmedValue = value.trimStart();
                return /^[^\s]{2,}$/m.test( trimmedValue );

            },
            phone: function( value ) {

                return /^\+?[0-9]{10,11}$/.test( value );

            },
            image: function( value , file_size ) {
                if(file_size>10485760) return false;
                return /\.(jpg|jpeg|png|tif|bmp|gif)$/im.test( value );

            },
            not_empty: function( value ) {

                return ( value.trim() != '' );

            },
            is_true: function( value ) {

                return ( value == true );

            },
            is_false: function( value ) {

                return ( value != true );

            },
            not_null: function( value ) {

                return ( value != null );

            },
            run: function( $form, rules, return_all ) {

                var
                    $f = {},
                    exception = {},
                    error = [],
                    obj = this;

                $form.extract_vars( $f );
                return_all = ( typeof return_all == "undefined" ) ? false : return_all;

                try {

                    rules.forEach( function( validation ) {

                        if ( typeof $f[ validation.field ] != "undefined" ) {

                            var
                                val = ( typeof validation.checkbox == "undefined" ) ? $f[ validation.field ].val() : $f[ validation.field ].is(":checked"),
                                ret = JSON.parse( JSON.stringify( validation ) );

                            if ( ! obj[ validation.validator ]( val ) ) {

                                ret.field = $f[ validation.field ];
                                error.push( ret );
                                if ( return_all ) throw exception;

                            }

                        }

                    } );

                } catch (e) {}

                return error;

            },
        },
        rotate_children: function( el, t, o ) {

            var
                $this = $(el),
                interval = parseInt( $this.data("interval") ),
                $children = $this.children(),
                size = $children.length,
                position = 0,
                timer = setInterval( function() {

                    $children.eq( position++ ).toggleClass("active");
                    if ( position >= size ) position = 0;
                    $children.eq( position ).toggleClass("active");

                }, interval );

            $this.removeAttr("data-interval");

        },
        is_mobile: function() {

            return $("#mb-detect").is(":visible");

        },
        lottie: {
            load: function( el, t, o ) {

                t.loader.lottie( function() {

                    var
                        target = t.data( el, 'target' ),
                        svg = {
                            container: el,
                            renderer: 'svg',
                            loop: true,
                            autoplay: true,
                            animationData: lottie.animations[ target ]
                        };
                    $(el).find('svg').remove()
                    lottie.loadAnimation( svg );

                });

            },
        },
		scf_slider: {

			push_slides: function( el, t, o ) {

				var $this = $(el);

				$this.on( "click", function() {

					var active_slide = $this.closest( ".slideshow-container" ).find( ".dot.active" ).data("item"),
						slide = t.data( this, 'slide' ),
						move_slide = active_slide;

						if( slide == "prev" ) {

							move_slide -= 1;

						}else {

							move_slide += 1;

						}

					o.show_slides( el, t, move_slide );

				});

			},
			current_slide: function( el, t, o ) {

				var $this = $(el);

				o.show_slides( el, t, 1 );

				$this.on( "click", function() {

					item = t.data( this, 'item' );
					if_disabled = t.data( this, 'click' );

					if( if_disabled != "0" ) o.show_slides( el, t, item );
					else return false;

				});

			},
			show_slides: function( el, t, item ) {

				var i,
					$this = $(el),
					slide_name = $this.closest( ".slideshow-container" ),
					slides = slide_name.find(".slide-item"),
					dots = $this.parent().find(".dot");
					slideIndex = item;

				if ( slideIndex > slides.length ) { slideIndex = 1 }
				if ( slideIndex < 1 ) { slideIndex = slides.length }

				for ( i = 0; i < slides.length; i++ ) {

					slides[i].style.display = "none";
                    slides[i].className = "slide-item fade";

				}

				for ( i = 0; i < dots.length; i++ ) {

					dots[i].className = dots[i].className.replace(" active", "");

				}

                slides[slideIndex-1].className = "slide-item fade active_item";
				slides[slideIndex-1].style.display = "block";
				dots[slideIndex-1].className += " active";

			}

		},
        lazy_loading: {

            init: function( el, t, o ) {

                $( window ).scroll( function() {

                    o.scroll_loader();

                });

                o.scroll_loader();


            },
            scroll_loader: function() {

                var error_imgs = ( $el, img, error ) => {

                    if ( error || ( img.naturalWidth == 244 && img.naturalHeight == 244 ) ) {

                        $el.closest(".img-thumbnail").hide();
                        $el.parent().parent().find(".ris-img-blur").show();

                    }

                };

                $( ".lazy-loader:visible" ).each( function () {

                    var $this = $(this),
                        img = $this.data( "src" ),
                        type = $this.data( "type" ),
                        visible_line = window.scrollY + window.innerHeight;

                        var elementTop = $(this).offset().top;
                        var elementBottom = elementTop + $(this).outerHeight();
                    
                        var viewportTop = $(window).scrollTop();
                        var viewportBottom = viewportTop + $(window).height();
                
                    //if ( $this.hasClass("lazy-loader") && $this.offset().top < visible_line ) {
                    if ( $this.hasClass("lazy-loader") && ( elementBottom > viewportTop && elementTop < viewportBottom ) ) {

                        $this.attr( "src", img ).on( "load", function () {

                            if( type == "no-background" ) {

                                $this.removeClass("lazy-loader");

                            } else {

                                $this.removeClass("lazy-loader").css( 'background-image', "url('" + img + "' )" );

                            }

                            if ( $this.hasClass( "scf_ris_loader" ) ) {

                                const img2 = new Image();
                                img2.addEventListener( "load", () => { error_imgs( $this, img2, 0 ) } );
                                img2.src = img;

                            }

                        }).on( "error", function() {

                            if ( $this.hasClass( "scf_ris_loader" ) ) {

                                error_imgs( $this, null, 1 );

                            }

                        });

                    }

                });

            }
        },
        drawChart: function(el, t) {
            var dataObj = $(el).data('data');
            var options = {
                responsive: true,
                title: {
                    display: true,
                    //text: "Marital Status"
                },
                events: ["mousemove"], 
                hover: {
                    mode: "nearest", 
                },
                plugins: {
                    legend: {
                        onClick: null, 
                    },
                    tooltip: {
                        enabled: true,
                        callbacks: {
                            label: function(tooltipItem) {
                                var dataset = tooltipItem.dataset;
                                var total = dataset.data.reduce((sum, value) => sum + value, 0);
                                var currentValue = dataset.data[tooltipItem.dataIndex];
                                var percentage = ((currentValue / total) * 100).toFixed(2) + "%";
                                return dataset.label + ": " + currentValue + " (" + percentage + ")";
                            }
                        }
                    }
                }
            };
        
            var mergedOptions = Object.assign(options, $(el).data("options"));
            new Chart($(el).attr("id"), {
                type: $(el).data("type"),
                data: dataObj,
                options: mergedOptions
            });
        }
    };
    scf.merge( func );

    // JS Pagination
    var func = {
        jsp: function( element, t ) {

            var
                options = {
                    type: 'table',
                    results_per_page: 5,
                    pages: 1,
                    max_pages: 10,
                    target_selector: '',
                    loader_class_selector: '',
                    url: '',
                    pre_url_function: null,
                    ajax_success_function: null,
                    skip_first_click: false,
                    add_class_only: false,
                },
                $pagination = $(element),
                options = $.extend( options, $pagination.data("options") ),
                $data_set = null,
                $pages = $pagination.find("li a"),
                $n_pages = $pages.filter(":not([data-type])"),
                actions = { $first: $pagination.find(".pg-cl-first"), $last: $pagination.find(".pg-cl-last") },
                $current_page = null,
                center_page = Math.floor( options.max_pages / 2 ),
                last_start_page = ( ( last_start_page = options.pages - options.max_pages + 1 ) < 1 ? 1 : last_start_page ),
                $more_btn = $("<li><a>...</a></li>").hide(),
                more_btns = { $first: $more_btn, $last: $more_btn.clone() },
                $loader = ( options.loader_class_selector ? $( options.loader_class_selector ) : null ),
                $target = ( options.target_selector ? $( options.target_selector ) : null ),
                ajax = ( "ajax" == options.type && options.url && $target ),
                post_data = {};

            $pagination.removeAttr("data-options");
            if ( "table" == options.type && options.results_per_page ) {

                table = ( null != $target && $target.length ) ? $target : $this.closest("table");
                $data_set = table.find('tbody:not(.pay) > tr');

            }

            if ( options.max_pages < options.pages ) {

                $n_pages.first().parent().before( more_btns.$first );
                $n_pages.last().parent().after( more_btns.$last );

            }

            $pages.filter("[data-type=action]").each( function() {

                var $this = $(this), val = $this.data("page");

                if ( "first" == val || "previous" == val ) actions.$first = actions.$first.add( $this.parent() );
                else actions.$last = actions.$last.add( $this.parent() );

            } ).end().on( 'click', function() {

                var
                    $this = $(this),
                    current_page = ( $current_page ) ? parseInt( $current_page.attr("data-page") ) : 1,
                    page = null;

                if ( $this.parent().hasClass("disabled") || $this.parent().hasClass("active") ) return;

                switch ( $this.data("page") ) {
                    case "first": page = 1; break;
                    case "previous": page = current_page - 1; break;
                    case "next": page = current_page + 1; break;
                    case "last": page = options.pages;    break;
                    default:
                        page = $this.attr("data-page");
                }

                if ( 1 == page ) {
                    actions.$first.addClass("disabled");
                    }
                if ( page == options.pages ) actions.$last.addClass("disabled");

                if ( 1 == current_page && 1 != page ){
                    actions.$first.removeClass("disabled");
                }
                if ( options.pages == current_page && 1 != options.pages ){
                    actions.$last.removeClass("disabled");
                }

                if ( $current_page ) {
                    $current_page.parent().removeClass("active");
                }
                var start_p = p_id = ( ( ( p_id = page - center_page ) < 1 ) ? 1 : ( ( last_start_page > p_id ) ? p_id : last_start_page ) );
                $n_pages.each( function() {

                    var $this = $(this);
                    if ( $this.attr("data-page") == p_id ) return false;

                    $this.attr( "data-page", p_id ).text( p_id );
                    p_id++;

                } );

                if ( start_p != p_id || 1 == page ) {

                    more_btns.$first.toggle( start_p > 1 );
                    more_btns.$last.toggle( start_p < last_start_page );

                }

                $this = $n_pages.filter('[data-page=' + page + ']');
                $this.parent().addClass("active");
                $current_page = $this;

                if ( $data_set ) {

                    var
                        offset_start = ( page - 1 ) * options.results_per_page,
                        offset_end = offset_start + options.results_per_page;

                    if ( options.add_class_only ) {

                        $data_set.removeClass("show").slice( offset_start, offset_end ).addClass("show");

                    } else {

                        $data_set.hide().slice( offset_start, offset_end ).show();

                    }

                } else if ( ajax ) {

                    if ( options.skip_first_click ) {

                        options.skip_first_click = false;
                        return;

                    }

                    if ( $loader ) $loader.addClass("loading");

                    post_data = { page: page };

                    if ( typeof options.pre_url_function === "function" ) {

                        options.pre_url_function();

                    }
                    
                    
                    $.ajax( {
                        url: options.url,
                        data: post_data,
                        success: function( data ) {

                            // Todo: need fixing
                            // Fixed by asitha
                            if ( typeof window[options.ajax_success_function] === "function" ) {

                                window[options.ajax_success_function]();

                            }

                            if ( $target ) $target.html( ( typeof data.response !== "undefined" ) ? data.response : data );
                            if ( $loader ) $loader.removeClass("loading");
                            init_mc();

                        }
                    } );

                }

            } ).filter(".list").eq(0).click();

        }
    };
    scf.merge( func );

    // ABTESTING FUNCTIONS
    var func = {
        abtesting: {
            better_results: {
                BR_run_search: function( el, t ) {
                    var $this = $(el);

                    $this.on( "click", function() {
                        var form_data = $(this).parent().serializeObject();

                        t.search.search_data = form_data;

                        t.search.run_search( t.search.search_data, t );
                    } );
                },
                BR_done: function (el, t) {
                    var $this = $(el);

                    var form_data = $this.parent().serializeObject();

                    t.search.search_data = form_data;

                    t.search.run_search( t.search.search_data, t );

                }, BR_leave: function (el, t) {
                    $(window).on('popstate', function(event) {
                        alert("pop");
                    });
                },
                BR_checked: function () {
                    var requiredCheckboxes = $('.br-questions :checkbox[required]');
                    requiredCheckboxes.change(function(){
                        if(requiredCheckboxes.is(':checked')) {
                            requiredCheckboxes.removeAttr('required');
                        } else {
                            requiredCheckboxes.attr('required', 'required');
                        }
                    });
                },
                close_report: function (el, t) {
                    var $this = $(el);

                    $this.on( "click", function() {

                        url = new URL(window.location);
                        url.searchParams.set('behavior_index', 2);
                        window.history.pushState({}, '', url);


                        t.modal.close( 'report_ready2' );
                        $(".br-search").hide();
                        $(".br-subscription").show();

                    });
                },
                progress: {
                    init: function( el, t, o ) {
                        var
                            $this = $(el),
                            $sections = $this.find(".br-search-progress"),
                            $v = {},
                            $icons = null,
                            icon_len = 0,
                            icon_adj = 100,
                            gp_token = $this.data('token');

                        t.http.request( '/search.html', 'post', { gp_token: 1, token: gp_token }, 'json', function( response ) {

                            var $v = {};
                            t.modal.ref['report_ready2'].extract_vars( $v );
                            response = JSON.parse( response );

                            $.each( response.counts, function( field, count ) {

                                if ( count ) $v[ field ].text( count )
                                else $v[ field ].closest(".row").remove();

                            } );
                            $(".br-subscription .btn-green").attr( "data-target", response.url);

                            $(".scf-search-progress.br").scrollTo(25);

                            if ( typeof response.images == "object" && response.images.length ) {

                                response.images.forEach( function( v, i ) {

                                    var $img = null;

                                    if ( i != 0 ) {

                                        $img = $v.blur_img.clone();
                                        $v.blur_img.after( $img );

                                    } else {

                                        $img = $v.blur_img;

                                    }
                                    $img.find("img").attr( "src", v ).css( { "background-image": "url(" + v + ")" } );

                                } );

                            } else {

                                $v.image_list.remove();

                            }

                        } );

                        t.progress_runner.start_multi_level( o.better_results.progress.data, null, function( data, status ) {

                            $v.progress_bar.css( { width: status.percentage + '%' } );
                            $v.progress_value.text( status.percentage + '%' );

                            if ( icon_len && ( status.percentage % icon_len == 0 ) ) {

                                var $parent = $icons.parent();
                                $icons.eq(0).remove();
                                $icons = $parent.find("img");

                                if ( $icons.length == icon_adj ) icon_len++;

                            }
                            if (status.percentage > 0 && data.index == 0) {
                                $(".br .br-q-two").fadeTo(2000, 1);
                            }
                            if (status.percentage > 0 && data.index == 1) {
                                $(".br .br-q-five").fadeTo(2000, 1);
                            }
                            if (status.percentage > 20 && data.index == 0) {
                                $(".br .br-a-two").fadeTo(2000, 1);
                            }
                            if (status.percentage > 20 && data.index == 1) {
                                $(".br .br-a-five").fadeTo(2000, 1);
                            }

                        }, function( data, status ) {


                        }, null, function ( data ) {

                            var $sec = $sections.eq( data.index ).show().extract_vars( $v );

                            var
                                $sec_rm = $sections.eq( data.index - 1 ).hide();
                                url = new URL(window.location);
                                url.searchParams.set('bahavior_index', data.index);
                                window.history.pushState({}, '', url);

                                // $("#header_2020").hide();
                                // $("#new_footer_tmp").hide();


                                $icons = $sec.find("img");
                                icon_len = Math.floor( 100 / $icons.length );
                                icon_adj = 100 - ( icon_len * $icons.length );

                        }, function() {

                            t.modal.show('report_ready2');

                        } );

                    },
                    data: [
                        {
                            data: [
                                { text: "", speed: 230, percentage: 100, index: 0 },
                            ],
                            index: 0,
                        },
                        {
                            data: [
                                { text: "", speed: 230, percentage: 100, index: 1 },
                            ],
                            index: 1,
                        },
                    ]
                }
            },
            qa_search_prog: {
                init: function( el, t ) {

                    var domain = window.location.host;
                    var notLive = function(domain) {
                        return domain.split('.').length > 2;
                    }

                    if (notLive(domain)) {

                        var $this = $(el);
                        var keys = {};

                        $(document).keydown(function (e) {
                            keys[e.which] = true;
                            findKeys();
                        });

                        $(document).keyup(function (e) {
                            delete keys[e.which];
                            findKeys();
                        });

                        function findKeys() {
                            var total = 0;
                            for (var i in keys) {
                                if (!keys.hasOwnProperty(i)) continue;
                                total +=  Number(i);
                            }

                            if (total == 162) quick_speed = true;
                            if (total == 186) quick_speed = false;
                        }
                    }
                },
            }
        },
    };
    scf.merge( func );

    // Landing Pages
    var func = {
        video_faq: {
            start_video: function( el, t ) {

                var $this = $(el);

                $this.on( "click", function() {
                    $(".video-cover").hide();
                    $(".video-faq").trigger("play").scrollTo(-150);
                } );

            },
        },
    };
    scf.merge( func );

	// how monitoring works popup
    var func = {
        monitoring: {
            slider: function( el, t ) {

                var $this = $(el);

                $this.on( "click", function() {
                    var nextEl = $this.parents('.popup-contents').find('.slide.active').next(),
                        nextID = nextEl.attr('id');

                    $this.parents('.popup-contents').find('.slide').removeClass('active');
                    nextEl.addClass('active'); 
                    console.log(nextID);
                    $this.parents('.popup-contents').find('.dots-wrapper li').removeClass('active');
                    $this.parents('.popup-contents').find('.dots-wrapper .id-'+nextID).addClass('active');
                } );

            },
        },
    };
    scf.merge( func );

	// Report page redirect
    var func = {
        report_ready: {
            set_link: function( el, t ) {

                var $this = $(el);

                $this.on( "click", function() {
					var url = { url: $(this).attr('data-target') };
					
					$(this).addClass('loading');
					t.http.ajax_request( 'last_checkout_url', 'post', url, function() { });
                } );

            }
        }
    };
    scf.merge( func );    
    //Flagged Account
    var func = {
        flagged: {
            file_choose: function( el, t ) {

                var $this = $(el);

                $this.on( "click", function() {
                    $(".flagged_upload .file").trigger('click');
                } );

            },
            change: function( el, t, o ) {

                var $this = $(el);

                $this.on( "change", function() {

                    t.modal.close( 'image_type_error' );
                    t.modal.close( 'image_size_error' );

                    if ( ! /\.(jpg|jpeg|png)$/im.test( this.value ) ) {

                        t.modal.show( 'image_type_error' );

                    } else {

                        var img = new Image();
                        img.onload = function() {
                            if ( img.width >= 600 && img.height >= 600 ) {
                                $( "#account_flagged" ).submit();
                                $( ".flagged_upload .btn-bordered-red" ).text( "Uploading..." );
                                t.modal.close( 'image_type_error' );
                                t.modal.close( 'image_size_error' );
                            } else {
                                t.modal.show( 'image_size_error' );
                            }
                        };
                        img.onerror = function() {
                            t.modal.show( 'image_type_error' );
                        }
                        img.src = window.URL.createObjectURL( this.files[0] );

                    }

                } );

            }
        },
    };
    scf.merge( func );


    // Progress Runner
    var func = {
        progress_runner: {
            start: function( data, pre_run, on_percentage_change, on_change_step, on_complete, level_data ) {

                var status = {
                    current_step: 0,
                    percentage: 0,
                    rush: false,
                    ab_speed: false, //AB TEST LOOK FOR ab_speed on deletion CSI-4449
                    run_on_percentage_change: ( typeof on_percentage_change == "function" ),
                    run_on_change_step: ( typeof on_change_step == "function" ),
                    run_on_complete: ( typeof on_complete == "function" ),
                    level_data: ( typeof on_level_complete == "object" ) ? level_data : null,
                    worker: null,
                    report:true,
                };

                var run = function() {

                    status.percentage++;

                    status.run_on_percentage_change && on_percentage_change( data[ status.current_step ], status );

                    if ( status.percentage == 1 || data[ status.current_step ].percentage < status.percentage ) {

                        if ( status.percentage > 1 ) status.current_step++;
                        if ( status.run_on_change_step ) on_change_step( data[ status.current_step ], status );
                    }

                    if ( status.percentage == 100 ) {
                        if (status.worker) {
                            status.worker.terminate();
                            status.worker = null;
                        }

                        status.run_on_complete && on_complete( data[ status.current_step ], status );
                        return;

                    }

                    if ( typeof data[ status.current_step ] == "undefined" ) return;

                    let current_speed = (quick_speed ? 10 : (status.rush ? 50 : data[ status.current_step ].speed)); 

                    if ($('.ww-ab').length > 0) {

                        if (!status.worker) {

                            status.worker = new Worker("/assets/template/2020/js/animation-interval.js");
                            status.worker.addEventListener('message', (event) => { 

                                run();
    
                            });

                        }

                        status.worker.postMessage(current_speed);

                      } else {
                    
                        setTimeout( function() {

                            run();

                        }, (quick_speed ? 10 : (status.rush ? 50 : current_speed ) ) );

                    }

                };

                if ( typeof pre_run == "function" ) pre_run( status );

                run();

            },
            start_multi_level: function( data, pre_run, on_percentage_change, on_change_step, on_complete, on_level_change, on_multi_level_complete ) {

                var
                    t = this,
                    level_data = data.shift(),
                    level = JSON.parse( JSON.stringify( level_data ) );

                if ( typeof data.length != "number" ) return;

                delete( level.data );

                if ( typeof on_level_change == "function" ) on_level_change( level );
                t.start( level_data.data, pre_run, on_percentage_change, on_change_step, function() {

                    if ( typeof on_complete == 'function' ) on_complete();
                    if ( data.length ) {

                        t.start_multi_level( data, pre_run, on_percentage_change, on_change_step, on_complete, on_level_change, on_multi_level_complete );

                    } else {
      
                        if ( typeof on_multi_level_complete == "function" ) on_multi_level_complete();

                    }

                }, level );

            },
        }
    }
    scf.merge( func );


    // Body
    var func = {
        body: {
            init: function( el, t, o ) {

                var
                    $this = $(el),
                    $full_search = $(el).find('.scf-full-search'),
                    offset = 0,
                    search_float = false,
                    $header = $("#header_2020");

                if ( $full_search.length ) {

                    offset = $full_search.offset().top + $full_search.outerHeight()
                    window.addEventListener( 'scroll', t.throttle( function( e ) {
                        if($full_search.hasClass('new-header')) {
                            $this.addClass('fixed');
                            return;
                        }

                        var y = window.scrollY;
                        let is_demo_mode_on = localStorage.getItem("demo_mode_on");

                        if ( search_float && y < offset ) {

                            search_float = false;
                            if(is_demo_mode_on != "true")
                                $this.toggleClass( 'fixed', search_float );

                        } else if ( ! search_float && y > offset ) {

                            search_float = true;
                            if(is_demo_mode_on != "true")
                                $this.toggleClass( 'fixed', search_float );

                        }

                    }, 100 ) )

                }

            },
        },
    }
    scf.merge( func );

    // Menu
    var func = {
        menu: {
            main: function( el, t, o ) {

                o.$menu = $(el).on( "click", function( e ) {

                    e.stopPropagation();

                } );

            },
            mobile: function( el, t, o ) {

            	t.v['menu.mobile'] = el;
                $(el).on( "click", function( e ) {

                    var $f = {},
                        $this = $(this);

                    o.$menu.extract_vars( $f );
                    $f.menu.toggle();
                    e.stopPropagation();
					if( $this.hasClass('si-option-vertical') ) {

						$this.removeClass('si-option-vertical');
						$this.addClass('si-close');

                        $(".scf-full-search.scfb-compact-search.new-header, .new-header-search .si-close").hide();

						var $ob = $( t.v['menu.dashboard'] );
						if ( $ob.hasClass("active") ) {

							$ob.click();	

						}

                    } else {
                        $this.addClass('si-option-vertical');
                        $this.removeClass('si-close');
                    }

                } );

            },
            item: function( el, t, o ) {

                var
                    $body = $('body'),
                    func = function() {

                        o.close_menu();
                        $body.off( "click", func );

                    };

                $(el).on( "click", function( e ) {

                    var $this = $(this);

                    if ( o.$menu.toggleClass("active").hasClass("active") ) {

                        $body.on( "click", func );

                    }
                    $this.parent().toggleClass("active").siblings().removeClass("active");
                    t.http.ajax_request( 'faq_cancel_subscription_unset','post',"", function() { });  

                } );

            },
            close_menu: function() {

                this.$menu.removeClass("active").find(".active").removeClass("active");

            },
            back: function( el, t, o ) {

                $(el).on( "click", function() {

                    o.close_menu.apply(o);

                } );

            },
            login_toggle: function( el, t ) {

                $(el).on( "click", function() {

                    $(this).closest(".login-modal").toggleClass("forgot");

                } );

            },
            dashboard: function( el, t, o ) {

            	t.v['menu.dashboard'] = el;
                $(el).on( "click", function() {

                    $( [ this, t.v['menu.dash_nav'] ] ).toggleClass("active");
                    if ( $(this).hasClass("active") ) {
                    	
						var $ob = $( t.v['menu.mobile'] );
						if ( $ob.hasClass("si-close") ) {

							$ob.click();	

						}
                    	
					}
                    $(".scf_2020_style.module-dashboard ").toggleClass("dashboard-body-mobile");

                } );

            },
            switch_view: function( el, t, o ) {

                $(el).on( "click", function() {

                    t.modal.show('switch_classic');

                } );
                t.v['menu.switch_view'] = el;

            },
            login: {
                form: function( el, t, o ) {

                    $(el).on( "submit", function() {

                        var
                            $this = $(this),
                            $err = $(t.v['menu.login.error']).hide(),
                            $err_header = $(t.v['menu.login.error_header']).hide(),
                            $btn = $this.find(".btn"),
                            data = $this.serializeObject();

                        function executeWithToken() {
                            return new Promise(function (resolve, reject) {
                                grecaptcha.ready(function () {
                                    grecaptcha.execute('6LftTMMeAAAAAHodlggyeFfE5vOJRAvyArRZqkZv', { action: 'login' }).then(function (token) {
                                        data['token_r3'] = token;
                                        resolve(data);  // Resolve the promise with the modified data
                                    }).catch(function (error) {
                                        reject(error);  // Handle any errors
                                    });
                                });
                            });
                        }

                        if ( ! $.trim( data.email ) || ! $.trim( data.password ) ) {

                            $err.text("Please enter your email address and password").show();
                            $err_header.text("Please enter your email address and password").show();
                            $btn.loading();
                            return false;

                        }
                        data['action'] = "login";
                        executeWithToken().then(function (data) {
                        t.http.request( path.base_url+'login.html', 'post', data, 'json', function( response ) {

                            response = JSON.parse( response );

                            if ( response.status ) {
                                if (response.active_plans) {                                   
                                    $btn.loading();
                                    t.fl(response.url);
                                } else {    
                                    $btn.loading();                                      
                                    if($('#user_checkout_btn').length >0){
                                        $('#user_checkout_btn').click();  
                                        t.fl(response.url); 
                                    } else {
                                        t.fl(response.url);
                                    }                                    
                                                         
                                }

                            } else {
                                
                                $btn.loading();
                                $err.text( response.message ).show();
                                $err_header.text( response.message ).show();
                                return false;

                            }


                        } );
                    } );
                    } );

                },
                forgot: function( el, t, o ) {

                    $(el).on( "click", function() {
                        var token_r3;
                        function executeWithToken() {
                            return new Promise(function (resolve, reject) {
                                grecaptcha.ready(function () {
                                    grecaptcha.execute('6LftTMMeAAAAAHodlggyeFfE5vOJRAvyArRZqkZv', { action: 'magic_link' }).then(function (token) {
                                        token_r3 = token;
                                        resolve(token_r3);  // Resolve the promise with the modified data
                                    }).catch(function (error) {
                                        reject(error);  // Handle any errors
                                    });
                                });
                            });
                        }

                        var
                            $f = {},
                            $this = $(this);

                        if ( $this.is_loading() ) return;

                        $(t.v['menu.login.forgot_form']).extract_vars( $f );
                        $f.error.hide();
                        $f.success.hide();

                        if ( ! $.trim( $f.email.val() ) ) {

                            $f.error.val("Please enter your email address").show();

                        } else {

                            $this.loading( true );
                            executeWithToken().then(function (token_r3) {
                            t.http.request( '/login.html', 'post', { action: 'reset', email: $f.email.val(), token_r3 :token_r3 }, 'json', function( response ) {

                                $this.loading();
                                response = JSON.parse( response );

                                if ( response.status ) {

                                    $f.success.show();
                                    window.location.href = response.url;
                                } else {

                                    $f.error.val("Invalid email address").show();

                                }


                            } );
                        });
                        }

                    } );
                

                },
                reset: function( el, t ) {

                    $(el).on( 'click', function(e) {
                        e.preventDefault();
                        var $this = $(el);
                        password_1 = $( "#password_1" ).val(),
                        password_2 = $( "#password_2" ).val(),
                        $error = "";

                        $( '#reset-from').find('.scf-notification').remove();

                        if( password_1 == "" || password_2 == "" ) {
                            $error = "Password field is required to be filled.";
                        } else if ( password_1 != password_2 ) {
                            $error = "The password and confirm password do not match.";
                        } else $error = "";

                        if( $error != "" ) {
                            $text = t.create.notification( 'error', $error );
                            $this.closest(".btn").before( $text );
                            return;
                        } else {
                            data = $('#reset-from').serializeObject();

                            if( $this.data('from')=='magic-link'){
                              t.http.request( '/reset.html', 'post', data, 'json', function( response ) {

                                  $this.loading();
                                  response = JSON.parse( response );
  
                                  if ( response.status ) {

                                      t.modal.close('update_password');
                                      t.modal.show('password_success');
                                  } else {
                                      $text = t.create.notification( 'error', 'Something went wrong' );
                                      $this.closest(".btn").before( $text );
                                  }
  
  
                              } );
                            }else{
                              //$this.parents("form").submit();
                            }
                        }

                    });
                },
                passwordToggle: function( el, t ) {

                    $(el).on( 'click', function() {

                        var $this = $(el);

                        $(this).toggleClass("si-eye-open si-eye-close");
                        var input = $($(this).attr("toggle"));
                        if (input.attr("type") == "password") {
                          input.attr("type", "text");
                        } else {
                          input.attr("type", "password");
                        }
                    });
                },                
            },
            demo_mode: {
                show_tooltip: function( el, t, o ) {                    
                    let is_demo_mode_on = localStorage.getItem("demo_mode_on");
                    let is_new_user = localStorage.getItem("is_new_user");
                    let show_demo_mode_tooltip_for_existing_user = $(el).attr('data-show-demo-mode-tooltip-for-existing-user');

                    if(is_demo_mode_on == "true")
                        return false;

                    if(is_new_user == "true" || show_demo_mode_tooltip_for_existing_user == "true") {
                        setTimeout(function() {
                            $(el).css({"display":"block"});
                        }, 3000);

                        setTimeout(function() {
                            $(el).fadeOut(); 
                        }, 12000);
                    }
                },
                show_tooltip_mobile: function( el, t, o ) {
                    let is_demo_mode_on = localStorage.getItem("demo_mode_on");
                    let is_new_user = localStorage.getItem("is_new_user");

                    if(is_demo_mode_on == "true")
                        return false;

                    if(is_new_user == "true") {
                        if(t.is_mobile() || t.menu.demo_mode.is_iPad() ) {
                            setTimeout(function() {
                                $(el).css({"display":"block"});
                            }, 3000);

                            setTimeout(function() {
                                $(el).fadeOut(); 
                            }, 12000);
                        }
                    }
                },
                close_tooltip_mobile: function( el, t, o ) {
                    $(el).on( 'click', function(e) {
                        $('.tip-prompt-bottom').hide();
                    });
                },
                is_iPhone_se: function() {
                    return window.matchMedia("(max-width: 389px)").matches;
                },
                is_iPhone_pro: function() {
                    return window.matchMedia("(min-width: 430px) and (max-width: 768px)").matches;
                },
                is_iPad: function() {
                    return window.matchMedia("(min-width: 768px) and (max-width: 820px)").matches;
                },
                is_iPad_pro: function() {
                    return window.matchMedia("(min-width: 820px) and (max-width: 1024px)").matches;
                },
                mb_re_order: function() {
                    var $badge = $('.badge-4');
                    var $element = $('.db-privacy-lock');
                    var $destination = $('.search-tokens-section');

                    if ($element.length && $destination.length) {
                        $element.detach().insertAfter($destination);
                        $badge.detach().insertBefore($element);
                    }
                },
                sync_checkbox: function(t, status) {
                    let is_new_user = localStorage.getItem("is_new_user");

                    if( t.is_mobile() || t.menu.demo_mode.is_iPad() ) {
                        $('.scf-tooltip-demo-mode-toggle-mobile').css({"display":"flex"});

                        if(status && is_new_user == "true")
                            $('.dashboard-menu-new').trigger('click');
                    }

                    $('.demo-switch input[type="checkbox"]').prop('checked', status);
                },
                kill: function(el, t, o) {
                    $(el).on("click", function() {
                        localStorage.setItem("demo_mode_on", "false");
                    })
                },
                toggle: function( el, t, o ) {
                    let is_demo_mode_on = localStorage.getItem("demo_mode_on");
                    
                    $(el).on("change", function() {
                        if (this.checked) {
                            t.menu.demo_mode.sync_checkbox(t, true);

                            let is_new_user = localStorage.getItem("is_new_user");
                            
                            localStorage.setItem("demo_mode_on", "true");
                            $('.scf_2020_style').removeClass('fixed');

                            $(".tip-prompt-bottom").css({"display":"none"});

                            if( t.is_mobile() || t.menu.demo_mode.is_iPad() ) {
                                t.menu.demo_mode.mb_re_order();
                            }

                            $(".scf-tooltip-badge-target").each(function() {
                                let badge_number = $(this).attr('data-badge-number');
                                let org_badge_number = badge_number;
                                if ( t.is_mobile() || t.menu.demo_mode.is_iPad() ) {
                                    badge_number--;
                                }
                                let badge_position = $(this).attr('data-badge-position');

                                if ($(this).find(".scf-tooltip-badge-container").length === 0) {
                                    $(this).append(`<div class="scf-tooltip-badge-container"><span class="scf-tooltip-badge ${badge_position}" id="scf-tooltip-badge-${org_badge_number}">${badge_number}</span></div>`);
                                }
                            });

                            $(".scf-tooltip-badge-target").click(function() {
                                $(this).find('.scf-tooltip-badge').addClass('active');

                                if ($("#screen-overlay").length === 0) {
                                    $("body").append('<div id="screen-overlay"></div>');
                                }

                                let badge_number = $(this).attr('data-badge-number');
                                t.menu.demo_mode["show_popup_" + badge_number](el, t, o);

                                if(badge_number > 1)
                                    $('#header_2020').css({"z-index": '999'});
                            })

                            if(is_new_user == "true") {
                                setTimeout(() => {
                                    if ($("#screen-overlay").length === 0) {
                                        $("body").append('<div id="screen-overlay"></div>');
                                    }

                                    if ( t.is_mobile() || t.menu.demo_mode.is_iPad() ) {
                                        t.menu.demo_mode.show_popup_2(el, t, o );
                                    } else {
                                        t.menu.demo_mode.show_popup_1(el, t, o );
                                    }
                                }, 1000);
                            }
                        } else {
                            t.menu.demo_mode.sync_checkbox(t, false);
                            localStorage.setItem("demo_mode_on", "false");

                            $(".scf-tooltip-badge-target .scf-tooltip-badge-container").remove();

                            $('#header_2020').css({"z-index": '9999'});
                        }
                    });

                    if (is_demo_mode_on == "true") {
                        $(el).prop("checked", true).trigger("change");
                    }

                    $('.dashboard-menu-new').on("click", function(event) {
                        $('.tip-prompt-bottom.mobile').hide();
                    })
                },
                show_popup_1: function( el, t, o ) { 

                    let asset_url = path.relative_url + 'assets/template/2020';
                    let step = 1;

                    let bar_width = (step / 8) * 100;

                    $('#header_2020').css("z-index", 'initial');
                    $('.search-form-2020 .tabs-content:first').css({"z-index": '1100', "position": 'relative'});
                    $('#scf-tooltip-badge-1').addClass('active');

                    $('#header_2020').after(`
                        <div class="scf-tooltip-popup-container" style="margin: -10px 450px;">
                            <div class="frame">
                                <div class="frame-wrapper">
                                    <div class="div">
                                        <img class="img" src="${asset_url}/images/dashboard-revamp/tip.svg">
                                        <div class="text-wrapper">Main Search Bar</div>
                                    </div>
                                </div>
                                <img class="close-btn-1 img" src="${asset_url}/images/dashboard-revamp/close-circle.svg">
                            </div>
                            <div class="frame-2">
                                <p class="posible-criminal">
                                    Start your search journey here! Simply enter the name, email, phone number, or upload the image you want to search for, and we’ll do the rest. Available for all search types under your plan.
                                </p>
                                <div class="frame-3">
                                    <div class="frame-4">
                                        <div class="text-wrapper-2">Step ${step} of 8</div>
                                        <div class="group">
                                            <div class="overlap-group"><div class="bar-active" style="width: ${bar_width}px;"></div></div>
                                        </div>
                                    </div>
                                    <div class="frame-5">
                                        <div class="frame-6 next-point-1"><div class="text-wrapper-4">Next Point</div></div>
                                    </div>
                                </div>
                            </div>
                            <img class="polygon" src="${asset_url}/images/dashboard-revamp/polygon_1_new.svg">
                            <img class="rectangle" src="${asset_url}/images/dashboard-revamp/rectangle_1629_new.svg">
                        </div>
                    `);

                    t.menu.demo_mode.popup_actions(el, t, o, 1, '#header_2020');
                },
                show_popup_2: function( el, t, o ) { 
                    
                    let asset_url = path.relative_url + 'assets/template/2020';

                    let step = 2;
                    let bar_width = (step / 8) * 100;
                    let step_text = 'Step '+ step +' of 8';
                    let back_btn = '<div class="div-wrapper back-btn-2"><div class="text-wrapper-3">Back</div></div>';
                    
                    if ( t.is_mobile() || t.menu.demo_mode.is_iPad() ) {
                        step = 1;
                        bar_width = (step / 7) * 100;
                        step_text = 'Step '+ step +' of 7';
                        back_btn = '';
                    }

                    $('.expand-scf-db-search').css({"z-index": '9999', "position": 'relative'});
                    $('#scf-tooltip-badge-2').addClass('active');

                    $('.expand-scf-db-search').after(`
                        <div class="scf-tooltip-popup-container" style="margin: 10px 0;">
                            <div class="frame">
                                <div class="frame-wrapper">
                                    <div class="div">
                                        <img class="img" src="${asset_url}/images/dashboard-revamp/tip.svg">
                                        <div class="text-wrapper">Quick Access Search Tools</div>
                                    </div>
                                </div>
                                <img class="close-btn-2 img" src="${asset_url}/images/dashboard-revamp/close-circle.svg">
                            </div>
                            <div class="frame-2">
                                <p class="posible-criminal">
                                    Find all available search types in one place. Select the search type that suits your needs and get started instantly.
                                </p>
                                <div class="frame-3">
                                    <div class="frame-4">
                                        <div class="text-wrapper-2">${step_text}</div>
                                        <div class="group">
                                            <div class="overlap-group"><div class="bar-active" style="width: ${bar_width}px;"></div></div>
                                        </div>
                                    </div>
                                    <div class="frame-5">
                                        ${back_btn}
                                        <div class="frame-6 next-point-2"><div class="text-wrapper-4">Next Point</div></div>
                                    </div>
                                </div>
                            </div>
                            <img class="polygon" src="${asset_url}/images/dashboard-revamp/polygon_1_new.svg">
                            <img class="rectangle" src="${asset_url}/images/dashboard-revamp/rectangle_1629_new.svg">
                        </div>
                    `);

                    t.menu.demo_mode.popup_actions(el, t, o, 2, '.expand-scf-db-search');
                },
                show_popup_3: function( el, t, o ) { 
                    
                    let asset_url = path.relative_url + 'assets/template/2020';

                    let step = 3;
                    let bar_width = (step / 8) * 100;
                    let step_text = 'Step '+ step +' of 8';
                    
                    if ( t.is_mobile() || t.menu.demo_mode.is_iPad() ) {
                        step = 2;
                        bar_width = (step / 7) * 100;
                        step_text = 'Step '+ step +' of 7';
                    }

                    $('.search-tokens-section').css({"z-index": '9999', "position": 'relative'});

                    $('.search-tokens-section').after(`
                        <div class="scf-tooltip-popup-container" style="margin: 10px 0;">
                            <div class="frame">
                                <div class="frame-wrapper">
                                    <div class="div">
                                        <img class="img" src="${asset_url}/images/dashboard-revamp/tip.svg">
                                        <div class="text-wrapper">Search History and Reports</div>
                                    </div>
                                </div>
                                <img class="close-btn-3 img" src="${asset_url}/images/dashboard-revamp/close-circle.svg">
                            </div>
                            <div class="frame-2">
                                <p class="posible-criminal">
                                    Quickly revisit past searches and access detailed reports. Your search history is securely stored and easily accessible.
                                </p>
                                <div class="frame-3">
                                    <div class="frame-4">
                                        <div class="text-wrapper-2">${step_text}</div>
                                        <div class="group">
                                            <div class="overlap-group"><div class="bar-active" style="width: ${bar_width}px;"></div></div>
                                        </div>
                                    </div>
                                    <div class="frame-5">
                                        <div class="div-wrapper back-btn-3"><div class="text-wrapper-3">Back</div></div>
                                        <div class="frame-6 next-point-3"><div class="text-wrapper-4">Next Point</div></div>
                                    </div>
                                </div>
                            </div>
                            <img class="polygon" src="${asset_url}/images/dashboard-revamp/polygon_1_new.svg">
                            <img class="rectangle" src="${asset_url}/images/dashboard-revamp/rectangle_1629_new.svg">
                        </div>
                    `);

                    t.menu.demo_mode.popup_actions(el, t, o, 3, '.search-tokens-section');
                },
                show_popup_4: function( el, t, o ) { 
                    
                    let asset_url = path.relative_url + 'assets/template/2020';

                    let step = 4;
                    let bar_width = (step / 8) * 100;
                    let step_text = 'Step '+ step +' of 8';

                    if ( t.is_mobile() || t.menu.demo_mode.is_iPad() ) {
                        step = 3;
                        bar_width = (step / 7) * 100;
                        step_text = 'Step '+ step +' of 7';
                    }

                    let margin = '-475px -425px';
                    if ( t.menu.demo_mode.is_iPhone_se() ) {
                        margin = '-666px 0';
                    } else if ( t.is_mobile() && !t.menu.demo_mode.is_iPhone_pro() ) {
                        margin = '-665px 0';
                    } else if( t.menu.demo_mode.is_iPad() ) {
                        margin = '-765px 0';
                    } else if( t.menu.demo_mode.is_iPhone_pro() ) {
                        margin = '-640px 0';
                    }

                    let arrow_html = '<img class="group-2" src="'+ asset_url +'/images/dashboard-revamp/arrow-right.svg">';
                    if ( t.is_mobile() && !t.menu.demo_mode.is_iPhone_pro() ) {
                        arrow_html = '<img class="group-3" src="'+ asset_url +'/images/dashboard-revamp/arrow-down.svg" style="top: 299px; position: absolute;">';
                    } else if( t.menu.demo_mode.is_iPad() ) {
                        arrow_html = '<img class="group-3" src="'+ asset_url +'/images/dashboard-revamp/arrow-down.svg" style="top: 258px; position: absolute;">';
                    } else if( t.menu.demo_mode.is_iPhone_pro() ) {
                        arrow_html = '<img class="group-3" src="'+ asset_url +'/images/dashboard-revamp/arrow-down.svg" style="top: 277px; position: absolute;">';
                    }

                    $('.db-privacy-lock').css({"z-index": '9999', "position": 'relative'});
                    $('.badge-4').css({"z-index": '99999', "position": 'absolute'});

                    $('.db-privacy-lock').after(`
                        <div class="scf-tooltip-popup-container" style="margin: ${margin};">
                            <div class="frame">
                                <div class="frame-wrapper">
                                    <div class="div">
                                        <img class="img" src="${asset_url}/images/dashboard-revamp/tip.svg">
                                        <div class="text-wrapper privacy-lock-title-mobile">Privacy Lock: Protect Your Data</div>
                                    </div>
                                </div>
                                <img class="close-btn-4 img" src="${asset_url}/images/dashboard-revamp/close-circle.svg">
                            </div>
                            <div class="frame-2" style="padding: 24px 23px;">
                                <p class="posible-criminal">
                                    Monitor and secure your online presence with Privacy Lock. Keep tabs on your digital footprint, data breaches, and privacy score—all included with your subscription.
                                </p>
                                <div class="frame-3">
                                    <div class="frame-4">
                                        <div class="text-wrapper-2">${step_text}</div>
                                        <div class="group">
                                            <div class="overlap-group"><div class="bar-active" style="width: ${bar_width}px;"></div></div>
                                        </div>
                                    </div>
                                    <div class="frame-5">
                                        <div class="div-wrapper back-btn-4"><div class="text-wrapper-3">Back</div></div>
                                        <div class="frame-6 next-point-4"><div class="text-wrapper-4">Next Point</div></div>
                                    </div>
                                </div>
                            </div>
                            ${arrow_html}
                        </div>
                    `);

                    t.menu.demo_mode.popup_actions(el, t, o, 4, '.db-privacy-lock');
                },
                show_popup_5: function( el, t, o ) {

                    let asset_url = path.relative_url + 'assets/template/2020';
                    
                    let step = 5;
                    let bar_width = (step / 8) * 100;
                    let step_text = 'Step '+ step +' of 8';

                    if ( t.is_mobile() || t.menu.demo_mode.is_iPad() ) {
                        step = 4;
                        bar_width = (step / 7) * 100;
                        step_text = 'Step '+ step +' of 7';
                    }

                    let margin = -385;
                    if ( t.menu.demo_mode.is_iPhone_se() ) {
                        margin = -425;
                    }else if ( t.is_mobile() ) {
                        margin = -400;
                    } else if ( t.menu.demo_mode.is_iPad() ) {
                        margin = -388;
                    } else if ( t.menu.demo_mode.is_iPad_pro() ) {
                        margin = -402;
                    }

                    let position_style = 'position: absolute;';
                    if ( t.menu.demo_mode.is_iPhone_se() ) {
                        position_style = 'top: 258px; position: absolute;';
                    }

                    $('.criminal-banner').css({"z-index": '9999', "position": 'relative'});
                    $('.badge-5').css({"z-index": '99999', "position": 'absolute'});

                    $('.criminal-banner').after(`
                        <div class="scf-tooltip-popup-container" style="margin: ${margin}px 0">
                            <div class="frame">
                                <div class="frame-wrapper">
                                    <div class="div">
                                        <img class="img" src="${asset_url}/images/dashboard-revamp/tip.svg">
                                        <div class="text-wrapper">Criminal Records Search</div>
                                    </div>
                                </div>
                                <img class="close-btn-5 img" src="${asset_url}/images/dashboard-revamp/close-circle.svg">
                            </div>
                            <div class="frame-2">
                                <p class="posible-criminal">
                                    Curious about someone’s criminal background? Use this tool to uncover records and make informed decisions.
                                </p>
                                <div class="frame-3">
                                    <div class="frame-4">
                                        <div class="text-wrapper-2">${step_text}</div>
                                        <div class="group">
                                            <div class="overlap-group"><div class="bar-active" style="width: ${bar_width}px;"></div></div>
                                        </div>
                                    </div>
                                    <div class="frame-5">
                                        <div class="div-wrapper back-btn-5"><div class="text-wrapper-3">Back</div></div>
                                        <div class="frame-6 next-point-5"><div class="text-wrapper-4">Next Point</div></div>
                                    </div>
                                </div>
                            </div>
                            <img class="group-3 popup-5" src="${asset_url}/images/dashboard-revamp/arrow-down.svg" style="${position_style}">
                        </div>
                    `);

                    t.menu.demo_mode.popup_actions(el, t, o, 5, '.criminal-banner');
                },
                show_popup_6: function( el, t, o ) {

                    let asset_url = path.relative_url + 'assets/template/2020';

                    let step = 6;
                    let bar_width = (step / 8) * 100;
                    let step_text = 'Step '+ step +' of 8';

                    if ( t.is_mobile() || t.menu.demo_mode.is_iPad() ) {
                        step = 5;
                        bar_width = (step / 7) * 100;
                        step_text = 'Step '+ step +' of 7';
                    }
                    
                    let margin = '-498px -112px';
                    if ( t.menu.demo_mode.is_iPhone_se() ) {
                        margin = '-495px 0';
                    }else if ( t.is_mobile() || t.menu.demo_mode.is_iPad() ) {
                        margin = '-500px 0';
                    } else if(t.menu.demo_mode.is_iPad_pro() ) {
                        margin = '-495px -195px';
                    }

                    let corn_style = 'top: 256px; position: absolute; left: 275px;';
                    if ( t.is_mobile() || t.menu.demo_mode.is_iPad() ) {
                        corn_style = 'top: 256px; position: absolute; left: 65px;';
                    }

                    $('.db-specialist-banner').css({"z-index": '9999', "position": 'relative'});
                    $('.badge-6').css({"z-index": '99999', "position": 'absolute'});
                    $('.badge-5').css({"z-index": '9999', "position": 'initial'});

                    $('.db-specialist-banner').after(`
                        <div class="scf-tooltip-popup-container" style="margin: ${margin}">
                            <div class="frame">
                                <div class="frame-wrapper">
                                    <div class="div">
                                        <img class="img" src="${asset_url}/images/dashboard-revamp/tip.svg">
                                        <div class="text-wrapper">Search Specialist Service</div>
                                    </div>
                                </div>
                                <img class="close-btn-6 img" src="${asset_url}/images/dashboard-revamp/close-circle.svg">
                            </div>
                            <div class="frame-2">
                                <p class="posible-criminal">
                                    Need a deeper investigation? Our experts provide one-time, in-depth searches to uncover critical details beyond traditional tools.
                                </p>
                                <div class="frame-3">
                                    <div class="frame-4">
                                        <div class="text-wrapper-2">${step_text}</div>
                                        <div class="group">
                                            <div class="overlap-group"><div class="bar-active" style="width: ${bar_width}px;"></div></div>
                                        </div>
                                    </div>
                                    <div class="frame-5">
                                        <div class="div-wrapper back-btn-6"><div class="text-wrapper-3">Back</div></div>
                                        <div class="frame-6 next-point-6"><div class="text-wrapper-4">Next Point</div></div>
                                    </div>
                                </div>
                            </div>
                            <img class="group-3" src="${asset_url}/images/dashboard-revamp/arrow-down.svg" style="${corn_style}">
                        </div>
                    `);

                    t.menu.demo_mode.popup_actions(el, t, o, 6, '.db-specialist-banner');
                },
                show_popup_7: function( el, t, o ) {

                    let asset_url = path.relative_url + 'assets/template/2020';

                    let step = 7;
                    let bar_width = (step / 8) * 100;
                    let step_text = 'Step '+ step +' of 8';

                    if ( t.is_mobile() || t.menu.demo_mode.is_iPad() ) {
                        step = 6;
                        bar_width = (step / 7) * 100;
                        step_text = 'Step '+ step +' of 7';
                    }
                    
                    let margin = '-200px -430px';
                    if ( t.is_mobile() && !t.menu.demo_mode.is_iPhone_pro() ) {
                        margin = '-500px 0';
                    } else if ( t.menu.demo_mode.is_iPad() ) {
                        margin = '-485px 0';
                    } else if ( t.menu.demo_mode.is_iPhone_pro() ) {
                        margin = '-480px 0';
                    }

                    let arrow_html = '<img class="group-2" src="'+ asset_url +'/images/dashboard-revamp/arrow-right.svg">';
                    if ( t.is_mobile() && !t.menu.demo_mode.is_iPhone_pro() ) {
                        arrow_html = '<img class="group-3" src="'+ asset_url +'/images/dashboard-revamp/arrow-down.svg" style="top: 258px; position: absolute; left: 45px;">';
                    } else if ( t.menu.demo_mode.is_iPad() ) {
                        arrow_html = '<img class="group-3" src="'+ asset_url +'/images/dashboard-revamp/arrow-down.svg" style="top: 235px; position: absolute; left: 45px;">';
                    } else if ( t.menu.demo_mode.is_iPhone_pro() ) {
                        arrow_html = '<img class="group-3" src="'+ asset_url +'/images/dashboard-revamp/arrow-down.svg" style="top: 235px; position: absolute; left: 45px;">';
                    }

                    $('.db-unfraudit-banner').css({"z-index": '9999', "position": 'relative'});
                    $('.badge-7').css({"z-index": '99999', "position": 'absolute'});

                    $('.db-unfraudit-banner').after(`
                        <div class="scf-tooltip-popup-container" style="margin: ${margin}">
                            <div class="frame">
                                <div class="frame-wrapper">
                                    <div class="div">
                                        <img class="img" src="${asset_url}/images/dashboard-revamp/tip.svg">
                                        <div class="text-wrapper">AI Scam Chat Checker</div>
                                    </div>
                                </div>
                                <img class="close-btn-7 img" src="${asset_url}/images/dashboard-revamp/close-circle.svg">
                            </div>
                            <div class="frame-2">
                                <p class="posible-criminal">
                                    Chatting with someone suspicious? Use our AI-powered tool to analyze conversations and detect potential scams.
                                </p>
                                <div class="frame-3">
                                    <div class="frame-4">
                                        <div class="text-wrapper-2">${step_text}</div>
                                        <div class="group">
                                            <div class="overlap-group"><div class="bar-active" style="width: ${bar_width}px;"></div></div>
                                        </div>
                                    </div>
                                    <div class="frame-5">
                                        <div class="div-wrapper back-btn-7"><div class="text-wrapper-3">Back</div></div>
                                        <div class="frame-6 next-point-7"><div class="text-wrapper-4">Next Point</div></div>
                                    </div>
                                </div>
                            </div>
                            ${arrow_html}
                        </div>
                    `);

                    t.menu.demo_mode.popup_actions(el, t, o, 7, '.db-unfraudit-banner');
                },
                show_popup_8: function( el, t, o ) {

                    let asset_url = path.relative_url + 'assets/template/2020';

                    let step = 8;
                    let bar_width = (step / 8) * 100;
                    let step_text = 'Step '+ step +' of 8';

                    if ( t.is_mobile() || t.menu.demo_mode.is_iPad() ) {
                        step = 7;
                        bar_width = (step / 7) * 100;
                        step_text = 'Step '+ step +' of 7';
                    }

                    let margin = '-312px -110px';
                    if ( t.menu.demo_mode.is_iPhone_se() ) {
                        margin = '-332px 0';
                    } else if ( t.is_mobile() || t.menu.demo_mode.is_iPad() ) {
                        margin = '-310px 0';
                    } else if(t.menu.demo_mode.is_iPad_pro() ) {
                        margin = '-325px -195px';
                    }

                    let corn_style = 'left: 310px; position:absolute;';
                    if ( t.menu.demo_mode.is_iPhone_se() ) {
                        corn_style = 'position:absolute;top: 258px;';
                    } else if ( t.is_mobile() || t.menu.demo_mode.is_iPad() ) {
                        corn_style = 'position:absolute;';
                    }

                    $('.db-membership-banner').css({"z-index": '9999', "position": 'relative'});
                    $('.badge-8').css({"z-index": '99999', "position": 'absolute'});
                    $('.badge-7').css({"z-index": '9999', "position": 'initial'});

                    $('.db-membership-banner').after(`
                        <div class="scf-tooltip-popup-container" style="margin: ${margin}">
                            <div class="frame">
                                <div class="frame-wrapper">
                                    <div class="div">
                                        <img class="img" src="${asset_url}/images/dashboard-revamp/tip.svg">
                                        <div class="text-wrapper">Explore Upgrade Options</div>
                                    </div>
                                </div>
                                <img class="close-btn-8 img" src="${asset_url}/images/dashboard-revamp/close-circle.svg">
                            </div>
                            <div class="frame-2">
                                <p class="posible-criminal">
                                    Looking for more features or additional searches? Check out our plans to find the best fit for your needs.
                                </p>
                                <div class="frame-3">
                                    <div class="frame-4">
                                        <div class="text-wrapper-2">${step_text}</div>
                                        <div class="group">
                                            <div class="overlap-group"><div class="bar-active" style="width: ${bar_width}px;"></div></div>
                                        </div>
                                    </div>
                                    <div class="frame-5">
                                        <div class="div-wrapper back-btn-8"><div class="text-wrapper-3">Back</div></div>
                                        <div class="frame-6 onboarding-close-btn"><div class="text-wrapper-4">Close</div></div>
                                    </div>
                                </div>
                            </div>
                            <img class="group-3 popup-8" src="${asset_url}/images/dashboard-revamp/arrow-down.svg" style="${corn_style}">
                        </div>
                    `);

                    t.menu.demo_mode.popup_actions(el, t, o, 8, '.db-membership-banner');
                },
                popup_actions: function(el, t, o, id, selector) {

                    $(document).on("click", ".next-point-" + id, function() {
                        $('.badge-' + id).css({"z-index": '1000'});

                        if(selector == '#header_2020') {
                            $(selector).css("z-index", '1000');
                        } else {
                            if(id == 6) {
                                $(selector).css({"z-index": '999', "position": 'relative'});
                            }else {
                                $(selector).css({"z-index": '999', "position": 'initial'});
                            }
                        }

                        $('.scf-tooltip-popup-container').remove();

                        let next_id = id + 1;
                        t.menu.demo_mode["show_popup_" + next_id](el, t, o);

                        $('#scf-tooltip-badge-' + id).removeClass('active');
                        $('#scf-tooltip-badge-' + next_id).addClass('active');
                    });

                    $(document).on("click", ".back-btn-" + id, function() {
                        $('.badge-' + id).css({"z-index": '1000'});

                        if(id == 6) {
                            $(selector).css({"z-index": '999', "position": 'relative'});
                        }else {
                            $(selector).css({"z-index": '999', "position": 'initial'});
                        }
                        
                        $('.scf-tooltip-popup-container').remove();

                        let prev_id = id - 1;
                        t.menu.demo_mode["show_popup_" + prev_id](el, t, o);

                        $('#scf-tooltip-badge-' + id).removeClass('active');
                        $('#scf-tooltip-badge-' + prev_id).addClass('active');
                    });

                    $(document).on("click", ".close-btn-" + id, function() {
                        $('.badge-' + id).css({"z-index": '1000'});

                        $("#screen-overlay, .scf-tooltip-popup-container").remove();
                        $(selector).css("z-index", '999');

                        $('#scf-tooltip-badge-' + id).removeClass('active');
                    });

                    $(document).on("click", ".onboarding-close-btn", function() {
                        $("#screen-overlay, .scf-tooltip-popup-container, .scf-tooltip-badge-target .scf-tooltip-badge-container").remove();
                        $(selector).css("z-index", '999');

                        $('.demo-switch input[type="checkbox"]').prop('checked', false);

                        $('#header_2020').css({"z-index": '9999'});

                        localStorage.setItem("demo_mode_on", "false");
                        localStorage.setItem("is_new_user", "false");

                        $('#scf-tooltip-badge-' + id).removeClass('active');
                    });

                    $(document).on("click", function(event) {
                        if (!$(event.target).closest(".scf-tooltip-popup-container").length && !$(event.target).closest(".scf-tooltip-badge-target").length) {
                            $("#screen-overlay, .scf-tooltip-popup-container").remove();
                            $(selector).css("z-index", '999');

                            for(var i=1; i<=8; i++) {
                                $('.badge-' + i).css({"z-index": '1000'});
                                $('#scf-tooltip-badge-' + i).removeClass('active');
                            }
                        }
                    });

                    $('.new-mb-option, .dashboard-menu-new').on("click", function(event) {
                        let selectors = ['.expand-scf-db-search', '.search-tokens-section', '.db-privacy-lock', '.criminal-banner', '.db-specialist-banner', '.db-unfraudit-banner', '.db-membership-banner'];
                        $.each(selectors, function(index, selector) {
                            $(selector).css("z-index", '999');
                        });

                        for(var i=1; i<=8; i++) {
                            $('.badge-' + i).css({"z-index": '1000'});
                            $('#scf-tooltip-badge-' + i).removeClass('active');
                        }
                    })
                },
            },
        },
    };
    scf.merge( func );

    // News Letter
    var func = {
        news_letter: {
            form: function( el, t ) {

                var $this = $(el);
                $this.on( 'click', function() {

                    var $input = $(t.v['news_letter.input']),
                        query = $this.data( "query" ),
                        type = $this.data( "type" );

                    if ( ! $input.length ) return;

                    var $search_type_input = $(t.v['news_letter.search_type']);
                    var $search_query_input = $(t.v['news_letter.search_query']);

                    if ( t.validator.email( $input.val() ) ) {

                        $this.text("Please wait...");
                        t.http.ajax_request( 'no_result_newsletter_revised', 'post', { 'email': $input.val(), 'query' : query, 'key' : type }, function( response ) {

                            if ( response.status ) {

                                $input.remove();
                                t.v['news_letter.input'] = [];
                                $this.text( "Subscribed Successfully" ).addClass("btn-green");

                            } else {

                                t.tooltip.show( t.v['news_letter.error'], 'Subscription failed! Please try again.' );
                                $this.text("Activate Alert");

                            }

                        } );

                    } else {

                        t.tooltip.show( t.v['news_letter.error'], 'Invalid Email Address' );

                    }

                } );

            }
        }
    };
    scf.merge( func );

    // News Letter
    var func = {
        no_results: {
            email_step: function( el, t ) {

                $(el).on( 'click', function() {

                    var $input = $(".email_step").val();
                        $this = $(this);
                        last_search = $this.data( "type" );

                    if ( t.validator.email( $input ) ) {

                        $this.addClass("loading");
                        $this.parent().find(".no_results_validation").text("");
                        t.http.ajax_request( 'no_result_newsletter_revised', 'post', { 'email': $input }, function( response ) {

                            if ( response.status ) {

                                if( $(".redirect_url").val() == "" ) {
                                    $(".scf_no_results .nr_progress_box, .scf_no_results .nrf_testimonial").hide();
                                    $("#funnel_no_results").show();
                                } else {
                                    window.location.href = $(".redirect_url").val();
                                }
                               
                            } else {
                                $this.parent().find(".no_results_validation").text( "Subscription failed! Please try again." );
                            }
                            $this.removeClass("loading");

                        } );

                    } else {
                        $this.parent().find(".no_results_validation").text( "Invalid Email Address*" );
                    }

                } );

            },
            skip_step: function( el, t ) {

                $(el).on( 'click', function() {

                    var $this = $( this ),
                        filed_val = $this.parent().parent().parent().find(".scf-form").val(),
                        skip_section = $this.data( "id" ),
                        search_type = $this.data( "type" ),
                        step_count = $(".step_count").val(),
                        ran_testimonial = Math.floor( Math.random() * 3 ) + 1,
                        start_progress = $this.data( "start" ),
                        end_progress = $this.data( "end" );

                    if( $this.hasClass( "add_deep_btn" ) ) {

                        if( filed_val == "" ) {
                            $(".nrf_required").remove();
                            $this.parent().parent().parent().find(".scf-form").after( "<div class='nrf_required'>Required field *</div>" );
                            return false;
                        }
                        if ( ! t.validator.email( filed_val ) && search_type == 1 ) {
                            $(".nrf_required").remove();
                            $this.parent().parent().parent().find(".scf-form").after( "<div class='nrf_required'>Email is not valid *</div>" );
                            return false;
                        }
                        
                        var phone_filter = /\(?([0-9]{3})\)?([ .-]?)([0-9]{3})\2([0-9]{4})/;
                        if ( ! phone_filter.test( filed_val ) && search_type == 3 ) {
                            $(".nrf_required").remove();
                            $this.parent().parent().parent().find(".scf-form").after( "<div class='nrf_required'>Invalid Phone Number. Correct format: +1-123-456-7890</div>" );
                            return false;
                        }
                        
                        $this.parent().parent().parent().find(".scf-form-tick").addClass( "active" );
                        $this.addClass( "loading" );
                        t.http.ajax_request( "add_deep_search", "POST", { "id": filed_val, "type" : search_type }, function() { });
                        
                    }else{
                        t.http.ajax_request( "skip_deep_search", "POST", { }, function() { });
                    }

                    if( $this.hasClass( "run_deep_search" ) ) {

                        $this.addClass( "loading" );

                        t.http.ajax_request( "run_deep_search", "POST", {}, function( ras ) {
                            
                            if( ras.url != "" ) {
                                if( skip_section == "funnel_email_setup" ) {
                                    $(".redirect_url").val( ras.url );
                                    $(".nr_progress_box").hide();
                                    $(".nr_progress_box").removeClass("active");
                                    $("#funnel_email_setup").show();
                                    if(usign){
                                        $("#funnel_search_ready").show();                                        
                                        $(".search_ready_link").attr( "href", ras.url );
                                    }
                                } else {

                                    if ( usign ) {
										$("#funnel_email").hide();
                                        $("#funnel_search_ready").show();   
                                                                             
                                        $(".search_ready_link").attr( "href", ras.url );
                                    } else {
                                        window.location.href = ras.url;
                                    }
                                    
                                }
                            } else {

                                $this.closest(".nr_progress_box").hide();
                                $(".nr_progress_box").removeClass("active");
                                $( "#" + skip_section ).show();  
                                $( "#" + skip_section ).addClass("active");              
            
                                $(".step_count").val( ++step_count );
            
                                $( ".nrp_steps label i" ).text( step_count );
            
                                for( var x=1; x <= step_count; x++ ) {
                                    $( "#" + skip_section + " .nrp_steps span:nth-child( " + x + " )").addClass( "active" );
                                }
            
                                $( ".nrf_testimonial" ).removeClass( "active" );
                                $( ".nrf_testimonial.nrf_tm" + ran_testimonial ).addClass( "active" );
                                if( "funnel_no_results" == skip_section ) $(".scf_no_results .nrf_testimonial").hide();

                            }

                        });

                    } else {
                        if( $this.hasClass( "add_deep_btn" ) ) {

                            setTimeout(function() {

                                $this.closest(".nr_progress_box").hide();
                                $(".nr_progress_box").removeClass("active");
                                $( "#" + skip_section ).show(); 
                                $( "#" + skip_section ).addClass("active");         
            
                                $(".step_count").val( ++step_count );
            
                                $( ".nrp_steps label i" ).text( step_count );
            
                                for( var x=1; x <= step_count; x++ ) {
                                    $( "#" + skip_section + " .nrp_steps span:nth-child( " + x + " )").addClass( "active" );
                                }
            
                                $( ".nrf_testimonial" ).removeClass( "active" );
                                $( ".nrf_testimonial.nrf_tm" + ran_testimonial ).addClass( "active" );

                            }, 2000 );
                            
                        } else {

                            $this.closest(".nr_progress_box").hide();
                            $(".nr_progress_box").removeClass("active");
                            $( "#" + skip_section ).show(); 
                            $( "#" + skip_section ).addClass("active");         
        
                            $(".step_count").val( ++step_count );
        
                            $( ".nrp_steps label i" ).text( step_count );
        
                            for( var x=1; x <= step_count; x++ ) {
                                $( "#" + skip_section + " .nrp_steps span:nth-child( " + x + " )").addClass( "active" );
                            }
        
                            $( ".nrf_testimonial" ).removeClass( "active" );
                            $( ".nrf_testimonial.nrf_tm" + ran_testimonial ).addClass( "active" );

                        }

                    }

                    if( skip_section == "funnel_username" || skip_section == "funnel_email" || skip_section == "funnel_phone" || skip_section == "funnel_email_setup" ) {

                        if( skip_section == "funnel_email_setup" ) {
                            start_progress = 98;
                            end_progress = 100;
                        }

                        timer = setInterval( function() {

                            if ( $(".scf_no_results .nr_progress_box.active .animation_progress").length ) {
                                $(".scf_no_results #" + skip_section + " .animation_progress h4 span").text( start_progress + "%" );
                                $(".scf_no_results #" + skip_section + " .scf-progress-bar .value").width( start_progress + "%" );
                                if( start_progress == end_progress ) clearInterval( timer );
                                ++start_progress;
                            }
        
                        }, 3000 );

                    }                    
                   

                } );

            }
        }
    };
    scf.merge( func );

    // Contact us and About us pages
    var func = {
        contact_us: {
            init: function( el, t ) {
                if( $(".scf-notification").length > 0 ) {
                    var $container = $("html,body");
                    var $scrollTo = $('.scf-notification').closest("form");
                    $container.animate({ scrollTop: $scrollTo.offset().top - $container.offset().top + $container.scrollTop(), scrollLeft: 0 },300 );
                } else {
                    if( $("#press-all").length > 0 ) {
                        var $container = $("html,body");
                        var $scrollTo = $('#press-all');
                        $container.animate({ scrollTop: $scrollTo.offset().top - $container.offset().top + $container.scrollTop(), scrollLeft: 0 },300 );
                    }
                }

				var $phone_field = $(el).find("[name='phone']");
				$phone_field[0].oninput = function() {

					this.setCustomValidity('');

				};

				$phone_field[0].oninvalid = function() {

					this.setCustomValidity('Invalid phone number');

				};
            },
            form: function( el, t ) {

                var $this = $(el);
                $this.on( 'click', function() {

                    $this.addClass( "loading" );
                    $this.closest( "form" ).submit();

                } );

            },
            live_chat: function( el, t ) {

                var $this = $(el);
                $this.on( 'click', function() {

                    window.fcWidget.open();
                    window.fcWidget.show();

                } );

            },
            //CSI_4793
            quiz_select: function( el, t ) {

                var $this = $(el);
                $this.on( 'change', function() {

                    $('.before-email-results .results').each(function(index, value){
                        if(this.id=='res-'+$this.val()){
                            $(this).fadeIn();
                        }else{
                            $(this).hide();
                        }
                      });

                } );

            }
        }
    };
    scf.merge( func );

    // Modals
    var func = {
        modal: {
            ref: {
                'html': $("html"),
                'body': $("body"),
            },
            show_fs_overlay: function() {

                this.ref.body.addClass('fs-active').prepend( $("<div class='fs_overlay'/>") );

            },
            hide_fs_overlay: function() {

                this.ref.body.removeClass('fs-active').find(".fs_overlay").remove();

            },
            set_current_data: function( el, t, n ) {

                t.modal.ref[n].data( 'current', $(el).data() );

            },
            show: function( n ) {

                if ( typeof this.ref[n] !== 'undefined' ) {

                    this.ref['html'].addClass('scf-popup-active');
                    this.ref[n].show();

                }

            },
            set_onclick_show: function(el, t) {
                $(el).on( 'click', function(){
                    $(el).parent().find('.dropdown-content').css('display','block')
                    $(el).parent().find('.dropdown-content').hover(function(){
                        $(this).css("display", "block");
                        }, function(){
                        $(this).css("display", "none");
                      });
                });
            },
            onclick_show: function( el, t ) {

                $.each( $(el).data(), function( key ) {
                    $(el).removeAttr('data-' + key );

                } );

                $(el).on( 'click', function() {

                    var target = $(this).data('target');
                    if ( typeof t.modal.ref[ target ] !== 'undefined' ) {

                        t.modal.ref[ target ].data( 'current', $(this).data() );
                        if ( ( typeof t.modal[ target ] == "object" ) && typeof t.modal[ target ]["pre_show"] == "function" ) t.modal[ target ]["pre_show"]( t.modal.ref[ target ], t );
                        t.modal.show( target );

                    }

                } );

            },
            adult_popup_show: function( el, t ) {   
                $(el).on( 'click', function() {
                    if($("#chk_adult_popup").prop("checked") == true) {
                        $("#adult_popup").css("display", "block");
                        $('#chk_adult_popup').prop('checked', false);

                    }else {
                        $(".adult_img_blur").css("display" , "none");
                        $(".adult_img_source").css("display" , "block");
                        //$(".adult_image").show();
                    }
                });
            },
            init: function( el, t ) {

                var name = t.data( el, 'name');
                t.modal.ref[ name ] = $(el);
                var $close = $(el).find(".close-modal");

                if ( typeof this[ name ] != "undefined" ) {

                    this[ name ].modal_name = name;
                    this[ name ].$modal_obj = t.modal.ref[ name ];

                }

                if ( $close.length ) {

                    if ( typeof this[ name ] != "undefined" && typeof this[ name ].close_override == "function" ) {

                        var modal_scope = this[ name ];
                        $close.on( 'click', function() {

                            modal_scope.close_override.call( modal_scope );

                        } );

                    } else {

                        this.onclick_close( $close.get(), t );

                    }

                }

                if ( typeof this[ name ] != "undefined" && typeof this[ name ].init == "function" ) this[ name ].init( el, t, this[ name ] );

            },
            onclick_close: function( el, t ) {

                $(el).on( 'click', function() {

                    var name = t.modal.parent( el ).data('name'),
                        video = $(this).parent().find('video');

                    if(video.length > 0){
                        video.get(0).pause();
                    }

                    t.modal.close( name );

                } );

            },
            close: function( n ) {

                if ( typeof this.ref[n] !== 'undefined' ) {

                    this.ref['html'].removeClass('scf-popup-active');
                    this.ref[n].hide();

                }

            },
            current: function( el ) {

                return this.parent( el ).data("current");

            },
            parent: function( el ) {

                if ( typeof el.hasClass == "function" && el.hasClass( "scf-popup" ) ) return el;
                else return $(el).parents('.scf-popup');

            },
            privacy_cookie: {
                close: function( el ) {
                    $(el).on('click', function(){
                        var days = 30; // 30 days expiration
                        var date = new Date();
                        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                        var expires = "; expires=" + date.toUTCString();
                
                        document.cookie = "scf_cookie_consent=true" + expires + "; path=/";
    
                        $('.privacy-popup').hide();
                        $('.modal-overlay').hide();

                   });
                }
            },
            blog_email_signup: {
                init: function (el, t) {
                    if (window.location.href.includes("scamfish") || window.location.href.includes("blog")) {
                        $(".scf_2020_style").on( 'mouseout', function(e) {

                            // if(event.clientY <= 0 || event.clientX <= 0 || (event.clientX >= window.innerWidth || event.clientY >= window.innerHeight)) {

                                // if (!localStorage.getItem("blogModalEmailSignUp")) {
                                    // localStorage.setItem("blogModalEmailSignUp", "true");

                                    try {
                                        t.modal.show("blog_email_sign_up");
                                        t.http.ajax_request( 'blog_modal_standard', 'post');
                                    } catch (e) {
                                        // console.log("Error with modal: blog_email_sign_up", e);
                                    }
                                    
                                    try {
                                        t.modal.show("blog_email_sign_up_ab_1");
                                        t.http.ajax_request( 'blog_modal_v1', 'post');
                                    } catch (e) {
                                        // console.log("Error with modal: blog_email_sign_up_ab_1", e);
                                    }
                                    
                                    try {
                                        t.modal.show("blog_email_sign_up_ab_2");
                                        t.http.ajax_request( 'blog_modal_v2', 'post');
                                    } catch (e) {
                                        // console.log("Error with modal: blog_email_sign_up_ab_2", e);
                                    }
                                    
                                    try {
                                        t.modal.show("blog_email_sign_up_ab_3");
                                        t.http.ajax_request( 'blog_modal_v3', 'post');
                                    } catch (e) {
                                        // console.log("Error with modal: blog_email_sign_up_ab_3", e);
                                    }
                                    
                                    try {
                                        t.modal.show("blog_email_sign_up_ab_4");
                                        t.http.ajax_request( 'blog_modal_v4', 'post');
                                    } catch (e) {
                                        // console.log("Error with modal: blog_email_sign_up_ab_3", e);
                                    }                                    

                                // }

                            // }

                        });
                    }
                }
            },
            unlock_premium: {
                
                init: function ( el, t ) {

                    var
                        premium_modal = ( typeof t.modal.ref['premium_data_found'] != "undefined" ) ? "premium_data_found" : "unlock_premium";

                    $(window).on('load', function() {

                        if ($('.premium_scroll').length > 0) {

                            // define an observer instance
                            var 
                                observer = new IntersectionObserver(onIntersection, {
                                    root: null,   // default is the viewport
                                    threshold: .5 // percentage of target's visible area. Triggers "onIntersection"
                                }),
                                modal_triggered = false;
                            
                            function timedModalTrigger() {
                                modal_triggered = true;
                                setTimeout(function () {

                                    t.modal.show( premium_modal );

                                    if ($("#premium_purchase")) {
                                        t.http.ajax_request( 'premium_purchase', 'post');
                                    }
                                    
                                }, 2000);
                            }
                            function onIntersection(entries){
                                if (entries[0].isIntersecting && !modal_triggered) {

                                    var lastScrollTop = 0;

                                    $(window).on('scroll', function() {

                                        var st = $(this).scrollTop();

                                        if(st < lastScrollTop && !modal_triggered) {

                                            timedModalTrigger();
                                            
                                        }
                                        
                                        lastScrollTop = st;
                                    });

                                }

                            }

                            setTimeout(function () {

                                if (!modal_triggered) {

                                    modal_triggered = true;
                                    t.modal.show( premium_modal );
                                    
                                }
                                
                            }, 57000)
                            
                            observer.observe( document.querySelector('.report-box.rb-summary') );

                        } else {

                            setTimeout(function () {

                                t.modal.show( premium_modal );
                                
                            }, 10000);

                        }
                        
                    });


                    var
                        $popup = $(el),
                        $f = {},
                        url,
                        checkout = function() {

                            t.fl( url );

                        },
                        form_submit = function() {
                            var
                                $this = $(this),
                                $selected = $f.saved_cards.find(".selected"),
                                paypal = $selected.hasClass("paypal"),
                                new_card = $selected.hasClass("add-new"),
                                plan = $f.form.data("plan"),
								plan_switch = $this.hasClass("switch-plan"),
								subscription_plan = ( plan == "premium_data_subscription" ),
								token;

                            if ( $popup.hasClass("loading") ) return;

							if ( plan_switch ) {

								$f.form.data("plan", subscription_plan ? "premium_data" : "premium_data_subscription" );
								$f.form.toggleClass( "onetime", subscription_plan );
								$this.find('p .content').html( subscription_plan ? "No, I want the subscription plan for <span class='amount'>$10.99/month</span>" : "I don't want unlimited access. I Just Want One report for <span class='amount'>$3.99</span>." );
								return;

							}

                            $popup.addClass("loading");

                            url = url + plan + "&payment_method=" + ( paypal ? "paypal" : ( new_card ? "new_card" : "card" ) );

                            if ( paypal || new_card ) checkout();
							else {

								token = $selected.data('token');
								t.http.request( url, 'post', { card_token: token }, 'json', function( response ) {

                                    response = JSON.parse( response );
                                    if ( response.status ) {

                                        t.modal.close('unlock_premium');
                                        t.modal.show('payment_completed');
                                        
                                        if (subscription_plan) {
                                            t.http.ajax_request( 'premium_purchase_complete_sub', 'post');
                                        } else {
                                            t.http.ajax_request( 'premium_purchase_complete_single', 'post');

                                        }
                                        setTimeout(function() {
                                            location.reload();
                                        }, 100);

                                    } else {

                                        $popup.removeClass("loading");
                                        $(t.v["modal.unlock_premium.loader"]).hide();
                                        $(t.v["modal.unlock_premium.error_msg"]).removeClass("hide");


                                    }

								} );

							}

                        };

                    $(el).extract_vars( $f );
                    url = $f.form.data("url");

                    $f.access.on( "click", form_submit );
                    $f.checkout.on( "click", form_submit );

                },
            },
            business_limited_tokens: {
                
                init: function ( el, t ) {

                    var
                        premium_modal =  "business_limited_tokens";
                    var
                        $popup = $(el),
                        $f = {},
                        url,
                        form_submit = function() {
                            var
                                $this = $(this),
                                $selected = $f.saved_cards.find(".selected"),
                                paypal = $selected.hasClass("paypal"),
                                new_card = $selected.hasClass("add-new"),
								plan_id = $($f.plan.find(".active")).data("plan-id"),
								token;

                            if ( $popup.hasClass("loading") ) return;
                            if ($(".scf-popup.limited_tokens .btn-pay").hasClass("deactivate")) return;

                            $popup.addClass("loading");
                            $(t.v["modal.business_limited_tokens.loader"]).show();

                            var payment_method =( paypal ? "paypal" : ( new_card ? "new_card" : "card" ) );
                            url = url  + "?id=" +plan_id
                            if ( paypal || new_card ) {  $(t.v["modal.business_limited_tokens.new_payment_method"]).submit();}
							else {

								token = $selected.data('token');     
                                t.http.ajax_request( 'token_purchase', 'post', { card_token: token ,payment_method:payment_method ,plan_id:plan_id}, function( response ) {

                                    response = JSON.parse( response );
                                     if ( response.status ) {

                                        t.modal.close('business_limited_tokens');
                                        t.modal.show('payment_completed');
                                        t.modal.payment_completed.start_timer("" );
                                        t.modal.payment_completed.start_timer( response.redirect_url );

                                     } else {
                                        $popup.removeClass("loading");
                                        $(t.v["modal.business_limited_tokens.loader"]).hide();
                                        $(t.v["modal.business_limited_tokens.error_msg"]).removeClass("hide");

                                     }

								} );

							}

                        };

                    $(el).extract_vars( $f );
                    url = $f.form.data("url");

                    $f.access.on( "click", form_submit );

                },
                plan_select: function( el, t){
                    $(el).on("click" , function(){
                        $(".select_plans .radio").removeClass("active");
                        $(el).addClass("active");
                        $(".scf-popup.limited_tokens .token_amount").text($(this).data("token-amount"));
                        let plan_type = $(".select_plans .monthly").hasClass("hide") ? "year" : "month";
                        $(t.v["modal.business_limited_tokens.price"]).text("$" +$(this).data("price") + " / " + plan_type );
                        if($(this).hasClass("activated")){
                            $(".scf-popup.limited_tokens .btn-pay").addClass("deactivate");
                        }else{
                            $(".scf-popup.limited_tokens .btn-pay").removeClass("deactivate");
                        }
                        $(t.v["modal.business_limited_tokens.hdn_selected_plan"]).val($(this).data("plan-id"));
                    });
                },
            },
            business_limited_tokens_update: {
                
                init: function ( el, t ) {

                    var
                        premium_modal =  "business_limited_tokens_update";
                    var
                        $popup = $(el),
                        $f = {},
                        url,
                        form_submit = function() {
                            var
                                $this = $(this),
                                $selected = $f.saved_cards.find(".selected"),
                                paypal = $selected.hasClass("paypal"),
                                new_card = $selected.hasClass("add-new"),
								plan_id = $($f.plan.find(".active")).data("plan-id"),
								token_amount = $($f.plan.find(".active")).data("token-amount"),
								token;

                            if ( $popup.hasClass("loading") ) return;
                            if ($(".scf-popup.business_limited_tokens_update .btn-pay").hasClass("deactivate")) return;

                            $popup.addClass("loading");
                            $(t.v["modal.business_limited_tokens_update.loader"]).show();

                            var payment_method =( paypal ? "paypal" : ( new_card ? "new_card" : "card" ) );
                            url = url  + "?id=" +plan_id
                            if ( paypal || new_card ) {  $(t.v["modal.business_limited_tokens_update.new_payment_method"]).submit();}
							else {

								token = $selected.data('token');     
                                t.http.ajax_request( 'token_purchase_downgrade', 'post', { card_token: token ,payment_method:payment_method ,plan_id:plan_id}, function( response ) {
                                    
                                    response = JSON.parse( response );
                                     if ( response.status ) {

                                        t.modal.close('business_limited_tokens_update');
                                        t.modal.show('payment_completed_new');
                                        // t.modal.show('payment_completed');
                                        $(t.v["payment_completed_new.token_amount"]).html(token_amount);
                                        // t.modal.payment_completed_new.start_timer("" );
                                        t.modal.payment_completed_new.start_timer( response.redirect_url );

                                     } else {
                                        $popup.removeClass("loading");
                                        $(t.v["modal.business_limited_tokens_update.loader"]).hide();
                                        $(t.v["modal.business_limited_tokens_update.error_msg"]).removeClass("hide");

                                     }

								} );

							}

                        };

                    $(el).extract_vars( $f );
                    url = $f.form.data("url");

                    $f.access.on( "click", form_submit );

                },
                plan_select: function( el, t){
                    $(el).on("click" , function(){
                        $(".select_plans .radio").removeClass("active");
                        $(el).addClass("active");
                        $(".scf-popup.limited_tokens .token_amount").text($(this).data("token-amount"));
                        let plan_type = $(".select_plans .monthly").hasClass("hide") ? "year" : "month";
                        $(t.v["modal.business_limited_tokens_update.price"]).text("$" +$(this).data("price") + " / " + plan_type );
                        if($(this).hasClass("activated")){
                            $(".scf-popup.limited_tokens .current_plan").removeClass("hide");
                            $(".scf-popup.business_limited_tokens_update .btn-pay").addClass("deactivate");
                        }else{
                            $(".scf-popup.limited_tokens .current_plan").addClass("hide");
                            $(".scf-popup.business_limited_tokens_update .btn-pay").removeClass("deactivate");
                        }

                        $(t.v["modal.business_limited_tokens_update.hdn_selected_plan"]).val($(this).data("plan-id"));
                    });
                },
                plan_type_select: function( el, t){
                    $(el).on("click" , function(){
                        var $this = $(this);
                        var current_tab = $this.data( "plan-type" );
                        
                        $(".lm_tab li").removeClass("active");
                        $this.addClass("active");
                        
                        if( current_tab == "monthly" ) {
                            $(".select_plans .monthly").show();
                            $(".select_plans .yearly").hide();
                        } else {
                            $(".select_plans .yearly").show();
                            $(".select_plans .monthly").hide();
                        }

                    });
                },
            },
			payment_completed: {
                start_timer: function( url ) {

                    this.url = url;
                    var
                        $f = {},
                        $this = this.$modal_obj,
                        seconds = 10,
                        timer = function() {

                            $f.timer.text( "00:" + seconds.toString().padStart( 2, "0" ) );
                            seconds--;

                            if ( seconds >= 0 ) {

                                setTimeout( timer, 1000 );

                            } else {

                                $this.addClass("loading");
                                scf.fl( url );

                            }

                        };

                    this.$modal_obj.extract_vars( $f );
                    timer();

                },
                close_override: function( el, t ) {

                    this.$modal_obj.addClass("loading");
                    t.fl( this.url );

                },
			},
			payment_completed_new: {
                start_timer: function( url ) {

                    this.url = url;
                    var
                        $f = {},
                        $this = this.$modal_obj,
                        seconds = 10,
                        timer = function() {

                            $f.timer.text( "00:" + seconds.toString().padStart( 2, "0" ) );
                            seconds--;

                            if ( seconds >= 0 ) {

                                setTimeout( timer, 1000 );

                            } else {

                                $this.addClass("loading");
                                scf.fl( url );

                            }

                        };

                    this.$modal_obj.extract_vars( $f );
                    timer();

                },
                close_override: function( el, t ) {

                    this.$modal_obj.addClass("loading");
                    scf.fl( this.url );

                },
			},
            ccpa_email_template: {
            	init: function ( el, t ) {

            		var $f = {};
            		
            		$(el).extract_vars( $f );
            		t.modal.show("ccpa_email_template");
            		
            		$f["btn"].on( "click", function() {

						var 
							range = document.createRange(),
							$this = $(this);
							
						range.selectNode( $f["text"].get(0) );
						window.getSelection().removeAllRanges();
						window.getSelection().addRange( range );
						document.execCommand("copy");
						window.getSelection().removeAllRanges();
						$this.text("Copied");
						setTimeout( function() {
						
							$this.text("Copy Text");
							
						}, 3000 );
            			
					} );
            		
				},					
			},
            about_to_leave: {
                go: function( el, t ) {

                    $(el).on( 'click', function() {

                        var current = t.modal.current( el );
                        t.onw( current.url );
                        t.modal.close( t.modal.parent( el ).data('name') );

                    } );

                },
                donotshow: function( el, t ) {

                    $(el).on( 'change', function() {

                        var modal = t.modal.parent( el ).data('name');
                        t.modal.ref[ modal ].disabled = true;
                        t.http.ajax_request( 'hide_verify_exit_page', 'post' );

                    } );

                },
            },
            deactivate_account: {
                go: function( el, t ) {

                    $(el).on( 'click', function() {

                        var current = t.modal.current( el );
                        t.fl( current.url );

                    } );

                }
            },
            delete_report: {
                go: function( el, t ) {

                    $(el).on( 'click', function() {

                        var current = t.modal.current( el );
                        t.fl( current.url );
                    } );

                }
            },
            image_view:{
                    pre_show:function( el, t ) {

                        var current = t.modal.current( el );
                        $(".scf-popup.image_view").css("display" , "flex")
                        $(".scf-popup.image_view img").attr("src",current.url);
                },
            },
            delete_mobile_app_push_notification: {
                go: function( el, t ) {

                    $(el).on( 'click', function() {

                        var current = t.modal.current( el );
                        t.fl( current.url );
                    } );

                }
            },
            add_new_report: {
                init: function( el, t, o ) {

                    o.$f = {};
                    o.$modal_obj.extract_vars( o.$f );

                    o.$f.submit.on( "click", function() {

                        var
                            $this = $(this),
                            post_data = {
                                "id": o.$f.query.data("id"),
                                "title": o.$f.report_title.val(),
                                "query": o.$f.query.val(),
                                "action": "put"
                            };

                        $this.loading( true );
                        scf.http.ajax_request( "data-dashboard-edit-report", "POST", post_data, function( response ) {

                            $this.loading();
                            if ( response.status ) {

                                if ( o.$refresh != null ) {

                                    var $tr = o.$refresh.parents("tr").find("td");
                                    $tr.eq(0).text( response.data.title );
                                    $tr.eq(3).text( response.data.updated );
                                    o.$modal_obj.hide();

                                } else {

                                    window.location.href = window.location.href;

                                }

                            } else {

                                alert("Invalid title or query");

                            }

                        } );

                    } );

                },
                load_report: function ( id ) {

                    var
                        $this = this,
                        $parent = $( scf.v['data_dashboard.admin'] ),
                        $f = $this.$f;

                    if ( id == 0 ) {

                        $f.popup_title.text("Create Report");
                        $f.report_title.val("");
                        $f.query.val("").data( "id", 0 );
                        $f.submit.text("Create");
                        $this.$modal_obj.show();

                    } else {

                        $parent.loading( true );
                        scf.http.ajax_request( "data-dashboard-edit-report", "POST", { "id": id, "action": "pull" }, function( report ) {

                            $f.popup_title.text("Edit Report");
                            $f.report_title.val( report.data.title );
                            $f.query.val( report.data.query ).data( "id", id );
                            $f.submit.text("Edit");
                            $parent.loading();
                            $this.$modal_obj.show();

                        } );

                    }

                }
            },
            refund_payment: {

                pre_show: function (el, t) {
                   
                    function submit_validation() {
                        if (validation_errors.length == 0 && $('#select_reason').val()) {
                            $('#refund-form-submit').removeClass("btn-dark-gray").addClass("btn-dark-blue");
                            $('#rule-check-message').removeClass("red").addClass("green");
                            $('#rule-check-message i').removeClass("si-close-circle").addClass("si-done-circle");
                        } else {
                            $('#refund-form-submit').removeClass("btn-dark-blue").addClass("btn-dark-gray");
                            $('#rule-check-message').removeClass("green").addClass("red");
                            $('#rule-check-message i').removeClass("si-done-circle").addClass("si-close-circle");
                        }
                        var val = $('#select_reason').val();
                        if(val != 9){
                            $('#rule-check-message').show();
                        }
                    };

                    var current = t.modal.current(el);
                    var validation_errors = ['select'];
                    $("#refund-amt").text(current.amount + "USD");
                    $("#refund-input-amt").val(current.amount);
                    $("#txn_id").val(current.txn);
                    $("#input_note").val('');
                    
                    $("#input_note").prop("required", false);
                    $("#select_reason").val('').change();
                    $('#select_reason').one('click', function () {
                    //$('#approved_by').find('option').remove().end().append('<option value="" disabled selected hidden>Please Choose...</option>');
                    $('#approved_by').empty();
                        t.http.ajax_request('get-managers', 'POST', {}, function (d) {
                            $('#approved_by')
                            .append($("<option></option>")
                                .attr("value", '')
                                .prop("selected", true)
                                .text('Select a manager'));
                            $.each(d.managers, function (key, value) {
                                $('#approved_by')
                                    .append($("<option></option>")
                                        .attr("value", value.id)
                                        .text(value.name));
                            });
                        });
                    });
                    $('#q1-div').on('click', '.q2-radio', function () {
                        validation_errors = validation_errors.filter(item => item !== 'q1-div')
                        submit_validation();
                    });
                    $('#approved_by').on('change', function () {
                        if ($(this).val()) {
                            validation_errors = validation_errors.filter(item => item !== 'approved-by-div')
                        } else {
                            validation_errors.push('approved-by-div');
                        }
                        submit_validation();
                    });
                    $('#input_note').keyup('change', function () {
                        if ($('#input_note').val() == '' && !validation_errors.includes('input_note')) {
                            validation_errors.push('input_note');

                        } else {
                            validation_errors = validation_errors.filter(item => item !== 'input_note')

                        }
                        submit_validation();

                    });
                    $('#q2-div input').keyup('change', function () {
                        if ($(this).val() == '' && !validation_errors.includes('q2-div')) {
                            validation_errors.push('q2-div');

                        } else {
                            validation_errors = validation_errors.filter(item => item !== 'q2-div')

                        }
                        submit_validation();
                    });
                    $("#support-div input").on('click', function () {

                        if ($("#support-div input").is(":checked")) {
                            validation_errors = validation_errors.filter(item => item !== 'support-div')

                        }
                        else {
                            if (!validation_errors.includes('support-div')) {
                                validation_errors.push("support-div");
                            }

                        }
                        submit_validation();
                    });
                    $('#refund-form-submit').on('click', function (e) {
                        e.preventDefault()

                        if (validation_errors.length == 0) {
                             $('#refund_form').submit();
                             $("#loader-overlay").show();
                             //t.modal.close('refund_payment');
                        }

                    });
                    $('#select_reason').off('change');
                    $("#select_reason").on('change', function () {
                        $('#rule-check-message').hide();
                        $('#q1-div').hide().find('input').prop('checked', false);;
                        $('#support-div').find('input').prop('checked', false);;
                        $('#q2-div').hide().find('input').val('');
                        $('#approved-by-div').hide();$('#approved_by').val('')
                        $('#input_note').val('').attr('placeholder','Add notes here (Optional) ');
                        $('#support-div').show();
                        validation_errors.length = 0;
                        var green_msg = false;

                        switch ($(this).val()) {
                            //Only wanted the 3-day trial
                            case '1':
                                t.http.ajax_request('refund-validation', 'POST', { 'rule_id': $(this).val(), 'user_id': current.user_id,'payment_id':current.txn }, function (d) { if (d.status == 1) { validation_errors.length = 0; } else { validation_errors.length = 0; validation_errors.push('error'); } submit_validation() });
                                $('#rule-check-message div span').text("The account must be unused after a 3-day trial period for an agent to select.");
                                $('#rule-check-message div strong').text("Rule Checked - ");

                                break;
                            case '2':
                                t.http.ajax_request('refund-validation', 'POST', { 'rule_id': $(this).val(), 'user_id': current.user_id,'payment_id':current.txn  }, function (d) { if (d.status == 1) { validation_errors.length = 0; } else { validation_errors.length = 0; validation_errors.push('error'); } submit_validation() });
                                $('#rule-check-message div span').text("Unused 3-day trial/Requesting refund one day after billing.");
                                $('#rule-check-message div strong').text("Rule Checked - ");

                                break;
                            case '3':
                                $('#rule-check-message div span').text("Notes are mandatory to process refund. Please complete below sections to proceed.");
                                $('#rule-check-message div strong').text("Rule Checked - ");
                                validation_errors.push('q1-div', 'support-div', 'input_note');
                                $('#input_note').attr('placeholder','Add notes here (Required*) ');
                                $('#q1-div').show();
                                submit_validation()
                                break;
                            case '4':
                                $('#rule-check-message div span').text("Notes are mandatory to process refund. Please complete below sections to proceed.");
                                $('#rule-check-message div strong').text("Rule Checked - ");
                                $('#input_note').attr('placeholder','Add notes here (Required*) ');
                                validation_errors.push('support-div','q2-div', 'input_note')
                                $('#q2-div').show();
                                submit_validation()
                                break;
                            case '5':
                                $('#rule-check-message div span').text("Manager approval required. Please complete below section to proceed.");
                                $('#rule-check-message div strong').text("Rule Checked - ");
                                validation_errors.push('support-div','approved-by-div', 'input_note');
                                $('#input_note').attr('placeholder','Add notes here (Required*) ');
                                $('#approved-by-div').show();
                                submit_validation()
                                break;
                            case '6':
                                $('#rule-check-message div span').text("Must specify the reason for the refund in the notes section down below.");
                                $('#rule-check-message div strong').text("Rule Checked - ");
                                validation_errors.push('support-div', 'input_note')
                                $('#input_note').attr('placeholder','Add notes here (Required*) ');
                                submit_validation()
                                break;
                            case '7':
                                $('#rule-check-message div span').text("Only approved QA/developers and managers can use this option for refund process.");
                                $('#rule-check-message div strong').text("Login Checked - ");
                                $('#support-div').hide();
                                validation_errors.length = 0;
                                submit_validation()
                                break;
                            case '8':
                                $('#rule-check-message div span').text("Only approved managers can use this option for refund process.");
                                $('#rule-check-message div strong').text("Login Checked - ");
                                validation_errors.push('input_note','support-div')
                                $('#input_note').attr('placeholder','Add notes here (Required*) ');
                                submit_validation()
                                break;
                            case '9':
                                validation_errors.length = 0;
                                $('#support-div').hide();
                                submit_validation()
                                $('#rule-check-message').hide();
                        }

                    });
                }
            },
            refund_history: {
                close: function( el, t ) {
                    $(el).on( 'click', function() {
                        $(".refund_history").hide();

                    //Remove the popup open again and again when reload. 
                    var queryParams = new URLSearchParams(window.location.search);
                    queryParams.set("user_query",'');
                    queryParams.set("id", '');
                    history.replaceState(null, null, "?"+queryParams.toString().replace("&user_query=", "").replace("&id=", ""));

                    } );
                }
                

            },
            user_note: {
                pre_show: function( el, t ) {

                    var current = t.modal.current( el );
                    $(".user_note_history").html( atob( current.note ) );
                    $(".user_note .user_note_count").text(current.notecount);

                }
            },
            cancel_save: {
                close: function( el, t ) {

                    $(el).on( "click", function(e) {
                
                        e.preventDefault();
                        t.modal.close( "cancel_save" );
                        t.modal.close( "cancel_ultimate" );

                
                    } );
                },
                pre_show: function( el, t ) {

                    var current = t.modal.current( el );
                    $( t.v['modal.cancel_save.plan'] ).text( current.title );
                    
                },
                go: function( el, t ) {
                    // csi-5092
                    $(el).on( 'click', function() {
                        $(this).addClass("loading");
                        var current = t.modal.current( el );
                        
                        var post_data ={
                            delete :  current.plan,
                            downgrade : 'cancel'
                        };
                        
                        //if ( typeof current.url != "undefined" && current.url ) t.fl( current.url );
                        if ($(".module-cancel-alt").length) {
                            setTimeout(function () {
                                //t.v['cancel_alt.form'].submit();
                                t.http.request( path.base_url + "dashboard.html?section=subscription", 'GET', post_data, 'json', function(response) {
                                    //window.location.href = path.base_url+'dashboard.html?section=profile';
                                    window.location.reload();
                               } );
                            }, 1000);
                        } else  {
                           //t.v['cancel_alt.form'].submit();
                           
                           t.http.request( path.base_url + "dashboard.html?section=subscription", 'GET', post_data, 'json', function(response) {
                                //window.location.href = path.base_url+'dashboard.html?section=profile';
                                window.location.reload();
                           } );
                        }
                    } );

                },
                go2: function( el, t ) {

                    $(el).on( 'click', function() {
                        var current = t.modal.current( el );
                        if ( typeof current.url != "undefined" && current.url ) t.fl( current.url );
                        else  t.modal.show( "associated_accounts_reminder" );                        
                    } );

                }
            },
            just_essentials: {
                pre_show: function( el, t ) {

                    var current = t.modal.current( el );
                    $(el).find("button").attr( "data-target", current.url );

                }
            },
            privacy_lock_only: {
                pre_show: function( el, t ) {

                    var current = t.modal.current( el );
                    $(el).find("button").attr( "data-target", current.url );

                }
            },
            switch_search: {
                pre_show: function( el, t ) {

                    var current = t.modal.current( el );
                    $(el).find("button").attr( "data-target", current.url );

                }
            },
            account_pause: {
                go: function( el, t ) {

                    $(el).on( "click", function() {
                         // baselines cancel CSI-5092
                        setTimeout(function () {

                            t.v['cancel_alt.pause_form'].submit();
                        }, 1000);

                    } );

                }
            },
            enjoy_new_plan: {
                close: function( el, t ) {

                    var modal = $(el).on( "click", function() {

                        var
                            $this = $(el),
                            type = $this.data("type"),
                            url = $this.data("url");

                        t.http.ajax_request( type, 'POST', {}, function() {

                            if ( url ) t.fl( url );

                        } );

                    } ).parents(".scf-popup").data("name");
                    t.modal.show( modal );

                },
                close_popup: function( el, t ) {

                    $(el).on( "click", function(e) {

                        e.preventDefault();
                        t.modal.close( "enjoy_missing_money" );

                        $.ajax({ url: path.relative_url + "ajax.html?cmd=unclaimed_popup", dataType : 'json', method:"post", data:"", success:function(d){

                        }});

                    } );

                },
            },
            account_pause_active: {
                init: function( el, t ) {

                    //t.modal.show( t.data( el, 'name') );

                }
            },
            secure_search: {
                init: function( el, t ) {

                    if (!localStorage.getItem("secure_search_2024_12_11")) {

                        t.modal.show( t.data( el, 'name') );

                    } else {

                        if ( t.is_mobile() ) {

                            $(".mb-verified-badge").fadeIn(500);

                        } else {

                            $(".verified-badge").fadeIn(500);

                        }
                    }

                },
                go: function( el, t, o ) {

                    $(".scf-popup.secure_search").on( "click", function() {

                        localStorage.setItem("secure_search_2024_12_11", "true");
                        o.close( t.data( o.parent( el )[0], 'name') );
                        o.secure_progress_runner.run( o.ref['secure_progress_runner'][0], t, o.secure_progress_runner );

                    } );

                },
            },
            secure_progress_runner: {
                data: [
                    { text: "Validating Request", percentage: 18, speed: 30 },
                    { text: "Checking Parameters", percentage: 34, speed: 30 },
                    { text: "Verifying Connection Security", percentage: 50, speed: 30 },
                    { text: "Accessing Databases", percentage: 68, speed: 50 },
                    { text: "Confirming Secure Access", percentage: 74, speed: 30 },
                    { text: "Success! Access Updated", percentage: 100, speed: 30 },
                ],
                run: function( el, t, o ) {

                    var
                        modal_name = t.data( el, 'name'),
                        $f = {};

                    $(el).extract_vars( $f );

                    t.modal.show( modal_name );
                    t.progress_runner.start( o.data, null, function( data, status ) {

                        $f.progress_value.text( status.percentage + "%" );
                        $f.progress_bar.css( { "width": status.percentage + "%" } );

                    }, function( data ) {

                        $f.progress_text.text( data.text );

                    }, function() {

                        t.modal.close( modal_name );
                        if ( t.is_mobile() ) {

                            $(".mb-verified-badge").fadeIn(500).fadeOut(500).fadeIn(500).fadeOut(500).fadeIn(500);

                        } else {

                            $(".verified-badge").fadeIn(500).fadeOut(500).fadeIn(500).fadeOut(500).fadeIn(500);

                        }

                    } );

                }
            },
            premium_data_found: {
                init: function( el, t ) {

                    var
                        premium_modal = ( typeof t.modal.ref['premium_data_found'] != "undefined" ) ? "premium_data_found" : "unlock_premium";

                    $(window).on('load', function() {

                        if ($('.premium_scroll').length > 0) {

                            // define an observer instance
                            var 
                                observer = new IntersectionObserver(onIntersection, {
                                    root: null,   // default is the viewport
                                    threshold: .5 // percentage of target's visible area. Triggers "onIntersection"
                                }),
                                modal_triggered = false;
                            
                            function timedModalTrigger() {
                                modal_triggered = true;
                                setTimeout(function () {

                                    t.modal.show( premium_modal );

                                    if ($("#premium_purchase")) {
                                        t.http.ajax_request( 'premium_purchase', 'post');
                                    }
                                    
                                }, 2000);
                            }
                            function onIntersection(entries){
                                if (entries[0].isIntersecting && !modal_triggered) {

                                    var lastScrollTop = 0;

                                    $(window).on('scroll', function() {

                                        var st = $(this).scrollTop();

                                        if(st < lastScrollTop && !modal_triggered) {

                                            timedModalTrigger();
                                            
                                        }
                                        
                                        lastScrollTop = st;
                                    });

                                }

                            }

                            setTimeout(function () {

                                if (!modal_triggered) {

                                    modal_triggered = true;
                                    t.modal.show( premium_modal );
                                    
                                }
                                
                            }, 57000)
                            
                            observer.observe( document.querySelector('.report-box.rb-summary') );

                        } else {

                            setTimeout(function () {

                                t.modal.show( premium_modal );
                                
                            }, 10000);

                        }
                        
                    });



                }

            },
            phil_upgrade: {
                init: function( el, t, o ) {

                    t.modal.show( 'phil_upgrade' );

                }
            },
            secure_recaptcha: {
                init: function( el, t ) {


                    var type = $(el).data("type");
                    var page = $(el).data("page");
                    t.google.recaptcha.render( el, t, 'g-recaptcha-ss-ris', function( value ) {

                        t.v['google.recaptcha.key'] = value;
                        t.modal.close('secure_recaptcha');
                        if(t.v['google.recaptcha.checkout']){
                            $("#user_checkout_btn").click();
                        }
                        if(page=='search_progress'){
                          
                         //   get_search_count_recursive(t);
                          
                        }else{
                        $(t.v['search.go']).click();
                        if( t.v['google.recaptcha.cr']){
                            $("#cr_search_btn").click();
                        }
                    }
                    } );

                    ( type.indexOf('ss') != -1 ) && ( t.v['google.recaptcha.ss'] = true );
                    ( type.indexOf('ris') != -1 ) && ( t.v['google.recaptcha.ris'] = true );
                    ( type.indexOf('cr') != -1 ) && ( t.v['google.recaptcha.cr'] = true );
                },
            },
            feedback: {
                icons: function( el, t ) {

                    $(el).find("img").on( "click", function() {


                        t.v['modal.feedback.input'].value = $(this).siblings().removeClass("active").end().addClass("active").attr("alt");
                        t.modal.ref['newdesign_feedback'].addClass("p");
                        //$(".re_feedback_form").show();
                        $(".re_feedback_form").addClass("active");

                    } );

                },
            },
            privacy_lock_feedback: {
                icons: function( el, t ) {

                    $(el).find("img").on( "click", function() {

                        t.v['modal.feedback.input'].value = $(this).siblings().removeClass("active").end().addClass("active").attr("alt");
                        t.modal.ref['privacy_lock_feedback'].addClass("selected");
                        $(this).parent().parent().find(".submit-div").addClass("active");
                    } );

                },
                submit: function( el, t ) {
                    $(el).on( "submit", function() {
                        t.modal.ref['privacy_lock_feedback'].find(".feedback_section").hide();
                        t.modal.ref['privacy_lock_feedback'].find(".thankyou_section").show();
                        t.http.ajax_request( 'privacy_lock_feedback', 'post', $(this).serialize(), function( response ) {
                           $(".privacy-lock-feedback-btn").hide();
                        });
                       return false;
                    } );

                },
            },
            payment_failed: {
                init: function( el, t ) {

                    t.modal.show( 'payment_failed' );

                },
            },
            signup_form: {
                other: function( el, t, o ) {

                    $(el).on( "change", function() {

                        var checked = $(this).is(":checked");
                        $( t.v['modal.signup_form.text'] ).toggle( checked );

                    } );

                }
            },
            existing_user_login: {
                close: function( el, t ) {

                    $(el).on( "click", function() {

                        $(".existing_user_login").hide();

                    } );

                },
            },
            orbitly_leave: {
                go: function( el, t, o ) {

                    $(el).on( "click", function() {

                        t.onw( t.data( el, 'url' ) );
                        t.modal.close( t.modal.parent( el ).data('name') );

                    } );

                },
            },
            new_look: {
                close: function( el, t ) {

                    var modal = $(el).on( "click", function() {

                        t.http.ajax_request( 'new_look', 'post' );

                    } ).closest(".scf-popup").data("name");
                    t.modal.show( modal );

                },
            },
            switch_classic: {
                close: function( el, t ) {

                    $(el).on( "click", function() {

                        $(t.v['menu.switch_view']).siblings("input").removeProp("checked");

                    } );

                },
            },
            ris_boost_upgrade: {
                init: function( el, t ) {

                    setTimeout( function() {

                        t.modal.show( 'ris_boost_upgrade' );

                    }, 3000 );

                },
            },
            ris_free_boost: {
                init: function( el, t ) {

                    t.modal.show( 'ris_free_boost' );

                },
            },
            criminal_records_popup: {
                go: function( el, t, o ) {

                    $(el).on( "click", function() {

                        t.onw( t.data( el, 'url' ) );
                        t.modal.close( t.modal.parent( el ).data('name') );

                    } );
                },
                onclick_close: function( el, t ) {

                    $(el).on( 'click', function() {
                        t.http.ajax_request( 'reset_cr_search', 'post', function( response ) {

                        } )
                        var name = t.modal.parent( el ).data('name');
                        t.modal.close( name );

                    } );

                },
                do_not_show: function( el, t ) {
                    $(el).on( 'change', function() {
                        t.http.ajax_request( 'criminal_rec_donot_show', 'post', { value: $(el).find("input").is(':checked') });
                    });
                },
            },
            flagged_user_agree: {

                init: function( el, t ) {

                    var $error;

                    $(el).on( "click", function() {

                        var tos_agree = $( ".scf-popup.flagged_user .tos_agree" ).prop('checked');

                        if( tos_agree ) {

                            t.http.ajax_request( 'agree_restrictions', 'post' );
                            t.modal.close( 'flagged_user' );

                        } else {

                            if ( $error ) $error.remove();
                            $error = t.create.notification('error', 'Please accept the Terms of Service.')
                            $( this ).before( $error );
                            return;

                        }

                    });

                }

            },
            criminal_records_sale: {
                init: function( el, t ) {

                    t.modal.show( 'criminal_records_sale' );

                },
                submit: function( el, t ) {

                    $(el).on( "click", function() {

                        t.modal.close( 'criminal_records_sale' );
                        t.modal.show( 'criminal_records_search_sale' );

                        $(".criminal_records_sale .cr-selection").hide();

                        var form_data = $(this).parent().serialize();

                        t.modal.criminal_records_sale.reset( t );

                        t.progress_runner.start( t.modal.criminal_records_sale.data, function( status ) {

                            t.http.ajax_request( 'criminal_record_search', 'post', form_data, function( response ) {

                                if ( typeof response.token != "undefined" && response.token ) {

                                    t.modal.criminal_records_sale.data[6].text = "ALERT! - " + response.count + " Criminal Records Found";
                                    t.modal.criminal_records_sale.el.token = response.token;
                                    t.modal.criminal_records_sale.el.sub = response.sub;


                                } else {

                                    t.modal.criminal_records_sale.data[6].text = "0 Criminal Records Found";
                                    status.rush = true;

                                }

                                t.modal.criminal_records_sale.el.cr_number.innerText = response.count;


                            } );


                        }, function( data, status ) {

                            var el = t.modal.criminal_records_sale.el;

                            el.progress_value.innerText = ( status.percentage ) + '%';
                            el.$progress_bar.css( { width: status.percentage + '%' } );

                        }, function( data, status ) {

                            var el = t.modal.criminal_records_sale.el;

                            $( el.progress_text ).text( data.text + '...' ).parent().toggleClass( 'found-alert', ( typeof data.alert != "undefined" ) );
                            el.foot.innerHTML = data.foot;
                            if ( typeof data.activate != "undefined" ) $( el.$progress_steps ).eq(data.activate).addClass("active");

                        }, function( data, status ) {

                            t.modal.close('criminal_records_search_sale');
                            if ( typeof t.modal.criminal_records_sale.el.token == "undefined" ) {

                                t.modal.show('criminal_records_none');

                            } else {

                                t.modal.show('criminal_records_results');

                            }

                        } );

                    } );

                },
                onclick_close: function( el, t ) {

                    $(el).on( 'click', function() {
                        
                        t.http.ajax_request( 'reset_cr_search', 'post', function( response ) {

                        } )
                        var name = t.modal.parent( el ).data('name');
                        t.modal.close( name );

                    } );

                },
                proceed_close_y: function(el, t) {
                    $(el).on( 'click', function() {

                        $(".scf-checkout .cr-included-y").show();
                        $(".scf-checkout .cr-included-y").scrollTo(-400);
                        $(".scf-checkout .cr-included-y").fadeOut(700).fadeIn(700).fadeOut(700).fadeIn(700).fadeOut(700).fadeIn(700);

                    } );
                },
                proceed_close_n: function(el, t) {
                    $(el).on( 'click', function() {

                        $(".scf-checkout .cr-included-n").show();
                        $(".scf-checkout .cr-included-n").scrollTo(-400);
                        $(".scf-checkout .cr-included-n").fadeOut(700).fadeIn(700).fadeOut(700).fadeIn(700).fadeOut(700).fadeIn(700);

                    } );
                },
                data: [
                    { text: "Starting Search", foot: "", speed: 100, percentage: 25 },
                    { text: "Search Federal Criminal Records", foot: "Thank you for your patience.", speed: 200, percentage: 35, activate: 0 },
                    { text: "Search State Criminal Records", foot: "Searching through millions of public criminal records", speed: 200, percentage: 50, activate: 1 },
                    { text: "Search County Criminal Records", foot: "Making sure we search through all the available records", speed: 300, percentage: 65, activate: 2 },
                    { text: "Search City Criminal Records", foot: "Almost there!", speed: 200, percentage: 75, activate: 3 },
                    { text: "Search Premium Data Sources", foot: "Organizing results now", speed: 400, percentage: 90, activate: 4 },
                    { text: "0 Criminal Records Found", foot: "", speed: 400, percentage: 100, alert: true },
                ],
                reset: function( t ) {

                    this.el = {
                        foot: t.v["criminal_records_sale.foot"],
                        name: t.v["criminal_records_sale.name"],
                        progress_text: t.v["criminal_records_sale.progress_text"],
                        cr_number: t.v["criminal_records_sale.cr_number"],
                        progress_value: t.v["criminal_records_sale.progress_value"],
                        $progress_bar: $( t.v["criminal_records_sale.progress_bar"] ),
                        $progress_steps: $( t.v['criminal_records_sale.progress_steps'] ).find("li"),
                    };

                    this.data[0].foot = "Possible Criminal Record for <span>" + this.el.name.value + "</span>";
                    this.data[6].foot = "Could be associated with <span>" + this.el.name.value + "</span>";
                    this.el.progress_text.innerText = '';
                    this.el.progress_value.innerText = '0%';
                    this.el.$progress_bar.css( { width: '0%' } );
                    this.el.$progress_steps.removeClass("active");
                    this.el.foot.innerText = '';
                    this.el.cr_number.innerText = '';

                }
            },
            walkthroughs: {
                init: function( el, t, o ) {

                    setTimeout( function() {

                        $(".scf-need-help").show( 'slide', { direction: 'left' }, 500 );

                    }, 2000 );

                    o.walkthroughs.pause_all();

                },
				show: function( el, t, o ) {

					$(el).on( 'click', function() {

						var $this = $(this),
						    search_type = $this.data( "id" ),
							modal_cta = $( ".scf-popup.scf_walkthroughs_cta" ),
							modal = $( ".scf-popup.scf_walkthroughs." + search_type );

							modal_cta.hide();
							modal.show();

                            o.walkthroughs.auto_play( el, t, search_type );

					} );
				},
				push_slides: function( el, t, o ) {

					var $this = $(el);

					$this.on( "click", function() {

                        o.walkthroughs.pause_all();

						var active_slide = $this.closest( ".slideshow-container" ).find( ".dot.active" ).data( "item" ),
							slide = t.data( this, 'slide' ),
							move_slide = active_slide,
							search_type = t.data( this, 'type' ),
							modal = ".scf_walkthroughs." + search_type + " .walkthrough-section.active",
							list_length = $( modal + " .walkthrough-list ul li").length,
                            slide_length = $( modal + " .slider-action .dot").length;


							if( slide == "prev" ) {

								move_slide -= 1;

							} else {

								move_slide += 1;

							}

                            $( modal + " .walkthrough-list ul li:nth-child(" + ( move_slide - 1 ) + ")" ).addClass( "active" );
							$( modal + " .walkthrough-list ul li:nth-child(" + move_slide + ")" ).removeClass( "default" );
							$( modal + " .walkthrough-list ul li" ).removeClass( "playing" );

							$( modal + " .walkthrough-list ul li:nth-child(" + move_slide + ")" ).addClass( "playing" );

							if( slide_length <= move_slide ) $( modal + " .walkthrough-slides .next").hide(); //hide left arrow for first slide
                            else $( modal + " .walkthrough-slides .next").show();

                            if( move_slide < 2 ) $( modal + " .walkthrough-slides .prev").hide(); //hide right arrow for last slide
                            else $( modal + " .walkthrough-slides .prev").show();

                            if ( $( modal + " .walkthrough-list ul li:last" ).hasClass( "playing" ) ) { //add active icon for last list when playing
                                $( modal + " .walkthrough-list ul li:last" ).addClass( "active" );
                            }

						t.scf_slider.show_slides( el, t, move_slide );
                        o.walkthroughs.auto_play( el, t, search_type );

					});

				},
				step_action: function( el, t, o ) {

                    $(el).on( 'click', function() {

                        o.walkthroughs.pause_all();

                        var $this = $(this),
                            action = $this.data( 'id' ),
                            search_type = $this.data( 'type' ),
                            modal_main = ".scf_walkthroughs." + search_type,
                            modal_name = $( modal_main ).data( 'name' ),
                            current_step = $(this).parent().attr( 'data-step' ),
                            step_length = $( modal_main + " .walkthrough-status ul li").length,
                            ac = 1;

                            if ( ( current_step == "1" && action == "back" ) || ( current_step == step_length && action == "next" ) ) {
                                t.modal.close( modal_name );
                                if ( window.location.href.indexOf( "walkthrough" ) == -1 ) {
                                    t.modal.show( "scf_walkthroughs_cta" );
                                }
                            }

                            if ( action == "next" ) current_step++;
                            else current_step -= 1;

                            $( modal_main + " .walkthrough-status ul li" ).removeClass( "active" );
                            for( ac; ac <= current_step; ac++ ) {
                                $( modal_main + " .walkthrough-status ul li:nth-child(" + ac + ")" ).addClass( "active" ); //active steps
                            }

                            if ( current_step <= 1 ) { //If first step
                                current_step = 1;
                                $( modal_main + " .walkthrough-action .action1 i" ).hide();
                                $( modal_main + " .walkthrough-action .action1 span.action-btn" ).hide();
                                $( modal_main + " .walkthrough-action .action1 .text" ).text( "Skip this demo" );
                            }

                            if ( step_length <= current_step ) { //If final step
                                current_step = step_length; //current step value is fixed
                                $( modal_main + " .walkthrough-action .action2 span.action-btn" ).text( "Main Menu" );
                            }

                            $( modal_main + " .walkthrough-section" ).removeClass( "active" );
                            $( modal_main + " .id-step" + current_step + ".walkthrough-section" ).addClass( "active" );


                            var prev_text = $( modal_main + " .walkthrough-status ul li:nth-child(" + parseInt( current_step - 1 ) + ")" ).attr( "data-value" );
                            var next_text = $( modal_main + " .walkthrough-status ul li:nth-child(" + parseInt( current_step + 1 ) + ")" ).attr( "data-value" );

                            if ( current_step >= 1 ) {
                                $( modal_main + " .walkthrough-action .action1 i" ).show();
                                $( modal_main + " .walkthrough-action .action1 span.action-btn" ).show();
                                $( modal_main + " .walkthrough-action .action1 .text" ).text( "Back" );
                                $( modal_main + " .walkthrough-action .action1 span.action-btn" ).text( prev_text );
                                $( modal_main + " .walkthrough-action .action2 span.action-btn" ).text( next_text );
                            }

                            $this.parent().attr( 'data-step', current_step );
                            o.walkthroughs.auto_play( el, t, search_type );

                    });

                },
                pause_all: function() {

                    $( "video" ).each( function() {

                        $( this ).get(0).pause();
                        $( this ).get(0).currentTime = 0;

                    } );

                },
                auto_play: function( el, t, search_type ) {

                    var $this = $(el),
                        next = ".scf_walkthroughs." + search_type + " .walkthrough-section.active .next",
                        list = ".scf_walkthroughs." + search_type + " .walkthrough-section.active .walkthrough-list ul li.active",
                        video_elm = ".scf_walkthroughs." + search_type + " .walkthrough-section.active .slide-item.active_item video";

                    if ( $( video_elm ).length ) {

                        $( video_elm )[0].play();

                        $( video_elm ).on('ended',function() {

                            //o.push_slides( el, t, o );
                            if( $( next ).is( ":visible" ) ){
                                $( next ).trigger( "click" );
                                //$( list + ":nth-child(" + ( move_slide - 1 ) + ")" ).addClass( "playing" );
                            } else {
                                $( list ).removeClass( "playing" );
                            }

                        });

                    }

                },
                close_phil: function( el, t, o ) {

                    $(el).on( 'click', function() {

                        t.http.ajax_request( 'close_phil_walkthrough', 'post' );
                        $(".scf-need-help").hide( 'slide', { direction: 'left' }, 1000 );

                    });

                }
		    },
            rating_report: {
                click: function( el, t ) {

                    $(el).on( 'click', function() {
                        $(el).siblings(".active").removeClass("active");
                        $(el).addClass("active");
                        //$(".re_feedback_form").show();
                        $(".re_feedback_form").addClass("active");
                    });

                },
                feedback: function( el, t ) {
                    var $modal = $(el).closest(".scf-popup");
                    $(el).on( 'click', function() {

                        $(this).attr("disabled","disabled");
                        $(this).addClass("loading");
                        
                        if( $( this ).hasClass( "intermediate" ) ) {
                            
                            var post_data ={
                                rating :  $(".rate-list .active").html(),
                                report_id : 0,
                                report_type : $("#report_type").text(),
                                action : "insert",
                                feedback : $("#feedback_text").val(),
                                report_source : $modal.data("source"),
                                report_url : window.location.href,
                            };
                            t.http.request( path.base_url+'customer_feedback.html', 'POST', post_data, 'json', function( response ) {
    
                            });
                            t.modal.close( "rating_report_intermediate" );
                            $(this).removeClass("loading");
                            $(this).removeAttr('disabled');
                            $("#feedback_text").val("");
                            $(".ris-int-feedback").hide();
                            t.modal.show("rating_success");
                        } else {
                            var post_data ={
                                rating :  $(".rate-list .active").html(),
                                report_id : $("#report_id").text(),
                                report_type : $("#report_type").text(),
                                action : "insert",
                                feedback : $("#feedback_text").val(),
                                report_source : $modal.data("source"),
                                report_url : window.location.href,
                            };
                            t.http.request( path.base_url+'customer_feedback.html', 'POST', post_data, 'json', function( response ) {
    
                            } );
                            t.modal.close( "rating_report" );
                            t.modal.show("rating_success");
                            $(".rate_btn").hide();
                            if(((parseInt($(".rate-list .active").html())) < 4)){
                                $(t.v["modal.quick_assistance"]).show();
                            }
                        }

                    });

                },

            },
            cancel_privacy_lock: {
                go: function( el, t, o ) {

                    $(el).on( "click", function() {

                        t.onw( t.data( el, 'url' ) );
                        t.modal.close( t.modal.parent( el ).data('name') );

                    } );
                }
            },
            privacy_lock_need_active_account: {
                go: function( el, t, o ) {

                    t.modal.show( 'privacy_lock_need_active_account' );
                }
            },
            adblocker: {
                show: function (el, t) {
                    // Check if the popup has been shown before using local storage
                    function detectAdblock(callback) {
                        fetch('https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js', {
                            method: 'HEAD',
                            mode: 'no-cors',
                        }).then((response) => {
                            // If the request is redirected, then the ads are blocked.
                            callback(response.redirected);
                        }).catch(() => {
                            // If the request fails completely although connected to the internet, 
                            // then the ads are blocked.
                            callback(window.navigator.onLine);
                        });
                    }
                    
                    function showAdblockerPopup() {
                        // Check if the popup has been shown before using local storage
                        var popupShown = localStorage.getItem('adblockerModal');
                        if (!popupShown) {
                            // Show the popup
                            document.querySelector('.disable_ad_blocker').style.display = 'block';
                            // Mark the popup as shown
                            localStorage.setItem('adblockerModal', 'true');
                        }
                    }
                    
                    // Detect adblocker and show popup if detected
                    detectAdblock((isAdblockerDetected) => {
                        if (isAdblockerDetected) {
                            console.log('AdBlocker detected');
                            showAdblockerPopup();
                        } else {
                            console.log('No AdBlocker detected');
                            document.querySelector('.disable_ad_blocker').style.display = 'none';
                        }
                    });
                    
                }
            },
            users_blocked: {
                show: function (el, t) {
                    $(el).on("mousedown", function(e) {
                        e.preventDefault();

                        if(t.modal.resend_link_sent) {
                            t.modal.show( "blocked_user_verification_sent" );
                        } else {
                            t.modal.show( "blocked_user_verification" );
                        }
                    });
                }
            },
            upgrade_privacy_lock: {
                init: function( el, t ) {

                    setTimeout( function() {

                        t.modal.show( 'upgrade_privacy_lock' );

                    }, 2000 );

                }

            },
            free_privacy_lock_old_users: {
                init: function( el, t ) {

                    setTimeout( function() {

                        t.modal.show( 'free_privacy_lock_old_users' );

                    }, 2000 );

                },
                go: function( el, t, o ) {

                    $(el).on( "click", function() {

                        t.http.ajax_request( 'privacy_lock', 'get', { v: 2 }, function( response ) {
                            t.fl( path.base_url + 'dashboard.html?section=privacy_lock_report' );
                        } )
                        t.modal.close( t.modal.parent( el ).data('name') );

                    } );
                },
                donotshow: function( el, t ) {

                    $(el).on( "click", function() {

                        t.http.ajax_request( 'privacy_lock', 'get', { v: 1 }, function( response ) {} )
                        t.modal.close( t.modal.parent( el ).data('name') );

                    } );

                }

            },
            email_verify: {
                show: function( el, t, o ) {
                    $(el).on( "click", function() {
                        t.modal.show( 'email_verify' );
                    } );
                },
                go: function( el, t, o ) {
                    $(el).on( "click", function() {

                        t.onw( t.data( el, 'url' ) );
                        t.modal.close( t.modal.parent( el ).data('name') );

                    } );
                },
                resend_link_sent: false,
                resend_link: function( el, t, o ) {
                    $(el).on( "click", function() {
                        t.http.ajax_request( 'resend_link', 'get', { v: 1 }, function( response ) {
                            if(response.status){
                                $(el).html("Link Sent");
                                $(el).attr("disabled","disabled");
                            }
                        } )
                        t.modal.close("blocked_user_verification");
                        t.modal.show( "blocked_user_verification_sent" );

                        t.modal.resend_link_sent = true;
                    } );
                },
            },
            screenshot_detected: function( el, t, o ) {

                $(el).on( 'click', function() {

                    t.modal.show( "how_to_crop_ris" );

                });

            },
            hide_screenshot_detected: function( el, t, o ) {

                $(el).on( 'click', function() {

                    var $this = $(this);

                    if( $this.is( ":checked" ) ) {

                        t.http.ajax_request( 'ris_crop_popup', 'post', { id: 1 }, function() {} );

                    } else {

                        t.http.ajax_request( 'ris_crop_popup', 'post', { id: 0 }, function() {} );

                    }

                });

            },
            faq_email_search_redirect:{
                
                show:function(el,t,o){
                        $(el).on( 'click', function(e) {
                            var re =/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/;
                            if(re.test($("input[name=search]").val())){
                                e.preventDefault();
                                t.modal.show( "faq_email_search_redirect" );
                            }
                        });
                },
                go:function(el,t,o){
                    $(el).on('click',function(){
                        let redirectUrl = $(el).data("url")+"?email="+$("input[name=search]").val();
                        $(location).attr('href', redirectUrl);
                    });
                }
            },
            mobile_app_push_notification:{
                
                content:function(el, t, o){
                $(el).on('keyup',function(){
                    $("#lblCaractorcount").text($(this).val().length);
                });
                },

                toggle:function(el, t, o){
                    $(el).on('change',function(){
                        
                        if($(this).is(':checked')){
                            $(".divNotificationSendto input[name='token']").prop("disabled" ,true)
                        }else{
                            $(".divNotificationSendto input[name='token']").prop("disabled" ,false)
                        }
                    });
                },
                frequency:function(el, t, o){
                    $(el).on('change',function(){

                        let $startdate = $(".scf-popup.mobile_app_push_notification .divcol3 input[name=startdate]");
                        let $publishtime = $(".scf-popup.mobile_app_push_notification .divcol3 input[name=publishtime]");
                        let $enddate = $(".scf-popup.mobile_app_push_notification .divcol3 input[name=enddate]");
                        let $weekdays = $(".scf-popup.mobile_app_push_notification .divcol3 select[name=weekdays]");
                        let $days = $(".scf-popup.mobile_app_push_notification .divcol3 select[name=days]");
                        let $months = $(".scf-popup.mobile_app_push_notification .divcol3 select[name=months]");
                        
                        if($(this).val() === "Instant" || $(this).val() === ""){
                            $(".scf-popup.mobile_app_push_notification .divcol3").hide();
                            $startdate.attr("required" ,false);
                            $publishtime.attr("required" ,false);
                            $enddate.attr("required" ,false);
                            $weekdays.attr("required" ,false);
                            $days.attr("required" ,false);
                            $months.attr("required" ,false);
                            
                            $startdate.parent().hide();
                            $publishtime.parent().hide();
                            $enddate.parent().hide();
                            $weekdays.parent().hide();
                            $days.parent().hide();
                            $months.parent().hide();


                        }else if ($(this).val() === "Once (Scheduled)"){
                            $(".scf-popup.mobile_app_push_notification .divcol3").css("display","grid");
                            $startdate.attr("required" ,true);
                            $publishtime.attr("required" ,true);
                            $enddate.attr("required" ,false);
                            $weekdays.attr("required" ,false);
                            $days.attr("required" ,false);
                            $months.attr("required" ,false);

                            $startdate.parent().show();
                            $publishtime.parent().show();
                            $enddate.parent().hide();
                            $weekdays.parent().hide();
                            $days.parent().hide();
                            $months.parent().hide();
                        }
                        else if ($(this).val() === "Daily"){
                            $(".scf-popup.mobile_app_push_notification .divcol3").css("display","grid");
                            $startdate.attr("required" ,true);
                            $publishtime.attr("required" ,true);
                            $enddate.attr("required" ,true);
                            $weekdays.attr("required" ,false);
                            $days.attr("required" ,false);
                            $months.attr("required" ,false);

                            $startdate.parent().show();
                            $publishtime.parent().show();
                            $enddate.parent().show();
                            $weekdays.parent().hide();
                            $days.parent().hide();
                            $months.parent().hide();
                        }
                        else if ($(this).val() === "Weekly"){
                            $(".scf-popup.mobile_app_push_notification .divcol3").css("display","grid");
                            $startdate.attr("required" ,true);
                            $publishtime.attr("required" ,true);
                            $enddate.attr("required" ,true);
                            $weekdays.attr("required" ,true);
                            $days.attr("required" ,false);
                            $months.attr("required" ,false);
                            
                            $startdate.parent().show();
                            $publishtime.parent().show();
                            $enddate.parent().show();
                            $weekdays.parent().show();
                            $days.parent().hide();
                            $months.parent().hide();
                        }
                        else if ($(this).val() === "Monthly"){
                            $(".scf-popup.mobile_app_push_notification .divcol3").css("display","grid");
                            $startdate.attr("required" ,true);
                            $publishtime.attr("required" ,true);
                            $enddate.attr("required" ,true);
                            $weekdays.attr("required" ,false);
                            $days.attr("required" ,true);
                            $months.attr("required" ,false);
                            
                            $startdate.parent().show();
                            $publishtime.parent().show();
                            $enddate.parent().show();
                            $weekdays.parent().hide();
                            $days.parent().show();
                            $months.parent().hide();
                        }
                        else if ($(this).val() === "Yearly"){
                            $(".scf-popup.mobile_app_push_notification .divcol3").css("display","grid");
                            $startdate.attr("required" ,true);
                            $publishtime.attr("required" ,true);
                            $enddate.attr("required" ,true);
                            $weekdays.attr("required" ,false);
                            $days.attr("required" ,true);
                            $months.attr("required" ,true);
                            
                            $startdate.parent().show();
                            $publishtime.parent().show();
                            $enddate.parent().show();
                            $weekdays.parent().hide();
                            $days.parent().show();
                            $months.parent().show();
                        }
                    });
                },
            },

            nps: {
                click: function( el, t ) {

                    $(el).on( 'click', function() {
                        $(el).siblings(".active").removeClass("active");
                        $(el).addClass("active");
                        //$(".re_feedback_form").show();
                        $(".re_feedback_form").addClass("active");
                    });

                },
                feedback: function( el, t ) {
                    var $modal = $(el).closest(".scf-popup");
                    $(el).on( 'click', function() {

                        var rate_val = $(".rate-list .active").html();
                        var post_data ={
                            rating :  $(".rate-list .active").html(),                          
                            action : "insert_nps",
                            feedback : $("#feedback_text").val(),                            
                        };
                        var old_rating = $( this ).data( "old" );

                        t.http.request( path.base_url+'customer_feedback.html', 'POST', post_data, 'json', function( response ) {
                            
                        } );

                        if( old_rating == 1 ) rate_val = 7;

                        if( rate_val < 8 ) {
                            $('.nps-success').show();
                            $('.nps-feedback').hide();
                            $( ".newdesign_feedback .success-msg" ).addClass( "initial" );
                            setTimeout(function() {
                               t.modal.close( "nps" );
                               $("#redesign_feedback").hide();
                            }, 2000);
                        } else {
                            $(".nps-feedback .rate-filters, .nps-feedback p, .nps-feedback #feedback_text, .nps-feedback .fb_ask_default").hide();
                            $(".nps-feedback .re_feedback_form").addClass("hide_border");
                            $(".nps-feedback .pf_yes, .nps-feedback .pf_no, .nps-feedback .fb_ask_help").show();
                            $(this).hide();
                        }                      
                        
                       
                    });

                },
                close: function( el, t ) {
                    var $modal = $(el).closest(".scf-popup");
                    $(el).on( 'click', function() {
                        if( $(".rate-list .active").html() !== undefined){
                        var post_data ={
                            rating :  $(".rate-list .active").html(),                          
                            action : "insert_nps",
                            feedback : $("#feedback_text").val(),                            
                        };
                       
                        t.http.request( path.base_url+'customer_feedback.html', 'POST', post_data, 'json', function( response ) {

                        } );                       
                    } else {
                        var post_data ={                                                  
                            action : "close_nps"                                           
                        };                       
                        t.http.request( path.base_url+'customer_feedback.html', 'POST', post_data, 'json', function( response ) {

                        } );         
                    }
                    });

                },
                not_now : function( el, t ) {

                    $(el).on( 'click', function() {

                        $(".nps-feedback .fb_ask_help, .nps-feedback .pf_no, .nps-feedback .pf_yes").hide();
                        $(".nps-feedback .fb_ask_help_no, .nps-success").show();

                        setTimeout(function() {
                            t.modal.close( "nps" );
                            $("#redesign_feedback").hide();
                        }, 2000 );

                    });
                    
                },
                yes_now : function( el, t ) {

                    $(el).on( 'click', function() {

                        $(".nps-feedback .fb_ask_help, .nps-feedback .pf_no, .nps-feedback .pf_yes").hide();
                        $(".nps-feedback .fb_ask_help_yes, .nps-success").show();
                        $(".nps-success").html("<span class='success-msg'><span class='si-done'></span> Email Sent</span>");

                        setTimeout(function() {
                            t.modal.close( "nps" );
                            $("#redesign_feedback").hide();
                        }, 2000 );

                    });
                    
                }
            },
            ris_tip_popup: {
                init: function( el, t ) {
                    browse_box = $(el).find('.ris-drag-box#browse');
                    browse_box.on(
                        'dragover',
                        function(e) {
                            e.preventDefault();
                            e.stopPropagation();
                            browse_box.css("border", "3px dashed #0F63EC");
                        }
                    );
                    browse_box.on(
                        'dragleave ',
                        function(e) {
                            e.preventDefault();
                            e.stopPropagation();
                            browse_box.css("border", "1px dashed #0F63EC");
                        }
                    );
    
                     browse_box.on(
                        'drop',
                        function(e){
                            if(e.originalEvent.dataTransfer){
                                if(e.originalEvent.dataTransfer.files.length) {
                                    e.preventDefault();
                                    e.stopPropagation();
                                    console.log(e.originalEvent.dataTransfer.files);
                                    var post_data = new FormData();    
                                    post_data.append( 'file', e.originalEvent.dataTransfer.files[0] );
                                    post_data.append( 'search_type', 4 );
                                    t.modal.ris_tip_popup.upload(el, t, post_data);
                                }   
                            }
                        }
                    );

                    
                    var _URL = window.URL || window.webkitURL;

                    $(el).find('#fileupload').on( 'change', function() {
                        
                        var file, img;
                        if ((file = this.files[0])) {
                            img = new Image();
                            img.onload = function() {
                                if(this.width >= 500 && this.height >= 500){
                                    post_data = new FormData( $(el).find('form')[0] );
                                    t.modal.ris_tip_popup.upload(el, t, post_data);
                                }else{
                                    $(el).find('.ris-drag-box#browse').hide();
                                    $(el).find('.ris_warning#warning').show();
                                    $(el).find('.ris_warning-navigate#warning_navigate').show();
                                }
                            };
                            img.src = _URL.createObjectURL(file);
                        }
                    });

                    $(el).find('#btn-upload-different').on( 'click',function(){
                        
                        $(el).find('.ris-drag-box#browse').show();
                        $(el).find('.ris_warning#warning').hide();
                        $(el).find('.ris_warning-navigate#warning_navigate').hide();
                        $(el).find('form')[0].reset();
                    });

                    $(el).find('#btn-continue').on( 'click',function(){
                        post_data = new FormData( $(el).find('form')[0] );
                        t.modal.ris_tip_popup.upload(el, t, post_data);
                    });

                    var popup_setting = $(el).find('#ris_tips_popup_setting');
                    popup_setting.on( 'change', function() {
                        t.http.ajax_request( 'ris_tips_popup', 'post', { setting: popup_setting.is(':checked')  }, function( response ) {
                            
                        });
                    });

                    
                    
    
                },
                upload: function( el, t, post_data){

                    $(el).find('.ris-drag-box#browse').hide();
                    $(el).find('.ris_warning#warning').hide();
                    $(el).find('.ris_warning-navigate#warning_navigate').hide();
                    $(el).find('.ris-drag-box#loading').show();

                    t.http.request( '/search.html', 'POST', post_data, 'JSON', function( response ) {

                            response = JSON.parse( response );
                            if ( response.image_error ) {

                                // $progress_bar.removeClass("loading");
                                // t.tooltip.show( t.v['search.error'], image_error );
                                alert(image_error);
                                // $progress_value.hide();

                            } else window.location = response.url;

                    }, null, function( progress ) {

                            if ( progress.lengthComputable ) {

                                var percentage = parseInt( ( progress.loaded / progress.total ) * 100 );
                                // $progress.css( { width: percentage + "%" } );
                                $(el).find(".scf-progress-bar .value").css( "width", percentage + "%" );

                            }

                    } );
                    
                    // var width = 1;
                    // var id = setInterval(frame, 50);
                    // function frame() {
                    //     if (width >= 100) {
                    //         clearInterval(id);
                    //         i = 0;
                    //     } else {
                    //         width++;
                    //         $(el).find(".scf-progress-bar .value").css( "width", width + "%" );
                    //     }
                    // }
                }
                

            },
            ris_tip_slider: {          
                index : 0,      
                init: function( el, t ) {
                    t.modal.ris_tip_slider.upldate_slider(el, t);
                    $(el).find('.si-right').on( 'click', function() {
                        index = ++t.modal.ris_tip_slider.index;
                        if(index > 5) index = 0;
                        t.modal.ris_tip_slider.index = index;
                        t.modal.ris_tip_slider.upldate_slider( el, t);
                        $(".tip_pagin span").removeClass("active");
                        $(".tip_pagin span:nth-child(" + ++index + ")").addClass("active");
                        $(".tip_pagin i").removeClass("active");
                        $(".tip_pagin i:nth-child(" + index + ")").addClass("active");
                    });
                    $(el).find('.si-left').on( 'click', function() {
                        index = --t.modal.ris_tip_slider.index;
                        if(index < 0) index = 5;
                        t.modal.ris_tip_slider.index = index;
                        t.modal.ris_tip_slider.upldate_slider( el, t);
                        $(".tip_pagin span").removeClass("active");
                        $(".tip_pagin span:nth-child(" + ++index + ")").addClass("active");
                        $(".tip_pagin i").removeClass("active");
                        $(".tip_pagin i:nth-child(" + index + ")").addClass("active");
                    });
                    $(el).find('.tip_pagin span').on( 'click', function() {
                        var dot_index = $(this).data("index");
                        t.modal.ris_tip_slider.index = dot_index;
                        t.modal.ris_tip_slider.upldate_slider( el, t);
                        $(".tip_pagin span").removeClass("active");
                        $(".tip_pagin span:nth-child(" + ++dot_index + ")").addClass("active");
                        $(".tip_pagin i").removeClass("active");
                        $(".tip_pagin i:nth-child(" + dot_index + ")").addClass("active");
                    });
                },
                upldate_slider: function( el, t) {
                    index =  t.modal.ris_tip_slider.index;
                    $(el).find('.captions li').removeClass("active");
                    $(el).find('.captions li:eq( '+index+' )' ).addClass("active");
                    $(el).find('img').hide();
                    $(el).find('img#'+index+'' ).show();
                },
            },            
            hide_adult_images: function( el, t ) {
                $(el).on( "change", function() {
                    var $this = $(this);
                    if( $this.is( ":checked" ) ) $(".adult_image").hide();
                    else $(".adult_image").show();
                } );
            },
            screenshot_page: function( el, t, o ) {
                var $this = $(el);        
                $this.on( "click", function() {
                    var dataURL = {};
                    
                  //html2canvas(document.getElementById('body'), { letterRendering: 1, allowTaint : true, onrendered : 
                    html2canvas( document.querySelector("body"), { allowTaint: false , useCORS: true } ).then(canvas => { 
                        dataURL = canvas.toDataURL(); 
                        create_screenshot_popup();                        
                        $('#div_screenshot').append('<img src="' + dataURL + '"/>');
                    });
                       
                });

                function create_screenshot_popup(){
                    var $div = $("<div>", {id: "screenshot_popup", "class": "screenshot_popup"});
                    $("body").append($div);
                    $("#screenshot_popup").html("<div class='ss-text'>Screenshot Image <div id='btn_close_popup' class='waiting-list-div' onclick=\"close_screenshot_popup();\"><i class='si-close-circle'></i></div></div> <br><div id='div_screenshot' style='overflow-y: scroll; height:90%;'></div>");
                    $("#btn_close_popup").click(function(event){ 
                        //event.preventDefault();                       
                        $("#screenshot_popup").remove();
                    });
                }
    
            },
            close_adult_warning: function( el, t, o ) {                
                $(el).on( "click", function() {
                    $(".adult_img_blur").css("display" , "block");
                    $(".adult_img_source").css("display" , "none");

                    $("#adult_popup").css("display", "none");
                    $('#chk_adult_popup').prop('checked', true);
                   // $(".adult_image").hide();
                });
            },
            quick_assistance: {
                click: function( el, t ) {
                    $(el).click(function(){
                        window.fcWidget.open();
                        window.fcWidget.show();
                        $(t.v["modal.quick_assistance"]).hide();
                    });
                },
                close: function( el, t ) {
                    $(el).click(function(){
                        $(t.v["modal.quick_assistance"]).hide();
                    });
                }
            },
            privacy_score: {
                show:function( el, t ) {

                    $.each( $(el).data(), function( key ) {
                        $(el).removeAttr('data-' + key );
    
                    } );
    
                    $(el).on( 'click', function() {
    
                        var target = $(this).data('target');
                        var name = $(this).data('name');
                        var age = $(this).data('age');
                        var fname = name.split(" ")[0];

                        if ( typeof t.modal.ref[ target ] !== 'undefined' ) {
                           
                            scf.privacy_lock.rotate_dial(0,1);
                           
                            t.modal.ref[ target ].data( 'current', $(this).data() );
                            if ( ( typeof t.modal[ target ] == "object" ) && typeof t.modal[ target ]["pre_show"] == "function" ) t.modal[ target ]["pre_show"]( t.modal.ref[ target ], t );
                            $(".view_pl_score #name").html(name);
                            $(".view_pl_score #fname").html(fname);
                            t.modal.show( target );

                            $(".view_pl_score .loading").show();
                            $(".view_pl_score .main").hide();

                            post_data = {
                                name: name,
                                age: age,
                            }
                            
                            t.http.ajax_request('privacy_score', 'post', post_data, function( response ) {
                                if (response.status) {

                                    $(".view_pl_score .loading").hide();
                                    $(".view_pl_score .main").show();
                                    
                                    $('.view_pl_score #action').val(response.action);

                                    var privacy_lock_score = response.privacy_score;

                                    scf.privacy_lock.rotate_dial(1,privacy_lock_score/100);

                                    if (privacy_lock_score >= 75) {
                                        $(".view_pl_score #privacy_score").addClass("excellent");
                                        $(".view_pl_score #privacy_score").text("Excellent");
                                    } else if (privacy_lock_score >= 50) {
                                        $(".view_pl_score #privacy_score").addClass("good");
                                        $(".view_pl_score #privacy_score").text("Good");
                                    } else if (privacy_lock_score >= 25) {
                                        $(".view_pl_score #privacy_score").addClass("fair");
                                        $(".view_pl_score #privacy_score").text("Fair");
                                    } else {
                                        $(".view_pl_score #privacy_score").addClass("poor");
                                        $(".view_pl_score #privacy_score").text("Poor");
                                    }

                                    if (response.emails && response.emails.length > 0) {
                                        $('#email-select').empty().append('<option value="" disabled selected>Select an email</option>');
                                        $.each(response.emails, function(index, email) {
                                            $('#email-select').append('<option value="' + email + '">' + email + '</option>');
                                        });
                                        $('#email-select').append('<option value="custom">Add Email</option>');
                                        $('#email-select').show();
                                        $('#custom-email').hide();
                                    } else {
                                        $('#email-select').hide();
                                        $('#custom-email').show();
                                    }

                                }
                            });
                        }
    
                    } );
                },
            },
            signup_modal: {
                init: function( el, t ) {
                    //15 sec timeout
                    setTimeout( function() {
                        t.modal.show( 'pl_signup' );
                    }, 15000 );
                }
            },
           
        }
    };

    func.modal.activate_account = func.modal.deactivate_account;
    scf.merge( func );

    // Google ReCaptcha
    var func = {
        google: {
            recaptcha: {
                render: function( el, t, id, callback ) {

                    t.loader.google_recaptcha( function() {

                        grecaptcha.ready( function() {

							grecaptcha.render( id, {
                                 ////'sitekey': '6LerSA4qAAAAAKwt9OTRL7ZrPJoA6RA2ydPnyFv3',
                                'sitekey': '6LfYlBwTAAAAAI0CitGvsc5rutt06QvjntDr7_Hp',
                                'callback': callback,
                            } );

                        } );

                    } );

                },
                init: function( el, t, o ) {

                    this.render( el, t, el, null );

                },
            },
            recaptcha_page: {
                init: function( el, t ) {

                    var
                        link = $(el).data("link");
                       
                    if (!link.startsWith(path.base_url)) {
                        //link = link.replace('//', '/');
                        link = link.substring(1);
                        link = path.base_url + link;
                    }

                    url = new URL( link );

                    t.google.recaptcha.render( el, t, el, function( value ) {
                       
                        window.location.href = link + ( url.search ? "&" : "?" ) + "g-recaptcha-response=" + value;

                    } );

                }
            },
            recaptcha_link:function( el, t )  {
                    $(el).on( "click", function() {
                        var link = $(el).data("link");
                        t.http.ajax_request( 'recaptcha_link', 'post', { link: link }, function( response ) {

                        });

                    } );
                }
        },
    };
    scf.merge( func );



    var func = {
        ris_embed: {
            init: function(el, t) {
                var _URL = window.URL || window.webkitURL;
    
                $(el).find('#fileupload').on('change', function() {
                    var file, img;
                    if ((file = this.files[0])) {
                        // Validate the image file
                    if (!t.validator.image(file.name, file.size)) {
                        // Update the existing error message element
                        var errorMessage = $(el).find('.scf-error-message');
                        errorMessage.text("Please upload an image in one of the following formats: .jpg, .gif, .png, .bmp, .tif. Max file size is 10MB");
                        errorMessage.show();
                        return; 
                    }
                        img = new Image();
                        img.src = _URL.createObjectURL(file);
                        img.onload = function() {
                            var form = $(el).find('form')[0];
                            var post_data = new FormData(form);
                            // Extract affiliate URL from the current URL query string:
                            var params = new URLSearchParams(window.location.search);
                            var affiliateUrl = params.get("afl_url");
                            
                            if (affiliateUrl !== null) {
                            var baseUrl = affiliateUrl;
                                
                                $.ajax({
                                    url: path.relative_url + "ajax.html?cmd=get_params_from_url",
                                    method: "POST",
                                    data: {
                                        base_url: baseUrl
                                    },
                                    success: function(response) {
                                        iframe_url = response.url;
                                        // Create a hidden input element and append it to the form
                                        var hiddenInput = document.createElement('input');
                                        hiddenInput.type = 'hidden';
                                        hiddenInput.name = 'iframe_url';
                                        hiddenInput.value = iframe_url;
                                        form.appendChild(hiddenInput);

                                        // Update the FormData with the new hidden input
                                        t.ris_embed.upload(el, t, post_data);
                                    },
                                    error: function() {
                                        // console.error("Failed to get the redirected URL.");
                                        t.ris_embed.upload(el, t, post_data);

                                    }
                                });
                            } else {
                                t.ris_embed.upload(el, t, post_data);
                            }
                        };
                    }
                });
    
                var browse_box = $(el).find('.ris-drag-box#browse');
                browse_box.on('dragover', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    browse_box.css("border", "3px dashed #0F63EC");
                });
    
                browse_box.on('dragleave', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    browse_box.css("border", "1px dashed #0F63EC");
                });
    
                browse_box.on('drop', function(e) {
                    if (e.originalEvent.dataTransfer) {
                        if (e.originalEvent.dataTransfer.files.length) {
                            e.preventDefault();
                            e.stopPropagation();
                            $('#fileupload')[0].files = e.originalEvent.dataTransfer.files;
                            $('#fileupload').trigger('change');
                        }
                    }
                });
            },
            upload: function(el, t, post_data) {

                $(el).find('.ris-drag-box#browse').hide();
                $(el).find('.ris_warning#warning').hide();
                $(el).find('.ris_warning-navigate#warning_navigate').hide();
                $(el).find('.ris-drag-box#loading').show();

    
                // Simulate progress with a timer
                var percentage = 0;
                var interval = setInterval(function() {
                    if (percentage >= 100) {
                        clearInterval(interval);

                        // Submit the form when progress reaches 100%
                        var form = $(el).find('form')[0];
                        form.action = '/search.html'; // Set the action URL dynamically
                        form.target = '_parent'; // Ensure the form submits to the parent window
                        form.submit(); // Submit the form
                    } else {
                        percentage += 10; // Increment progress by 10%
                        $(el).find(".scf-progress-bar .value").css("width", percentage + "%");
                        $(el).find(".scf-progress-bar-precentage span").text(percentage);
                    }
                }, 30); 
            }
        },
        ss_embed: {
            init: function(el, t) {

                $(el).find('#affiliateForm').on('submit', function(event) {
                    event.preventDefault();
                    var token = $(el).find('input[name="tkn"]').val() || '';
                    const form = event.target;
                    const formData = new FormData(form);
                    let search_data = {};
                    
                    // Determine the search_type based on the presence of specific input fields
                    let search_type = '';
                    let error_message = '';

                    if (form.querySelector('input[name="email"]')) {
                        const email = formData.get('email');
                        if (!t.validator.email(email)) {
                            error_message = 'Invalid Email Address. Correct format: james@smith.com';
                        } else {
                            search_data = {
                                search_type: 1,
                                email: email
                            };
                        }
                    } else if (form.querySelector('input[name="username"]')) {
                        const username = formData.get('username');
                        if (!t.validator.username(username)) {
                            error_message = 'Invalid Username. Correct format: james.smith';
                        } else {
                            search_data = {
                                search_type: 0,
                                username: username
                            };
                        }
                    } else if (form.querySelector('input[name="phone"]')) {
                        const phone = formData.get('phone');
                        if (!t.validator.phone(phone)) {
                            error_message = 'Invalid Phone Number. Correct format: 1234567890';
                        } else {
                            search_data = {
                                search_type: 3,
                                phone: phone
                            };
                        }
                    } else if (form.querySelector('input[name="address"]')) {
                        const address = formData.get('address');
                        if (!t.validator.not_empty(address)) {
                            error_message = 'Please enter an Address';
                        } else {
                            search_data = {
                                search_type: 5,
                                address: address
                            };
                        }
                    }

                    if (error_message) {
                        // Display the error message
                        const errorDiv = $(form).find('.scf-error-message');
                        errorDiv.text(error_message).show();
                        return;
                    }

                    // Disable the submit button and show a spinner inside it
                    const submitButton = $('button[type="submit"]');
                    submitButton.prop("disabled", true).html('<div class="spinner-inline"><div></div><div></div><div></div><div></div></div>');

                    // Make an AJAX request to get the necessary parameters
                    // Extract affiliate URL from the current URL query string:
                    var params = new URLSearchParams(window.location.search);
                    var affiliateUrl = params.get("afl_url");
                    
                    if (affiliateUrl !== null) {
                    var baseUrl = affiliateUrl;
                        $.ajax({
                            url: path.relative_url + "ajax.html?cmd=get_params_from_url",
                            method: "POST",
                            data: {
                                base_url: baseUrl
                            },
                            success: function(response) {
                                const iframe_url = response.url;
                                const lastNameInput = form.querySelector('input[name="last_name"]');
                                const addressInput = form.querySelector('input[name="address"]');
                                let actionUrl = '';
                                let queryString = new URLSearchParams(formData).toString();


                                if (lastNameInput || addressInput) {
                                    actionUrl = form.action + '?' + queryString + iframe_url;
                                    // Redirect the parent window
                                    window.parent.location.href = actionUrl;
                                } else {

                                    $.ajax({
                                        url: path.base_url + 'search.html?ver_tk=' + token,
                                        method: 'POST',
                                        data: search_data,
                                        dataType: 'json',
                                        success: function(response) {
                                            // Set status properties from the response
                                            status.link = response.url;
                                            status.rush = true;
                                            
                                            // Build the action URL
                                            let actionUrl = response.url;
                                            if (actionUrl.includes('?')) {
                                                actionUrl += iframe_url + '&ver_tk=' + token;
                                            } else {
                                                actionUrl += '?' + iframe_url + '&ver_tk=' + token;
                                            }
                                            
                                            // If the response contains details, create a form to send them as POST parameters
                                            if (response.details) {
                                                var form = document.createElement("form");
                                                form.method = "POST";
                                                form.action = actionUrl;
                                                form.target = "_parent"; // Ensure the parent window handles the POST
                                                
                                                // Add each detail as a hidden input field
                                                for (var key in response.details) {
                                                    if (response.details.hasOwnProperty(key)) {
                                                        var input = document.createElement("input");
                                                        input.type = "hidden";
                                                        input.name = key;
                                                        input.value = response.details[key];
                                                        form.appendChild(input);
                                                    }
                                                }
                                                // Append the form to the body and submit it
                                                document.body.appendChild(form);
                                                form.submit();
                                            } else {
                                                // Fallback: redirect via GET if no details are provided
                                                window.parent.location.href = actionUrl;
                                            }
                                        },
                                        error: function(jqXHR, textStatus, errorThrown) {
                                            // console.error("Request failed:", textStatus, errorThrown);
                                            window.parent.location.href = path.base_url;
                                        }
                                    });
                                }
                                
                                
                            },
                            error: function() {
                                // console.error("Failed to get the redirected URL.");
                                window.parent.location.href = path.base_url;
                            }
                        });
                    } else {
                        const lastNameInput = form.querySelector('input[name="last_name"]');
                        const addressInput = form.querySelector('input[name="address"]');
                        let actionUrl = '';
                        let queryString = new URLSearchParams(formData).toString();


                        if (lastNameInput || addressInput) {
                            actionUrl = form.action + '?' + queryString + iframe_url + '&ver_tk=' + token;
                            // Redirect the parent window
                            window.parent.location.href = actionUrl;
                        } else {

                            $.ajax({
                                url: path.base_url + 'search.html?ver_tk=' + token,
                                method: 'POST',
                                data: search_data,
                                dataType: 'json',
                                success: function(response) {
                                    // Set status properties from the response
                                    status.link = response.url;
                                    status.rush = true;
                                    
                                    // Build the action URL
                                    let actionUrl = response.url + '&ver_tk=' + token;
                                    
                                    // If the response contains details, create a form to send them as POST parameters
                                    if (response.details) {
                                        var form = document.createElement("form");
                                        form.method = "POST";
                                        form.action = actionUrl;
                                        form.target = "_parent"; // Ensure the parent window handles the POST
                                        
                                        // Add each detail as a hidden input field
                                        for (var key in response.details) {
                                            if (response.details.hasOwnProperty(key)) {
                                                var input = document.createElement("input");
                                                input.type = "hidden";
                                                input.name = key;
                                                input.value = response.details[key];
                                                form.appendChild(input);
                                            }
                                        }

                                        
                                        // Append the form to the body and submit it
                                        document.body.appendChild(form);
                                        form.submit();
                                    } else {
                                        // Fallback: redirect via GET if no details are provided
                                        window.parent.location.href = path.base_url;
                                    }
                                },
                                error: function(jqXHR, textStatus, errorThrown) {
                                    // console.error("Request failed:", textStatus, errorThrown);
                                    window.parent.location.href = path.base_url;

                                }
                            });
                        }
                    }
                });
            }
        }
    }
    scf.merge(func);

    // Notification Messagess
    var func = {
        message: {
            close: function( el, t ) {

                $(el).on( "click", function() {

                    $(this).parent().remove();

                } );

            }
        }
    }
    scf.merge( func );


    //Save a sale exit intent pop up
    var func = {
        save_sale : {
            init : function(el,t){
                $(el).ready(function(el) { 
                    var popupDisplayed = false;
                    
                    function showExitPopup() {
                        if (!popupDisplayed) {  
                            scf.modal.show("save_a_sale");
                            popupDisplayed = true;
                            t.http.ajax_request( 'save_a_sale', 'post');

                        }
                    }
                
                    // For Desktop - Trigger when cursor moves towards the top of the page
                    $(el).on('mouseout', function(event) {
                        if (event.clientY <= 0) {                            
                            showExitPopup();
                        }
                    });
        
                    // For Mobile - Use visibilitychange to detect if user navigates away
                    $(el).on('visibilitychange', function() {
                        if (document.hidden || document.visibilityState === "hidden") {
                            showExitPopup();
                        }
                    });
        
                    // For Mobile - Use beforeunload to prompt user when leaving the page
                    $(window).on('beforeunload', function(event) {
                        if (!popupDisplayed) {
                            event.preventDefault();
                            showExitPopup();
                            event.returnValue = ''; // Standard way to trigger confirmation dialog
                        }
                    });
            
                });
            }
        }
    }

    scf.merge( func );
    
    // Reverse Image Search
    var func = {
        ris: {
            progress: {
                init: function( el, t, o ) {

                    var
                        $v = {},
                        $this = $(el),
                        $icon_len = 0,
                        $icons = null,
                        multi_status = {
                            percentage: 0,
                            factor: 0,
                        };

                    $this.extract_vars( $v );
                    $v.level = $v.level.find("li");

                    t.http.ajax_request( 'igp_status', 'post', { token: $this.data('token') }, function( response ) {

                        var count = response.exact_matches + response.similar_matches;
                        $v.counter_1.text( count );
                        $v.counter_2.text( count );

                    } )

                    t.progress_runner.start_multi_level( o.progress.data, null, function( data, status ) {

                        $v.progress_bar.css( { width: status.percentage + '%' } );
                        $v.progress_value.text( status.percentage + '%' );

                        multi_status.percentage += multi_status.factor;
                        $v.vprog.css( { height: multi_status.percentage + '%' } );


                        if ( data.speed == 100 ) {

                            status.ab_speed = 2.5;

                        } else {

                            status.ab_speed = 1.5;

                        }

                        if ( typeof data.quick != "undefined" && status.percentage == 60 ) {

                            $v.almost.hide();
                            $v.quick.fadeIn(1000);

                        }

                        if ( typeof data.warning != "undefined" && status.percentage == 50 ) {

                            $v.warning_content.show();

                        }

                        if ( $icon_len && ( status.percentage % 2 == 0) ) {

                            var $parent = $icons.parent();
                            $icons.eq(0).remove();
                            $icons = $parent.find("img");

                        }

                    }, function( data, status ) {

                        $v.progress_text.text( data.text + "..." );

                    }, null, function ( data ) {

                        multi_status.percentage = data.start_percentage;
                        multi_status.factor = ( data.percentage - multi_status.percentage ) / 100;

                        $v.tip.toggle( data.tips );
                        $v.foot.text( data.foot );

                        if ( data.index == 1 || data.index == 2) {
                            if( $v.ris_icons.length == 1 ) $v.ris_icons.css("display", "flex");
                            $icons = $v.ris_icons.find("img");
                            $icon_len = $icons.length * 2;
                        }

                        if ( data.index - 1 >= 0 ) $v.level.eq( data.index - 1 ).addClass("active");
                        
                        $v.flips.hide();
                        $v.warning_content.hide();

                        if ( data.index > 2 ) {

                            $v.section.find(".ris-search-box").css("padding", "24px");
                            $v.img.hide();
                            $v.almost.hide();
                            $v.flip.hide();

                            if ( data.index == 3 ) $v.flip.show();
                            if ( data.index == 4 ) $v.almost.show();

                        }

                        t.http.ajax_request( 'baselines_ris_' + data.index, 'post');

                    }, function() {

                        $v.section.addClass("ris-results");
                        $v.quick.hide();
                        $v.result_foot.show();
                        $v.level.eq(4).addClass("active");
                        $v.result_count.show();
                        $v.section_progress.hide();
                        t.http.ajax_request( 'baselines_ris_5', 'post');

                    } );

                },
                data: [
                    {
                        data: [
                            { text: "Analyzing Image size", speed: 200, percentage: 20 },
                            { text: "Analyzing Resolution", speed: 200, percentage: 40 },
                            { text: "Analyzing Image Location", speed: 200, percentage: 60 },
                            { text: "Scanning Meta Data", speed: 200, percentage: 80 },
                            { text: "Scanning Device Information", speed: 200, percentage: 100 },
                        ],
                        tips: true,
                        foot: 'Analyzing Image Meta Data and Device Information',
                        index: 0,
                        start_percentage: 0,
                        percentage: 12,
                    },
                    {
                        data: [
                            { text: "Scanning Social Media", speed: 250, percentage: 25 },
                            { text: "Results may reveal Dating Profiles", speed: 250, percentage: 50 },
                            { text: "Results may reveal Names and Aliases", speed: 250, percentage: 75 },
                            { text: "Results may reveal Friends and Relatives", speed: 250, percentage: 100 },
                        ],
                        tips: false,
                        foot: 'Matching images on Social Media and Dating Sites',
                        index: 1,
                        start_percentage: 12,
                        percentage: 20,
                    },
                    {
                        data: [
                            { text: "Scanning Dating Websites", speed: 250, percentage: 15 },
                            { text: "Scanning Forums", speed: 250, percentage: 24 },
                            { text: "Scanning Professional Websites", speed: 250, percentage: 34 },
                            { text: "Scanning Government Websites", speed: 250, percentage: 46 },
                            { text: "Scanning Local Comm. Websites", speed: 250, percentage: 58 },
                            { text: "Scanning Personal Blogs", speed: 250, percentage: 64 },
                            { text: "Scanning News Sites", speed: 250, percentage: 80 },
                            { text: "Scanning Social Networks", speed: 250, percentage: 100 },
                        ],
                        tips: false,
                        foot: 'Deep scanning different image databases',
                        index: 2,
                        start_percentage: 34,
                        percentage: 42,
                    },
                    {
                        data: [
                            { text: "Checking Scammer Image Database", speed: 200, percentage: 100, warning: true },
                        ],
                        tips: false,
                        foot: 'Sorting through Images of identified scammers',
                        index: 3,
                        start_percentage: 55,
                        percentage: 64,
                    },
                    {
                        data: [
                            { text: "Organizing All the Results", speed: 150, percentage: 100, quick: true },
                        ],
                        tips: false,
                        foot: 'All images are arranged in a detailed report',
                        index: 4,
                        start_percentage: 77,
                        percentage: 87,
                    },
                ],
            },
        },
    };
    scf.merge( func );

    // Tooltip
    var func = {
        tooltip: {
            show: function( el, text ) {

                var
                    $this = $(el),
                    time = $this.data("time");

                ( typeof text != "undefined" && text ) && $(el).text( text );
                time = ( typeof time == "undefined" ) ? 5000 : time;

                if ( $this.hasClass("anim") ) {

                    $this.addClass("show");
                    setTimeout( function() {

                        $this.removeClass("show");

                    }, time );

                } else {

                    $this.show();

                }

            },
            init: function ( el, t, o ) {

                var $this = $(el);
                $this.on( "click", function( e ) {

                    var
                        $body = $('body'),
                        $window = $(window);

                        if( $this.hasClass( "what_new" ) ) {
                            var $elem = $('<div class="tooltip what_new_tt"><i class="arrow si-triangle-down"></i>' + $this.data("text") + '</div>');
                        } else {
                            var $elem = $('<div class="tooltip"><i class="arrow si-triangle-down"></i>' + $this.data("text") + '</div>');
                        }
    
                        var pos = $this.hasClass('tooltip-left') ? 'left' : ( $this.hasClass('tooltip-right') ? 'right' : 'center' ),
                        css = {},
                        $arrow = null,
                        func = function() {

                            $elem.remove();
                            $body.off( "click", func );
                            $window.off( "resize", func );

                        };

                    $body.prepend( $elem.removeAttr("data-text") );

                    $arrow = $elem.css( { "top": ( $this.offset().top - $elem.outerHeight() - 16 ) + 'px', "left": ( $this.offset().left - ( 'right' == pos ? ( $elem.outerWidth() - $this.outerWidth() ) : 0 ) + 'px' ) } ).find(".arrow")
                    if ( pos != 'center' ) {

                        css[pos] = ( $this.width() / 2 ) + "px";
                        $arrow.css( css );

                    }

                    $body.on( "click", func );
                    $window.on( "resize", func );
                    e.stopPropagation();

                } );

            },
        },
    };
    scf.merge( func );

    // ris_notification
    var func = {
        ris_notification: {
            $handler: {},
            init: function( el, t, o ) {

                var
                    $f = {},
                    $window = $(window),
                    $el = $(el),
                    search_id = $el.data( "id" ),
                    type = $el.data( "type" ),
                    x = null,
                    o = this,
                    message = [ "Searching...", "Match Found." ],

                    $report_btn = $(".view_main_report"),
                    intermediate_page = ( type == "intermediate" ),
                    completed = false,
                    clickable = false,
                    first_run = true,
                    on_demand_refresh = function() {

                        if ( ! completed ) callback();
                        else $window.off( "focus", on_demand_refresh );

                    },
                    callback = function() {

                        post_data = { "id": search_id, "type": intermediate_page ? "intermediate" : "" };
                        t.http.ajax_request( "check_is_ris_pending", 'post', post_data, function( response ) {

                            if ( intermediate_page && ! clickable ) {

                                if ( response.search[search_id].total ) {

                                    clickable = true;
                                    $report_btn.removeClass("loading text btn-darkgray").attr( "href", $report_btn.data("target") ).text("See Report In-Progress").addClass("btn-blue");
                        			
                                }

                            }

                            $f.progress_text.text( response.search[ search_id ].progress + "% Completed" );
                            $f.progress_value.css( "width", response.search[ search_id ].progress + "%" );
                            $f.result_count && $f.result_count.text( response.search[ search_id ].total );

                            if ( response.search[search_id].status ) {

                                clearInterval(x);
                                completed = true;

                                if( type == "popup" ) {

                                    $f.toggle_box.addClass( "disabled" );
                                    $f.toggle_box_input.attr( "disabled", "disabled" );
                                    $el.addClass("completed");

                                } else {

                                    $f.progress_heading.text( "Your Image Search Report Completed." );
                                    $f.message.text("Completed");

                                    if ( intermediate_page ) {

                                        $f.status_img.toggle();
                                        $f.email_alert.hide();
                                        $f.auto_redirect.addClass("active");
                                        $f.btn.text( "View Report" ).toggleClass("btn-blue btn-dark-green");

                                        var
                                            timer = 10,
                                            $display = $f.auto_redirect.find("span"),
                                            interval = setInterval( function() {

                                                --timer;
                                                $display.text( Math.round( timer / 60 ).toString().padStart( 2, '0' ) + ":" + Math.round( timer % 60 ).toString().padStart( 2, '0' ) );

                                                if( ! timer ) {

                                                    window.location.href = $f.btn.data("target");
                                                    clearInterval(interval);

                                                }

                                            }, 1000 );

                                    } else {

                                        t.modal.show('more_new_results');
                                        $el.hide();
                                        $f.loader.hide();

                                    }

                                    $el.addClass("completed");

                                }

                            } else {

                                var random_message = Math.floor( Math.random() * message.length );
                                $f.message.text( message[ random_message ] );

                                if ( type == "intermediate" ) {

                                    if ( Object.keys( response.search ).length ) {

                                        $.each( response.search, function( id, data ) {

                                            if ( id != search_id && o.search_history[ id ] ) {

                                                var c = o.search_history[ id ];
                                                c.exact.text( data.exact );
                                                c.similar.text( data.similar );
                                                c.progress_text.text( data.progress + "% Completed" );
                                                c.progress_value.css( "width", data.progress + "%" );
                                                if ( data.status ) {

                                                    c.btn.attr( "href", c.btn.data("url") );
                                                    delete o.search_history[ id ];

                                                }

                                            }

                                        } );

                                    }

                                }

                            }

                        } );

                        if ( first_run ) {

                            first_run = false;
                        	clearInterval( x );
                        	x = setInterval( callback, 3000 );

						}

                    };


                $el.extract_vars( $f );
                this.$handler = $el;
                if( search_id != null ) {

                    x = setInterval( callback, 100 );
                    $window.on( "focus", on_demand_refresh );

                }

            },
            search_history: {},
            ris_intermediate: function( el, t ) {

                var
                    o = scf.ris_notification.search_history;
                    $el = $(el);
                $el.find(".item").each( function( i, e ) {

                    var
                        $e = $(e),
                        id = $(e).data("id");

                    o[ id ] = {};
                    $e.extract_vars( o[ id ] );

                } );

            },
            tooltip: function( el, t ) {
                var $this = $(el);

                $this.on( "click", function( e ) {
                    $this.toggleClass("active");
                });
            },
            toggle: function( el, t ) {

                var $el = $(el).on( "click", function() {

                    var $this = $(this),
                        id = $this.data("id"),
                        status = $this.is(":checked");
                
                    $el.parent().find("+ .status").text( status ? "ON" : "OFF" );
                    post_data = { 
                        "id": id, 
                        "status": status,
                        "is_bulk": $this.data("isbulk"),
                        "bulk_batch" : $this.data("bulk-seach-bulk")


                    };
                    t.http.ajax_request( "update_ris_notification", 'post', post_data, function( response ) {} );

                });

            },
            close: function( el, t ) {

                $(el).on( "click", function() {

                    var $this = $(this),
                        id = $this.data("id");

                    post_data = { "id": id };

                    t.http.ajax_request( "ris_notification_close", 'post', post_data, function( response ) {

                        if ( response.status ) {

                            scf.ris_notification.$handler.hide();

                        }

                    } );

                });

            },
            view_report: function( el, t ) {

                $(el).on( "click", function() {

                    var $this = $(this),
                        id = $this.data("id");

                    post_data = { "id": id };

                    t.http.ajax_request( "ris_notification_close", 'post', post_data, function( response ) {
                        if ( response.status ) {
                            window.location.href = path.base_url+'reverse-image-search/?sid=' + id;
                        }
                    } );

                });
                
            }
        }
    };
    scf.merge( func );

    // Search
    var func = {
        search: {
            search_data: {},
			security: {},
            reset: function( t ) {

                this.search_data = {
                    search_type: 2,
                    full_name: '',
                    first_name: '',
                    middle_name: '',
                    last_name: '',
                    country: '',
                    state: '',
                    city: '',
                    age: '',
                };

                t.v['search.select.state'].value = 'Select a State';
                t.v['search.select.city'].value = 'Select a City';

            },
            redirect_link:function( el, t ) {
                var $this = $(el);
                $this.on( "click", function( e ) {
                    $link =  el.href;
                    t.http.ajax_request( 'set_link', 'post', { 'link': $link }, function( response ) {

                    });
                });
            },
            form: {
                init: function( el, t ) {

                    var
                        $form = $(el),
                        $tab = $form.find(".tabs"),
                        $tab_active = $tab.find(".active-tab"),
                        $tab_rest = $tab.find(".hide-tabs"),
                        $tab_btns = $tab.find("a"),
                        $tab_list = $form.find(".list"),
                        is_full = $form.closest(".scf-full-search").length,
                        is_new_header = $form.closest(".new-header").length,
                        is_mobile = $form.closest(".search_mb_2020").length,
                        $ex_list = $form.find(".search-example"),
                        $ex_list_item = $form.find(".search-example .example-type");

                    if ( ! is_full || is_new_header ) {

                        $tab_btns.on( "click", function( e ) {
                            $(".bulk-upload-popup").hide();
                            $(".search-form-2020.intermidiate .bulk-upload-popup").show();
                            var
                                $btn = $tab_active.find("a"),
                                $this = $(this);
                            
                            $tab_btns.removeClass("active");
                            $this.addClass("active");

                            if ( ! is_mobile && ! is_new_header ) {

                                $tab_rest.prepend( $btn );
                                $tab_active.append( $this );

                            }
                            
                            $tab_list.removeClass('active').eq( parseInt( $this.data("item") ) ).addClass('active');
                            
                            $ex_list.fadeOut();
                            
                            if(parseInt( $this.data("item") ) != 5){
                                $ex_list_item.removeClass('active').eq( parseInt( $this.data("item") ) ).addClass('active');
                            }
                            
                            return false;

                        } );

                    }

                },
                dropdown_overlay: function( el, t, o ) {

                    var
                        $this = $(el),
                        $children = $this.siblings("a:not(.active)");

                    $children.eq(0).addClass("first").end().last().addClass("last");
                    $this.on( "click", function() {

                        $(this).closest('.dropdown-search').toggleClass("active");

                    } );

                },
            },
            data: [
                { speed: 250, percentage: 20 },
                { speed: 250, percentage: 40 },
                { speed: 250, percentage: 60 },
                { speed: 250, percentage: 80 },
                { speed: 250, percentage: 100 },
            ],
            out_side_us:function(el,t){
                
                $(el).on( "change", function() {
                  if($(el).is(":checked")){
                    
                    $(".filter-page .state").parent().hide();
                    $(t.v['search.select.city']).parent().hide();

                    $(t.v['search.select.country']).parent().removeClass("col-md-3");
                    $(t.v['search.select.age']).parent().removeClass("col-md-3");

                    $(t.v['search.select.country']).parent().addClass("col-md-6");
                    $(t.v['search.select.age']).parent().addClass("col-md-6");

                  }
                  else{

                    $(".filter-page .state").parent().show();
                    $(t.v['search.select.city']).parent().show();

                    $(t.v['search.select.country']).parent().removeClass("col-md-6");
                    $(t.v['search.select.age']).parent().removeClass("col-md-6");

                    $(t.v['search.select.country']).parent().addClass("col-md-3");
                    $(t.v['search.select.age']).parent().addClass("col-md-3");

                  }
                } );
            },
            filter_prefix:function(el,t){
                var $form = $(el).closest(".search-form-filter");
                
                var search_data = {}

                grecaptcha.ready(function () {
                    grecaptcha.execute('6LftTMMeAAAAAHodlggyeFfE5vOJRAvyArRZqkZv', { action: 'search' }).then(function (token) {
                        search_data.token = token;
                    });
                });

                $(el).on( "click", function() {
                  search_data = {
                    action: "search",
                    age: $form.find("[name='age']").val(),
                    city: $form.find("[name='city']").val(),
                    country: $form.find("[name='country']").val(),
                    first_name: "",
                    full_name: $form.find("[name='firstname']").val()+" "+$form.find("[name='lastname']").val(),
                    last_name: "",
                    middle_name: "",
                    search_type: 2,
                    state: $form.find("[name='state']").val(),
                }

                if(search_data.country !== "US" ){
                    search_data.state = "";
                    search_data.city = "";
                }

                  t.search.run_search(search_data,t);
                } );
            },
            state: function( el, t ) {
               
                $(el).on( "change", function() {
                    
                    var state = $(el).val();
                    t.get_cities.dropdown( t.v['search.select.city'], state );
                } );

                $(el).on( "click", function() {
                    
                    var
                        state = t.v['search.select.state'].value,
                        modal = ( state == '' || state == 'Select a State' ) ? 'select_age' : 'select_city';

                    t.search.search_data.state = state;
                    t.modal.close('select_state');

                    ( 'select_city' == modal ) && ( t.get_cities.dropdown( t.v['search.select.city'], state ) );
                    t.modal.show( modal );
                } );


            },
            country_ns: function( el, t ) {
                $full_name = $(".search-filtering .ns_full_name").val();

                t.search.search_data = {
                    search_type: 2,
                    full_name: $full_name,
                    first_name: '',
                    middle_name: '',
                    last_name: '',
                    country: '',
                    state: '',
                    city: '',
                    age: ''
                };

                grecaptcha.ready(function () {
                    grecaptcha.execute('6LftTMMeAAAAAHodlggyeFfE5vOJRAvyArRZqkZv', { action: 'search' }).then(function (token) {
                        t.search.search_data.token = token;
                        t.search.search_data.action = "search";
                    });
                });

                $(el).on( "change", function() {
                    var country = this.value;
                    if (country != "US") {
                        $(".search-filter-state select").attr("disabled", true);
                        $(".search-filter-city select").attr("disabled", true);
                        $(".search-filter-state select").val("");
                        $(".search-filter-city select").val("");
                        $(".search-filter-state").hide();
                        $(".search-filter-city").hide();
                        if ($(window).width() > 776) {
                            $(".search-filtering .search-filtering-fields .search-filter-country").width("100%");
                        }

                    } else {
                        $(".search-filter-state select").attr("disabled", false);
                        $(".search-filter-city select").attr("disabled", true);
                        $(".search-filter-state").show();
                        $(".search-filter-city").show();
                        if ($(window).width() > 776) {
                            $(".search-filtering .search-filtering-fields .search-filter-country").width("32%");
                        }
                    }
                } );

            },
            state_ns: function( el, t ) {

                $(el).on( "change", function() {
                    var state = this.value;
                    if(state){
                        t.get_cities.dropdown( t.v['search.select.city'], state );
                    }else{
                        $(".search-filter-city select").empty().append('<option value="">Select a City</option>').prop('disabled', true);
                    }
                } );

            },
            city: function( el, t ) {

                $(el).on( "click", function() {

                    t.search.search_data.city = t.v['search.select.city'].value;
                    t.modal.close('select_city');
                    t.modal.show('select_age');

                } );

            },
            age_range: function( el, t ) {

                $(el).find(".age_range").on( "click", function() {

                    $(this).addClass("active").siblings().removeClass("active");

                } );

            },
            age: function( el, t ) {

                $(el).on( "click", function() {

                    if ( $(this).data("target") != "skip" ) {

                        t.search.search_data.age = $(".age_range.active").text();

                    }

                    t.search.run_search( t.search.search_data, t );
                    t.modal.close('select_age');

                } );

            },
            button_search_ns: function( el, t ) {

                $(el).on( "click", function() {

                    if ( typeof t.v['google.recaptcha.ss'] != 'undefined' ) {

                        if ( typeof t.v['google.recaptcha.key'] == 'undefined' ) {

                            t.modal.show('secure_recaptcha');
                            return false;

                        }

                        t.search.search_data['g-recaptcha-response'] = t.v['google.recaptcha.key'];

                    }

                    t.search.search_data.country = $(".search-filter-country select").val();
                    t.search.search_data.state = ($(".search-filter-state select").val() == null ? "" : $(".search-filter-state select").val());
                    t.search.search_data.city = ($(".search-filter-city select").val() == null ? "" : $(".search-filter-city select").val());
                    t.search.search_data.age = $(".search-filter-age select").val();
                    t.search.run_search_ns( t.search.search_data, t );
                });

            },run_search_ns: function( search_data, t ) {

                var $list = $( t.v['searching_popup2.list'] ).find('>div');

                var better_results =  (localStorage.getItem("better_results") ? true : false);

				if ( typeof t.search.security.token !== "undefined" ) {

					search_data.token = t.search.security.token;

				}

                if (better_results || $("body.better-results").length == 0 ) {
                    t.lottie.load( t.v['modal.searching_popup2.animation'], t );

                    t.progress_runner.start( t.search.data, function( status ) {

                        t.http.request( path.base_url+'search.html', 'POST', search_data, 'json', function( response ) {

                            response = JSON.parse( response );
                            status.link = response.url;
                            status.rush = true;

                        } );
                        t.modal.show('searching_popup2');

                    }, null, function( data, status ) {

                        $list.eq( status.current_step ).addClass("active");
                        if ( status.current_step == 3 && ! status.rush ) {

                            data.speed = 2500;

                        }

                    }, function( data, status ) {

                        t.fl( status.link );

                    } );
                } else {
                    $post_data = search_data;

                    t.http.ajax_request( 'better_results_search', 'post', $post_data, function( response ) {
                        if (response) {
                            localStorage.setItem("better_results", true);

                            t.fl(path.base_url + "better-results?token=" + response.token + "&page=1");
                        } else {
                            t.progress_runner.start( t.search.data, function( status ) {

                                t.http.request( path.base_url+'search.html', 'POST', search_data, 'json', function( response ) {

                                    response = JSON.parse( response );
                                    status.link = response.url;
                                    status.rush = true;

                                } );
                                t.modal.show('searching_popup2');

                            }, null, function( data, status ) {

                                $list.eq( status.current_step ).addClass("active");

                            }, function( data, status ) {

                                t.fl( status.link );

                            } );
                        }
                    });


                }



            },
            run_search: function( search_data, t ) {

                var $list = $( t.v['searching_popup2.list'] ).find('>div');

                if ( typeof t.v['google.recaptcha.ss'] != 'undefined' ) {

                    if ( typeof t.v['google.recaptcha.key'] == 'undefined' ) {

                        t.modal.show('secure_recaptcha');
                        return false;

                    }

                    search_data['g-recaptcha-response'] = t.v['google.recaptcha.key'];

                }

				if ( typeof t.search.security.token !== "undefined" ) {

					search_data.token = t.search.security.token;

				}

                var better_results =  (localStorage.getItem("better_results") ? true : false);

                if (better_results || $("body.better-results").length == 0 ) {
                    t.lottie.load( t.v['modal.searching_popup2.animation'], t );

                    t.progress_runner.start( t.search.data, function( status ) {

                        t.http.request( path.base_url+'search.html', 'POST', search_data, 'json', function( response ) {
                            response = JSON.parse( response );
                            status.link = response.url;
                            status.rush = true;
                            if ( usign ) {
                                window.location.href = response.url;
                            }
                            
                        } );
                        t.modal.show('searching_popup2');

                    }, null, function( data, status ) {

                        $list.eq( status.current_step ).addClass("active");
                        if ( status.current_step == 3 && ! status.rush ) {
                            data.speed = 2500;
                        }

                    }, function( data, status ) {

                        t.fl( status.link );

                    } );
                } else {
                    $post_data = search_data;

                    t.http.ajax_request( 'better_results_search', 'post', $post_data, function( response ) {
                        if (response) {
                            localStorage.setItem("better_results", true);

                            t.fl(path.base_url + "better-results?token=" + response.token + "&page=1");
                        } else {
                            t.progress_runner.start( t.search.data, function( status ) {

                                t.http.request( path.base_url+'search.html', 'POST', search_data, 'json', function( response ) {

                                    response = JSON.parse( response );
                                    status.link = response.url;
                                    status.rush = true;

                                } );
                                t.modal.show('searching_popup2');

                            }, null, function( data, status ) {

                                $list.eq( status.current_step ).addClass("active");

                            }, function( data, status ) {

                                t.fl( status.link );

                            } );
                        }
                    });


                }



            },
            input_field: function( $form, name ) {

                return $form.find("[name='" + name + "']")[0]

            },
            funnel_address:function(el,t,o){
                $(el).click(function (){

                    var request = {
                        placeId: $(t.v["search.funnel_address.address"]).val(),
                      };
                      service = new google.maps.places.PlacesService(document.createElement('div'));
                      service.getDetails(request, callback);
                      function callback(place, status) {
                        address_data = {},
                        undefined = 'undefined';
                        place.address_components.forEach( function( data ) {
                            data.types.forEach( function( _data ) {
                                address_data[ _data ] = { long_name: data.long_name, short_name: data.short_name };
                            } );
                        } );
                        t.ras.post_data = {
                            address: place.formatted_address,
                            city: ( typeof address_data.locality != undefined ) ? address_data.locality.long_name : ( typeof address_data.sublocality_level_1 != undefined ) ? address_data.sublocality_level_1.long_name : '',
                            state: ( typeof address_data.administrative_area_level_1 != undefined ) ? address_data.administrative_area_level_1.short_name : '',
                            zip: ( typeof address_data.postal_code != undefined ) ? address_data.postal_code.long_name : '',
                            lat: place.geometry.location.lat(),
                            lng: place.geometry.location.lng(),
                        };
                      t.ras.run_search( t, 1);
                    }

                });
            },
            go: function( el, t, o ) {

                var
					super_admin = t.v,
					$form = $(el).closest(".search-form-2020"),
					$landing = $form.attr('data-landing');

                if ( typeof grecaptcha_executed === "undefined" ) {

                    if ( typeof grecaptcha !== "undefined" ) {

                        grecaptcha.ready( function () {

                            grecaptcha.execute('6LftTMMeAAAAAHodlggyeFfE5vOJRAvyArRZqkZv', { action: 'search' }).then(function (token) {

                                t.search.security.token = token;
                                t.search.security.action = "search";

                            } );

                        } );

                        grecaptcha_executed = true;

                    }

                }
             
                $(el).on( "click", function() {

                    if($landing == 'true'){

                        var first_name = $form.find(".first_name").val();
                        var last_name = $form.find(".last_name").val();
                        var full_name = $form.find(".full_name");
                        
                        if( $form.find(".first_name").val() ){
                            full_name.val(first_name);
                        }

                        if( $form.find(".first_name").val() && $form.find(".last_name").val() ){
                            full_name.val(first_name + ' ' + last_name);
                        } 
                        
                        if($form.find(".first_name").val() && !$form.find(".last_name").val()){
                            $form.find(".scf-tooltip-val").addClass('last_name');
                        } else {
                            $form.find(".scf-tooltip-val").removeClass('last_name');
                        }
                    }
                    
                    var
                        error_elm = $form.find(".anim")[0],
                        tab_type = ( $form.parents('.dashboard-revamp').length == 1 ) ? $form.find(".search-type.active").data('type') : $form.find(".tabs a.active").data('type'),
                        search_type = ($landing == 'true') ? 2 : parseInt( isNaN( tab_type ) ? $form.data('type') : tab_type ),
                        image_error = 'Please upload an image in one of the following formats: .jpg, .gif, .png, .bmp, .tif. Max file size is 10MB',
                        error_count = 0,
                        captcha_resolved = ( typeof t.v['google.recaptcha.key'] != 'undefined' ),
                        validations = {
                            0: [ { field: 'username', error: 'Invalid Username. Correct format: james.smith', validator: 'username' } ],
                            1: [ { field: 'email', error: 'Invalid Email Address. Correct format: james@smith.com', validator: 'email' } ],
                            2: [ { field: 'full_name', error: 'Please enter the First Name and the Last Name', validator: 'first_last_name' } ],
                            3: [ { field: 'phone', error: 'Invalid Phone Number. Correct format: +1-123-456-7890', validator: 'phone' } ],
                            4: [ { field: 'image', error: image_error,error2: 'Please select an image', validator: 'image', selector: 'image[]' } ],
                            5: [ { field: 'address', error: 'Please enter an Address', validator: 'not_empty' } ],
                            6: [ { field: 'first_name', error: 'Please enter the First Name', validator: 'not_empty' } ],
                            7:  [ { field: 'last_name', error: 'Please enter the Last Name', validator: 'not_empty' } ],
                        };

                    if( typeof tab_type == 'undefined') {
                        var 
                            tab_type = $form.find(".tabs a.active").data('type'),
                            search_type = ($landing == 'true') ? 2 : parseInt( isNaN( tab_type ) ? $form.data('type') : tab_type );
                    }
                    
                    if( search_type == 4 ){ $( '.account_pause_active' ).removeClass( 'regular' ).addClass( 'ris' ); } 
                    
                    var pause = $form.find('.tabs').attr('data-pause');
                    
                    if(pause == 'true' && (search_type != 6 || search_type != 4)){
                        t.modal.show( 'account_pause_active' );
                        return false;
                    }
                    
                    if($( ".limited_tokens_user" ).val() == 1 ){
                        $modal_val = "business_limited_tokens";
                    }
                    else {
                        $modal_val = "action_required_social";
                    }
                    
                    if( search_type == 2 && $( ".name_cross_sell_popup" ).val() == 1 && $(".combo_user").val() == 0) { t.modal.show( $modal_val ); return false; }
                    if( search_type == 0 && $( ".username_cross_sell_popup" ).val() == 1 && $(".combo_user").val() == 0) { t.modal.show( $modal_val ); return false; }
                    if( search_type == 1 && $( ".email_cross_sell_popup" ).val() == 1 && $(".combo_user").val() == 0) { t.modal.show( $modal_val ); return false; }
                    if( search_type == 3 && $( ".phone_cross_sell_popup" ).val() == 1 && $(".combo_user").val() == 0) { t.modal.show( $modal_val ); return false; }
                    if( search_type == 5 && $( ".address_cross_sell_popup" ).val() == 1 && $(".combo_user").val() == 0) { t.modal.show( $modal_val ); return false; }
                    if( search_type == 6 && $( ".criminal_cross_sell_popup" ).val() == 1 && $(".combo_user").val() == 0) { t.modal.show( $modal_val ); return false; }
                    if( search_type == 4 && $( ".image_cross_sell_popup" ).val() == 1 && $(".combo_user").val() == 0 ) { t.modal.show( "action_required_ris" ); return false; }

                    if (Object.keys(t.v).length < 3) {
                        t.v = super_admin;
                    }

                    $(".search-form-2020.intermidiate .bulk-upload-popup .images-added-note").show();
                    t.v['search.go'] = el;

                    t.lottie.load( t.v['modal.searching_popup2.animation'], t, o );

                    ( ! captcha_resolved ) && t.search.reset( t );

                    if ( typeof validations[ search_type ] == "object" ) {

                        validations[ search_type ].forEach( function( validation ) {
                            
                            var field = o.input_field( $form, ( typeof validation.selector != 'undefined' ) ? validation.selector : validation.field );
                            
                            if(search_type != 4 && !t.validator[ validation.validator ]( field.value)){
                                t.tooltip.show( error_elm, validation['error'] );
                                $(field).siblings(".scf-tooltip-val").hide();
                                
                                error_count++;
                            }
                            else if (search_type == 4 && ( typeof field.files[0] == 'undefined' )) {

                                t.tooltip.show( error_elm, validation['error2'] );
                                $(field).siblings(".scf-tooltip-val").hide();
                                error_count++;

                            } else if (search_type == 4 && ( typeof field.files[0] != 'undefined' ) && !t.validator[ validation.validator ]( field.value ,field.files[0].size )) {

                                    t.tooltip.show( error_elm, validation['error'] );
                                    $(field).siblings(".scf-tooltip-val").hide();
                                    error_count++;
    
                                }

                        } );

                    }

                    if ( error_count ) return;

                    if ( typeof user_validate_email !== "undefined" && user_validate_email ) {

                        window.location.href = path.base_url + "dashboard.html";
                        return false;

                    }

                    t.search.search_data.search_type = search_type;

                    switch ( search_type ) {

                        case 2:

                            var
                            country = o.input_field( $form, 'country' ).value == 'Select a Country' ? '' : o.input_field( $form, 'country' ).value;
                            modal = ( 'US' == country ) ? 'select_state' : 'select_age';

                            if ( captcha_resolved ) break;
                            
                            t.search.search_data.country = country;
                            t.search.search_data.full_name = o.input_field( $form, 'full_name' ).value;
                        //CSI-8784-new-search-progress-revamp-flow-ab-back-end-development
                        if($(this).data('new_search_progress_revamp')){
                        t.search.search_data.token=t.search.security.token;
                        localStorage.setItem("search_data", JSON.stringify(t.search.search_data));
                        window.location.href = path.base_url+'search-progress';
                        return false;
                        }
                        //end CSI-8784                             
                            if ( $landing == 'true' ) break;

                            t.modal.show( modal );
                            return false;

                        case 5:
                            t.ras.post_data.zip1 = "show_suggestions";
                            t.ras.run_search( t, 1 );
                            return false;

                        case 4:

                            var
                                post_data = new FormData( $form.find('form')[0] ),
                                $progress_bar = $form.find('.list.image'),
                                $progress = $form.find('.scf-progress-bar div'),
                                $progress_wrapper = $form.find('.file-progress-wrapper');

                            if ( typeof t.v['google.recaptcha.ris'] != 'undefined' ) {

                                if ( ! captcha_resolved ) {

                                    t.modal.show('secure_recaptcha');
                                    return;

                                }

                                post_data.append( 'g-recaptcha-response', t.v['google.recaptcha.key'] );

                            }

                            $(".search_input_image_count_uploading").show();
                            $progress_bar.addClass("loading");
                            $progress_wrapper.find(".scf-progress-bar div").css( "width", $progress_wrapper.css("width") );

                            t.http.request( '/search.html', 'POST', post_data, 'JSON', function( response ) {

                                response = JSON.parse( response );
                                
                                if ( !response.has_token && !(typeof response.has_token === 'undefined')) {
                                    window.top.location.href = response.url;
                                }

                                if ( response.image_error ) {

                                    $progress_bar.removeClass("loading");
                                    t.tooltip.show( t.v['search.error'], image_error );
                                    $progress_value.hide();

                                } else {
                                    
                                    t.search.multiple_face_detect.$redirect_url = response.url;
                                    t.search.multiple_face_detect.$report_id = response["queue_status"].report_id;
                                    t.search.improve_image_search.$has_disable_ris_improvement = response["queue_status"].has_disable_ris_improvement;

                                    if(response["queue_status"].multiple_face_detected){
                                        
                                        $("#image-1").parent().css("display","none");
                                        $("#image-2").parent().css("display","none");
                                        $("#image-3").parent().css("display","none");
                                        t.search.multiple_face_detect.$face_count = response["queue_status"].face_count;
                                        for(let c=1; c<=response["queue_status"]["face_count"]; c++){                                    
                                            $("#image-"+c).parent().css("display","block");
                                            $("#image-"+c).attr("src" ,response["queue_status"]["user_upload_path"] + c + ".jpg");
                                        }
                                        t.search.multiple_face_detect.$user_upload_path = response["queue_status"]["user_upload_path"];
                                        t.modal.show( "multiple_faces_detected" );


                                    }
                                    else{
                                        if(response["queue_status"].face_detected && !t.search.improve_image_search.$has_disable_ris_improvement){                                            
                                            $(".improve_image_search .selected_image").attr("src" ,response["queue_status"]["user_upload_path"] + 1 + ".jpg");
                                            $(".improve_image_search .selected_image").css("background-image", "url('"+response["queue_status"]["user_upload_path"] + 1 + ".jpg')");

                                            t.modal.show( "improve_image_search" );
                                        }
                                        else{

                                            if(response["queue_status"].duplicates>0){
                                                $(".bulk-upload-popup .ris-drag-box p.image_duplicates span").text(response["queue_status"].duplicates);
                                                $(".bulk-upload-popup .ris-drag-box p.image_duplicates").show();
                                            }

                                            if (window.self !== window.top) {
                                                // If inside an iframe, redirect the top-level window
                                                window.top.location.href = response.url;
                                            } else {
                                            
                                                // If not inside an iframe, proceed with the normal redirection
                                                window.location = response.url;
                                            }
                                        }
                                    }
                                }

                                }, null, function( progress ) {

                                    if ( progress.lengthComputable ) {

                                        var percentage = parseInt( ( progress.loaded / progress.total ) * 100 );
                                        $progress.css( { width: percentage + "%" } );
                                        $(".bulk-ris-progress span:last-child").text( percentage + "%"  );
                                    }

                            } );
                            return false;

                        case 0:

                            t.search.search_data.username = o.input_field( $form, 'username' ).value;
                            break;

                        case 1:

                            t.search.search_data.email = o.input_field( $form, 'email' ).value;
                            break;

                        case 3:

                            t.search.search_data.phone = o.input_field( $form, 'phone' ).value;
                            break;

                    }

                    t.search.run_search( t.search.search_data, t );

                } );

                $form.find("a.active").click();

            },
            multiple_face_detect:{
                $redirect_url:"",
                $report_id:"",
                $face_count:0,
                $selected_face:0,
                $user_upload_path:"",
                image_selection_change:function(el,t){
                    $(el).on( "click", function() {
                        $(".scf-popup.multiple_faces_detected .uploaded_images div div").removeClass("active");
                        $(this).toggleClass("active");       
                         
                        if($(this).hasClass("active")){
                            $(t.v["search.multiple_face_detect.run_checkbox"]).prop("disabled" , false);
                            $(".scf-popup.multiple_faces_detected .btn").prop("disabled" , false);
                            t.search.multiple_face_detect.$selected_face = $(this).data("image_no");
                        }else{
                            $(t.v["search.multiple_face_detect.run_checkbox"]).prop("disabled" , true);
                            $(".scf-popup.multiple_faces_detected .btn").prop("disabled" , true);
                        }
                    });
                },
                go:function(el ,t){
                    $(el).on( "click", function() {
                        let run_individual_report = 0;
                         if($(t.v["search.multiple_face_detect.run_checkbox"]).is(':checked')){
                            run_individual_report = 1;
                            t.http.ajax_request( 'ris_multiple_face_trigger', 'post', { sid: t.search.multiple_face_detect.$report_id , faces:t.search.multiple_face_detect.$selected_face , run_individual_report:run_individual_report ,face_count:t.search.multiple_face_detect.$face_count,skip:0,wait:0}, function( response ) {
    
                                window.location.href = t.search.multiple_face_detect.$redirect_url; 
                                
                            });
                         }
                         else{
                            var wait = 1;
                            if(!t.search.improve_image_search.$has_disable_ris_improvement){
                                $(".improve_image_search .selected_image").css("background-image", "url('"+ t.search.multiple_face_detect.$user_upload_path + t.search.multiple_face_detect.$selected_face + ".jpg')");
                                $(".improve_image_search .selected_image").attr("src" ,t.search.multiple_face_detect.$user_upload_path + t.search.multiple_face_detect.$selected_face + ".jpg");
                                t.modal.show( "improve_image_search" );
                            }else{
                                wait = 0;
                            }
                            t.http.ajax_request( 'ris_multiple_face_trigger', 'post', { sid: t.search.multiple_face_detect.$report_id , faces:t.search.multiple_face_detect.$selected_face , run_individual_report:run_individual_report ,face_count:t.search.multiple_face_detect.$face_count,skip:0,wait:wait}, function( response ) {
                                if(t.search.improve_image_search.$has_disable_ris_improvement){
                                    window.location.href = t.search.multiple_face_detect.$redirect_url; 
                                }
                            });
                            
                        }
                    });
                },
                skip:function(el ,t){
                    $(el).on( "click", function() {
                        t.http.ajax_request( 'ris_multiple_face_trigger', 'post', { sid: t.search.multiple_face_detect.$report_id , faces:t.search.multiple_face_detect.$selected_face , run_individual_report:0 ,face_count:t.search.multiple_face_detect.$face_count ,skip:1}, function( response ) {

                            window.location.href = t.search.multiple_face_detect.$redirect_url; 
                            
                        });
                    })
                }

            },
            improve_image_search:{
                $step_count:1,
                $has_disable_ris_improvement:false,
                init:function(el ,t){
                    
                $(".improve_image_search .si-close").on("click" , function(){
                    $(this).parent().find("input").val("");
                });
                
                    $(el).find(".select_state").on("change" ,function(){
                        
                        if($(this).find(":selected").val() !== "" && !(typeof $(this).find(":selected").val() === 'undefined') ){
                            t.get_cities.dropdown( t.v['search.improve_image_search.city'], $(this).find(":selected").val() );
                            setTimeout(function() {
                                $(t.v['search.improve_image_search.city']).find('option:first').remove();
                                $(t.v['search.improve_image_search.city']).find('option:first').before($('<option></option>').attr('value', '').text('Select City'));
                                $(t.v['search.improve_image_search.city']).val("")
                            }, 500);
                        }else{
                            $(t.v['search.improve_image_search.city']).prop("disabled" , true)
                            $(t.v['search.improve_image_search.city']).empty();
                            $(t.v['search.improve_image_search.city']).append($('<option ></option>').attr('value', '').text('Select City (Select State First)'));
                        }
                    });
                },
                continue_name:function(el ,t){
                    $(el).click(function(){
                        $(".step-1").hide();
                        $(".step-2 ,.step-nav").show();
                        t.search.improve_image_search.$step_count++;
                        $(t.v["search.improve_image_search.step_count"]).text(t.search.improve_image_search.$step_count);

                        let name = $(t.v["search.improve_image_search.name"]).val();
                        let age = $(t.v["search.improve_image_search.age"]).val();

                        $(".name_display").html( name == "" ? "N/A <i class='si-close-circle na'>" : name +"<i class='si-done-circle ok'>");
                        $(".age_display").html(age == "" ? "N/A <i class='si-close-circle na'>" : age +"<i class='si-done-circle ok'>");
                    });
                },
                continue_location:function(el ,t){
                    $(el).click(function(){
                        $(".step-2").hide();
                        $(".step-3 ,.step-nav").show();
                        t.search.improve_image_search.$step_count++;
                        $(t.v["search.improve_image_search.step_count"]).text(t.search.improve_image_search.$step_count);

                        let state_code = $(t.v["search.improve_image_search.state"]).find(":selected").val()
                        let state = $(t.v["search.improve_image_search.state"]).find(":selected").text()
                        let city = $(t.v["search.improve_image_search.city"]).find(":selected").val()
                        if(state_code == "") {city = ""; state = "";}
                        if(city == "" || (typeof city === 'undefined') ) {city = "";}

                        $(t.v["search.improve_image_search.state_text"]).html( state == "" ? "N/A <i class='si-close-circle na'>" : state +"<i class='si-done-circle ok'>");
                        $(t.v["search.improve_image_search.city_text"]).html( city == "" ? "N/A <i class='si-close-circle na'>" : city +"<i class='si-done-circle ok'>");
                    });
                },
                continue_job:function(el ,t){
                    $(el).click(function(){
                        t.search.improve_image_search.go(el,t);
                    });
                },
                back:function(el ,t){  
                    $(el).click(function(){
                        if(t.search.improve_image_search.$step_count == 2){
                            $(".step-1").show();
                            $(".step-2 , .step-nav").hide();
                        }else if(t.search.improve_image_search.$step_count == 3){
                            $(".step-2 , .step-nav").show();
                            $(".step-3").hide();
                        }
                        t.search.improve_image_search.$step_count--;
                        $(t.v["search.improve_image_search.step_count"]).text(t.search.improve_image_search.$step_count);

                    });
                },
                skip_this:function(el ,t){  
                    $(el).click(function(){
                        if(t.search.improve_image_search.$step_count == 1){
                            $(".step-1").hide();
                            $(".step-2 , .step-nav").show();
                            $(".name_display").html( "N/A <i class='si-close-circle na'>");
                            $(".age_display").html( "N/A <i class='si-close-circle na'>");

                        }else if (t.search.improve_image_search.$step_count == 2){
                            $(".step-2").hide();
                            $(".step-3 , .step-nav").show();
                            $(t.v["search.improve_image_search.state_text"]).html( "N/A <i class='si-close-circle na'>" );
                            $(t.v["search.improve_image_search.city_text"]).html( "N/A <i class='si-close-circle na'>" );
                        }else if (t.search.improve_image_search.$step_count == 3){
                            t.search.improve_image_search.go(el,t);
                            return true;
                        }
                        t.search.improve_image_search.$step_count++;
                        $(t.v["search.improve_image_search.step_count"]).text(t.search.improve_image_search.$step_count);

                    });
                },
                skip_all:function(el ,t){  
                    $(el).click(function(){
                       t.search.improve_image_search.go(el,t);
                    });
                },
                go:function(el ,t){
                    t.http.ajax_request( 'improve_image_search', 'post', { 
                        sid:t.search.multiple_face_detect.$report_id,
                        image_name:$(t.v["search.improve_image_search.name"]).val(),
                        image_age:$(t.v["search.improve_image_search.age"]).val(),
                        image_city:$(t.v["search.improve_image_search.city"]).val(),
                        image_state:$(t.v["search.improve_image_search.state"]).val(),
                        image_job:$(t.v["search.improve_image_search.job_title"]).val(),
                        dont_show_again:$(t.v["search.improve_image_search.dont_show_again"]).is(':checked') 
                    }, function( response ) {
    
                        window.location.href = t.search.multiple_face_detect.$redirect_url; 
                        
                    });
                }
            },
            run_image_url: function( el, t, o ) {

                $(el).on( "click", function() {

                    var $this = $(this),
                        image_url = $this.data( "url" );

                    $this.addClass( "loading" );
                    
                    t.http.ajax_request( 'run_image_url', 'post', { image_url: image_url }, function( response ) {

                        if ( ! response.status ) {
                            $this.removeClass("loading");
                            alert( "Invalid Image!" );                            
                        } else window.location.href = response.url;
                        
                    });


                });

            },
            run_search_specialist_address: function( el, t, o ) {

                $(el).on( "click", function() {
                    var $this = $(this),
                        search_value = $("input[name='"+ $this.data( "value" ) +"']").val();
                        $(".address_search_menue").click();
                        $("input[name='address']").val(search_value);
                        $(".go").click();
                });
            },
            run_search_specialist: function( el, t ) {

                $(el).on( "click", function() {

                    var $this = $(el);
                    /* refer form_run_search   SCF::js_controller("search.form_run_search")*/
                    var data_type = $this.data("type");
                    var search_value = $("input[name='"+ $this.data( "value" ) +"']").val();
                    

                    
                    var full_name = "",
                        first_name = "",
                        middle_name = "",
                        last_name = "",
                        country = "",
                        state = "",
                        city = "",
                        age = "",
                        action = "";

                    if(data_type == "name") {
                        search_type = 2;
                        full_name = search_value;
                        state = "Select a State";
                        action = "search";
                    }else if(data_type == "email"){
                        search_type = 1;
                        t.search.search_data.email = search_value;
                    }else if(data_type == "phone"){
                        search_type = 3;
                        t.search.search_data.phone = search_value;
                    }

                        t.search.search_data.search_type = search_type;
                        t.search.search_data.full_name = full_name;
                        t.search.search_data.first_name = first_name;
                        t.search.search_data.middle_name = middle_name;
                        t.search.search_data.last_name = last_name;
                        t.search.search_data.country = country;
                        t.search.search_data.state = state;
                        t.search.search_data.city = city;
                        t.search.search_data.age = age;
                        t.search.search_data.action = action;
                        
                        
                        t.search.run_search_ns( t.search.search_data, t );
  
                });

            },
            ris_popup: function( el, t, o ) {

                $(el).on( "click", function() {

                    var $this = $(this),
                        image_url = $this.data( "url" );

                    $this.addClass( "loading" );
                    
                    t.http.ajax_request( 'run_image_url', 'post', { image_url: image_url }, function( response ) {

                        if ( ! response.status ) {
                            $this.removeClass("loading");
                            alert( "Invalid Image!" );                            
                        } else window.location.href = response.url;
                        
                    });


                });

            },
            report_scroll: function() {
                var
                    $form = $(".search_compact_2020 .search-form-2020"),
                    $tab = $form.find(".tabs"),
                    $tab_ras = $tab.find("a[data-type='5']"),
                    $tab_active = $tab.find(".active-tab"),
                    $tab_rest = $tab.find(".hide-tabs"),
                    $tab_btns = $tab.find("a"),
                    $tab_list = $form.find(".list");
                    is_full = $form.closest(".scf-full-search").length,
                    is_mobile = $form.closest(".search_mb_2020").length,
                    $ras_on = false
                    $saved_tab = "",
                    $saved_input = "",
                    address = $('.report-box-location.report-box');

                if ($(window).width() > 992) {
                    
                    $(".scf_2020_style #header_2020.compact_v2").addClass("fixed");
                    $(".scf_2020_style").addClass("fixed");
                    
                }

                if (address.length) {
                    
                    $(window).on('scroll',function(){ 
                        top_address = address.offset().top;
                        bottom_address = $('.report-box-location.report-box').offset().top + $('.report-box-location.report-box').height();
                        current = $(document).scrollTop();

                        if (current > top_address && current < bottom_address ) {
                            
                            if ( !is_full && !$ras_on ) {

                                $ras_on = true

                                var $btn = $tab_active.find("a");

                                $saved_tab = $btn;
                                $saved_input = $form.find(".list.active");

                                $btn.removeClass("active");
                                $tab_ras.addClass("active");

                                if ( ! is_mobile ) {

                                    $tab_rest.prepend( $btn );
                                    $tab_active.append( $tab_ras );

                                }

                                $tab_list.removeClass('active').eq( parseInt( $tab_ras.data("item") ) ).addClass('active');
                                return false;
        
                            }

                        } else {
                            
                            if ($ras_on) {
                                
                                $ras_on = false;

                                $tab_ras.removeClass("active");
                                $saved_tab.addClass("active");

                                if ( ! is_mobile ) {

                                    $tab_rest.prepend( $tab_ras );
                                    $tab_active.append( $saved_tab );

                                }

                                $tab_list.removeClass('active').eq( parseInt( $saved_tab.data("item") ) ).addClass('active');
                                return false;

                            }

                        }                     
    
                        
                    });

                }



            },
            // ab_us_only
            go_ns: function( el, t, o ) {

                var $form = $(el).closest(".search-form-2020");

                $(el).on( "click", function() {

                    var
                        error_elm = $form.find(".anim")[0],
                        tab_type = $form.find(".tabs a.active").data('type'),
                        search_type = parseInt( isNaN( tab_type ) ? $form.data('type') : tab_type ),
                        image_error = 'Please upload an image in one of the following formats: .jpg, .gif, .png, .bmp, .tif. Max file size is 10MB',
                        error_count = 0,
                        captcha_resolved = ( typeof t.v['google.recaptcha.key'] != 'undefined' ),
                        validations = {
                            0: [ { field: 'username', error: 'Invalid Username. Correct format: james.smith', validator: 'username' } ],
                            1: [ { field: 'email', error: 'Invalid Email Address. Correct format: james@smith.com', validator: 'email' } ],
                            2: [ { field: 'full_name', error: 'Please enter the First Name and the Last Name', validator: 'first_last_name' } ],
                            3: [ { field: 'phone', error: 'Invalid Phone Number. Correct format: +1-123-456-7890', validator: 'phone' } ],
                            4: [ { field: 'image', error: image_error, validator: 'image', selector: 'image[]' } ],
                            5: [ { field: 'address', error: 'Please enter an Address', validator: 'not_empty' } ],
                        };

                    if( search_type == 2 && $( ".name_cross_sell_popup" ).val() == 1 ) { t.modal.show( "action_required_social" ); return false; }
                    if( search_type == 0 && $( ".username_cross_sell_popup" ).val() == 1 ) { t.modal.show( "action_required_social" ); return false; }
                    if( search_type == 1 && $( ".email_cross_sell_popup" ).val() == 1 ) { t.modal.show( "action_required_social" ); return false; }
                    if( search_type == 3 && $( ".phone_cross_sell_popup" ).val() == 1 ) { t.modal.show( "action_required_social" ); return false; }
                    if( search_type == 5 && $( ".address_cross_sell_popup" ).val() == 1 ) { t.modal.show( "action_required_social" ); return false; }
                    if( search_type == 6 && $( ".criminal_cross_sell_popup" ).val() == 1 ) { t.modal.show( "action_required_social" ); return false; }
                    if( search_type == 4 && $( ".image_cross_sell_popup" ).val() == 1 ) { t.modal.show( "action_required_ris" ); return false; }

                    t.v['search.go'] = el;
                    t.lottie.load( t.v['modal.searching_popup2.animation'], t, o );

                    ( ! captcha_resolved ) && t.search.reset( t );

                    if ( typeof validations[ search_type ] == "object" ) {

                        validations[ search_type ].forEach( function( validation ) {

                            var field = o.input_field( $form, ( typeof validation.selector != 'undefined' ) ? validation.selector : validation.field );
                            if ( ! t.validator[ validation.validator ]( field.value ) ) {

                                t.tooltip.show( error_elm, validation['error'] );
                                $(field).siblings(".scf-tooltip-val").remove();
                                error_count++;

                            }

                        } );

                    }

                    if ( error_count ) return;

                    if ( typeof user_validate_email !== "undefined" && user_validate_email ) {

                        window.location.href = path.base_url + "dashboard.html";
                        return false;

                    }

                    t.search.search_data.search_type = search_type;

                    switch ( search_type ) {

                        case 2:
                            t.search.search_data.full_name = o.input_field( $form, 'full_name' ).value;

                            $post_data = t.search.search_data;

                            if ( captcha_resolved ) break;

                            t.http.ajax_request( 'search_filtering', 'post', $post_data, function( response ) {
                                if (response) {
                                    t.fl(path.base_url + "search-filtering?token=" + response.token);
                                } else {
                                    t.fl(path.base_url);
                                }
                            });

                            return false;

                        case 5:
                            t.ras.run_search( t, 1 );
                            return false;

                        case 4:

                            var
                                post_data = new FormData( $form.find('form')[0] ),
                                $progress_bar = $form.find('.list.image'),
                                $progress = $form.find('.file-progress'),
                                $progress_wrapper = $form.find('.file-progress-wrapper');

                            if ( typeof t.v['google.recaptcha.ris'] != 'undefined' ) {

                                if ( ! captcha_resolved ) {

                                    t.modal.show('secure_recaptcha');
                                    return;

                                }

                                post_data.append( 'g-recaptcha-response', t.v['google.recaptcha.key'] );

                            }

                            $progress_bar.addClass("loading");
                            $progress_wrapper.find(".file-progress-value").css( "width", $progress_wrapper.css("width") );

                            t.http.request( '/search.html', 'POST', post_data, 'JSON', function( response ) {

                                response = JSON.parse( response );
                                if ( response.image_error ) {

                                    $progress_bar.removeClass("loading");
                                    t.tooltip.show( t.v['search.error'], image_error );
                                    $progress_value.hide();

                                } else window.location = response.url;

                                }, null, function( progress ) {

                                    if ( progress.lengthComputable ) {

                                        var percentage = parseInt( ( progress.loaded / progress.total ) * 100 );
                                        $progress.css( { width: percentage + "%" } );

                                    }

                            } );
                            return false;

                        case 0:

                            t.search.search_data.username = o.input_field( $form, 'username' ).value;
                            break;

                        case 1:

                            t.search.search_data.email = o.input_field( $form, 'email' ).value;
                            break;

                        case 3:

                            t.search.search_data.phone = o.input_field( $form, 'phone' ).value;
                            break;

                    }

                    t.search.run_search( t.search.search_data, t );

                } );

                $form.find("a.active").click();

            },
            form_run_search: function( el, t ) {

                var $this = $(el).on( "click", function() {

                    var type = $this.parents(".report-box").data("type"),
                        query = $this.data("query"),
                        form = t.v['search.click_form'];
                        form_ras = t.v['search.click_form_ras'];

                    form.search_type.value = type;
					form_ras.search_type.value = type;
                    form_ras.address.value = form.full_name.value = form.phone.value = form.email.value = form.username.value = '';

                    switch ( type ) {

                        case 0:
                            form.username.value = query;

                        case 1:
                            form.email.value = query;

                        case 2:
                            form.full_name.value = query;

                        case 3:
                            form.phone.value = query;

                        case 5:
                            form_ras.address.value = query;  

                    }
					
                    if (type == 5) {
                        form_ras.submit();
                    } else {
                        form.submit();
                    }

                } );

            },
            input: {
                all: function( el, t ) {
                    var
                        event = function() {

                            $(this).siblings("label").remove().end().off( "click", event );

                        };

                        $(el).find("input").on( "click", event );

                        $(el).find("input").on( "click", function(){
                            if(!$(this).parents('.list').hasClass('image') && $(this).val() == ''){
                                $(this).parents('.list').siblings(".search-example").fadeIn();
                            }
                        } );

                        $(el).find("input").on("change paste keyup", function() {
                            if($(this).val() == ''){
                                $(this).parents('.list').siblings(".search-example").fadeIn();
                            } else {
                                $(this).parents('.list').siblings(".search-example").fadeOut();
                            }
                        });

                },
                file_select:function(el,t){
                    $(el).click(function() {
                        $(".bulk-upload-popup").show();
                        //$(".scf-full-search .row.list.image").hide();
                        //$(".scf-full-search .go").hide();
                        $(".scf-full-search .go").not(".expand-scf-db-search .scf-full-search .go").hide();
                        $(".scf-full-search .row.list.image").not(".expand-scf-db-search .scf-full-search .row.list.image").hide();

                    });
                },
                init: function( el, t ) {
                    browse_box = $(el).find('.ris-drag-box#browse');
                    browse_box.on(
                        'dragover',
                        function(e) {
                            e.preventDefault();
                            e.stopPropagation();
                            browse_box.css("border", "3px dashed #0F63EC !important");
                        });
                    browse_box.on(
                        'dragleave ',
                        function(e) {
                            e.preventDefault();
                            e.stopPropagation();
                            browse_box.css("border", "1px dashed #0F63EC");
                        });
    
                     browse_box.on(
                        'drop',
                        function(event){
                            if(event.originalEvent.dataTransfer){
                                if(event.originalEvent.dataTransfer.files.length) {
                                    event.preventDefault();
                                    event.stopPropagation();
                                    var max_files = $(this).find("input[type=file]").attr('max-files');
                                    t.search.input.image_add_array(el, t ,event.originalEvent.dataTransfer.files,max_files);
                                    browse_box.css("border", "1px dashed #0F63EC");
                                }   
                            }
                        });
                },

                $images:[],
                $duplicate_image_count:0,
                $toggled_status:"none",
                image: function( el, t ) {
                    $(el).on( 'change', function(event) {
                        const file = event.target.files;             
                        const max_files = $(this).attr('max-files');
                        t.search.input.image_add_array( el , t ,file , max_files);
                    });
                    $(el).on( 'click', function(event) {
                        $(this).val('');
                    });
                },
                image_dashboard_widget: function( el, t ) {
                    $(el).on( 'change', function(event) {
                        const file = event.target.files;             
                        const max_files = $(this).attr('max-files');
                        $("#btn_image_dashboard_widget").click();

                    });
                    $(el).on( 'click', function(event) {
                        $(this).val('');
                    });
                },
                image_single:function( el, t ){
                    var $form = $(el).closest(".search-form-2020");
                    $(el).on( 'change', function() {
                        $form.find(".go").click();

                    } );
                },
                image_add_array:function( el , t , file , max_files) { 
                    if (file) {
                        $(file).each(function(i, file) {  
                            if ( ! t.validator.image( file.name ,file.size) ) {
                                $(".scf-tooltip-val.anim").hide();
                                t.tooltip.show( $(".scf-tooltip-val"), "Please upload an image in one of the following formats: .jpg, .gif, .png, .bmp, .tif. Max file size is 10MB"  );
                                
                            }else{
                                const reader = new FileReader();
                                reader.onloadend = function() {
                                    let total_images = t.search.input.$images.length;
                                    if($(".search-form-2020.intermidiate .bulk-upload-popup #bulk_count").val() >1){
                                        total_images = t.search.input.$images.length + parseInt($(".search-form-2020.intermidiate .bulk-upload-popup #bulk_count").val());
                                    }   

                                    if(total_images < max_files){  
                                        if(uploaded_images.includes(reader.result)){
                                            t.search.input.$duplicate_image_count += 1;
                                            $(".bulk-upload-popup .ris-drag-box p.image_duplicates span").text(t.search.input.$duplicate_image_count);
                                            $(".bulk-upload-popup .ris-drag-box p.image_duplicates").show();
                                        }
                                        else{
                                            t.search.input.$images.push(reader.result);
                                            t.search.input.append_image(el, t, max_files);
                                        }
                                    }
                                }
                                reader.readAsDataURL(file);
                            }
                        });
                    }
                },
                bulk_upload_hide: function( el, t ) {
                    $(el).click(function() {
                        $(".bulk-upload-popup:not(.search-form-2020.intermidiate .bulk-upload-popup)").hide();
                        //$(".scf-full-search .row.list.image").show();
                        $(".scf-full-search .row.list.image").not(".expand-scf-db-search .scf-full-search .row.list.image").show();
                        $(".scf-full-search .go").show();
                    });
                },
                append_image: function( el, t ) {
                    let current_count = t.search.input.$images.length;
                    t.search.input.$images = [...new Set(t.search.input.$images)];

                    let current_duplicate_count = current_count - t.search.input.$images.length; 
                    if(current_duplicate_count>0){
                        t.search.input.$duplicate_image_count = t.search.input.$duplicate_image_count + current_duplicate_count;
                    }
                    $(".bulk-upload-popup .ris-drag-box p.image_duplicates span").text(t.search.input.$duplicate_image_count);
                    if(t.search.input.$duplicate_image_count > 0){ $(".bulk-upload-popup .ris-drag-box p.image_duplicates").show(); }
                    
                    if(t.search.input.$images.length == 0){
                        $(".uploaded-images").hide();
                        $(".btn-dark-green").addClass("disabled");
                        $(".btn-dark-green").prop("disabled" , true);
                    }else{
                        $(".uploaded-images").show();
                        $(".btn-dark-green").prop("disabled" , false);
                        $(".btn-dark-green").removeClass("disabled");
                    }

                    if(t.search.input.$images.length == 20){
                        $(".bulk-upload-popup .ris-drag-box .maximum_limit_reached").show();
                        $(".bulk-upload-popup .ris-drag-box .upload_image").hide();
                    }else{
                        $(".bulk-upload-popup .ris-drag-box .maximum_limit_reached").hide();
                        $(".bulk-upload-popup .ris-drag-box .upload_image").show();
                    }

                    $(".uploaded-images ul").empty();
                    t.search.input.$images.forEach(function(file,i) {
                        if(i < 7){
                            $(".uploaded-images ul").append(`<li><img src="`+ file +`" style="background-image: url(`+file+`)" alt="" /><span onclick="$(this).parent().remove();scf.search.input.$images.splice(`+ i +`, 1);scf.search.input.append_image(null,scf);" class="si-close-circle"></span></li>`);
                        }
                        else if(i ==7){
                            $(".uploaded-images ul").append(`<li style="display:`+ t.search.input.$toggled_status +`"><img src="`+ file +`" style="background-image: url(`+file+`)" alt="" /><span onclick="$(this).parent().remove();scf.search.input.$images.splice(`+ i +`, 1);scf.search.input.append_image(null,scf);" class="si-close-circle"></span></li>`);
                            if(t.search.input.$toggled_status !== ''){
                                $(".uploaded-images ul").append(`<li onclick="scf.search.input.expan_images(this, scf);"><img src="`+ file +`" style="background-image: url(`+file+`)" alt="" /> <span class="more_count">+`+(t.search.input.$images.length - 7) +`</span></li>`);
                            }
                        }else{
                            $(".uploaded-images ul").append(`<li style="display:`+ t.search.input.$toggled_status +`"><img src="`+ file +`" style="background-image: url(`+file+`)" alt="" /><span onclick="$(this).parent().remove();scf.search.input.$images.splice(`+ i +`, 1);scf.search.input.append_image(null,scf);" class="si-close-circle"></span></li>`);
                        }
                        
                        if(i == 0){ $(".multiple_face_disabled").hide();}else{$(".multiple_face_disabled").show();}
                    })
                    $(".search_input_image_count").text(t.search.input.$images.length);
                    if($(".search-form-2020.intermidiate .bulk-upload-popup #bulk_count").val() >1){
                        let total_images = t.search.input.$images.length + parseInt($(".search-form-2020.intermidiate .bulk-upload-popup #bulk_count").val());
                        $(".search_input_image_count").text(total_images);
                        $(".uploading_search_input_image_count").text(t.search.input.$images.length);
                        $(".search-form-2020.intermidiate .bulk-upload-popup .images-added-note span.count-new-added").text(t.search.input.$images.length);
                        if(total_images == 20){
                            $(".bulk-upload-popup .ris-drag-box .maximum_limit_reached").show();
                            $(".bulk-upload-popup .ris-drag-box .upload_image").hide();
                        }else{
                            $(".bulk-upload-popup .ris-drag-box .maximum_limit_reached").hide();
                            $(".bulk-upload-popup .ris-drag-box .upload_image").show();

                        }
                    }


                    const dataTransfer = new DataTransfer();
                    $.each(t.search.input.$images, function(index, base64) {
                        // Remove the data URL prefix (e.g., 'data:image/png;base64,')
                        const base64WithoutPrefix = base64.replace(/^data:image\/(png|jpeg|jpg);base64,/, '');
                      
                        // Convert the base64 image to a Blob object
                        const blob = base64ToBlob(base64WithoutPrefix);
                      
                        // Create a new file name (optional)
                        const fileName = 'image_' + index + '.png';
                      
                        // Create a new file from the Blob
                        const file = new File([blob], fileName, { type: 'image/png' });
                      
                        // Add the file to the DataTransfer object
                        dataTransfer.items.add(file);
                      });
                      
                      
                      // Function to convert base64 to Blob
                      function base64ToBlob(base64) {
                        const byteCharacters = atob(base64);
                            const byteArrays = new Uint8Array(byteCharacters.length);

                            for (let i = 0; i < byteCharacters.length; i++) {
                                byteArrays[i] = byteCharacters.charCodeAt(i);
                            }

                            return new Blob([byteArrays], { type: 'image/png' });
                      }
                    // Set the DataTransfer object to the file upload element
                    $(".image_search_file_upload").prop("files", dataTransfer.files);
                },
                expan_images:function(el ,t){
                    $('.uploaded-images ul li').show();
                    $(el).remove();
                    t.search.input.$toggled_status='';
                },
                phone: function( el, t ) {

                    $(el).input_phone_number() ;

                },
                address: function( el, t ) {
                    $(el).on("mouseover", function(){
                        $(el).attr("autocomplete","new-address");
                    });

                    $(el).on("keyup", function(){
                        t.http.ajax_request('update_gmaps_api_count', 'post', null, function( response ){});
                    });

                    t.loader.google_maps( function() {
                        var
                            places = [
                                new google.maps.places.Autocomplete( el, { types: [ 'address' ], componentRestrictions: { country: "us" } } ),
                            ],
                            callback = function() {
                                t.ras.address_changed( this, t );
                            };

                        if ( typeof t.v['ras.input'] != "undefined" ) {
                            places.push( new google.maps.places.Autocomplete( t.v['ras.input'], { types: [ 'address' ], componentRestrictions: { country: "us" } } ) );
                            t.ras.$input_field = $(t.v['ras.input']);
                            t.ras.tool_tip = t.ras.$input_field.siblings("label").get(0);
                        }

                        ( typeof places[0] != 'undefined' ) && places[0].addListener('place_changed', callback);
                        ( typeof places[1] != 'undefined' ) && places[1].addListener('place_changed', callback);

                    });

                },
                affiliate_ras: function (el, t) {
                    // Function to get query parameter
                     function getQueryParameter(name) {
                         let urlParams = new URLSearchParams(window.location.search);
                         return urlParams.get(name);
                     }
 
                     // Get the address from the URL query parameters
                     let address = getQueryParameter('address');
                     if (address) {
                         // Select the address input field using jQuery
                         let $addressInput = $('input[name="address"]');
 
                         if ($addressInput.length) {
                             // Autofill the address input field
                             $addressInput.val(address);
 
                             // Trigger the input and change events
                             $addressInput.trigger('input');
                             $addressInput.trigger('change');
 
                             // Find the button element to trigger the search
                             setTimeout(function() {
                                 // Find the button element to trigger the search
                                 let $searchButton = $('.go');
                                 if ($searchButton.length) {
                                     $searchButton.click();
                                 } 
                             }, 500); 
                         } 
                     }   
                 }
            },
            // AB Test: ss_ultra_focus : Start
            progress: {

                init: function( el, t, o ) {
                    var
                        $this = $(el),
                        $sections = $this.find(".progress-group"),
                        $v = {},
                        $icons = null,
                        icon_len = 0,
                        icon_adj = 100,
                        $report_items = null,
                        report_items_len = 0,
                        report_items_arr = [0, 1, 2, 3, 4, 5],
                        idi_records = ["bankruptcy","judgment","lien","professional","criminal"],
                        idi_records_found = false,
                        idi_testing = $(".progress-group.premium_idi_found").length,
                        gp_token = $this.data('token');

                    t.http.request( '/search.html', 'post', { gp_token: 1, token: gp_token }, 'json', function( response ) {
                        var $v = {};

                        t.modal.ref['report_ready2'].extract_vars( $v );

                        response = JSON.parse( response );

                        $.each( response.counts, function( field, count ) {
                            
                            if($v[ field ]){
                                if ( count ) $v[ field ].text( count )
                                else $v[ field ].closest(".row").remove();
                            }

                            //remove init idi records $single_results_field_list_for_counts

                            // if( ( $.inArray( field, idi_records ) !== -1 ) && count ) {
                            //     idi_records_found = true;
                            //     $(".premium_idi_found ul").append( '<li>' + field.toUpperCase() + ' <i class="si-done"></i></li>' );
                            // }

                        } );
                        $v.link.attr( "data-target", response.url );

                        if ( typeof response.images == "object" && response.images.length ) {

                            response.images.forEach( function( v, i ) { 

                                if ($v.blur_img && $v.blur_img.length) {  // Check if $v.blur_img exists and is not empty
                                    var $img = null;
                                
                                    if (i != 0) {
                                        $img = $v.blur_img.clone();
                                        $v.blur_img.after($img);
                                    } else {
                                        $img = $v.blur_img;
                                    }
                                    
                                    $img.find("img").attr("src", v).css({ "background-image": "url(" + v + ")" });
                                }
                            } );

                        } else {
                            if ($v.image_list && $v.image_list.length) {  // Check if $v.image_list exists and is not empty
                                $v.image_list.remove();
                            }
                        }

                    } );

                    t.progress_runner.start_multi_level( o.progress.data, null, function( data, status ) {
                        $v.progress_bar.last().css( { width: status.percentage + '%' } );
                        $v.progress_value.last().text( status.percentage + '%' );

                        if ( icon_len && ( status.percentage % icon_len == 0 ) ) {

                            var $parent = $icons.parent();
                            $icons.eq(0).remove();
                            $icons = $parent.find("img");

                            if ( $icons.length == icon_adj ) icon_len++;

                        }

                        if ( report_items_len && ( status.percentage % report_items_len == 0 ) ) {
                            random_i = Math.floor(Math.random() * report_items_arr.length);
                            $report_items.eq(report_items_arr[random_i]).fadeOut(700).fadeIn(700).fadeOut(700).fadeIn(700, function () {
                            $(this).children().fadeTo(1200, "1");
                            });
                            report_items_arr.splice(random_i, 1);
                        }

                    }, function( data, status ) {

                        $v.progress_text.text( data.text + "..." );
                        report_items_arr = [0, 1, 2, 3, 4, 5];


                    }, null, function ( data ) {

                        var $sec = $sections.eq( data.index ).show().extract_vars( $v );

                            if ( data.index > 0 ) $sec.scrollTo();

                            var                                    
                                url = new URL(window.location);
                                url.searchParams.set('ss_index', data.index);
                                window.history.pushState({}, '', url);

                                // $("#header_2020").hide();

	                    // AB Test: ss_ultra_focus : End

                            $report_items = $sec.find(".report-items li");
                            report_items_len = Math.floor( 100 / ($report_items.length + 1) );

                            $icons = $sec.find(".animation-img img");
                            icon_len = Math.floor( 100 / $icons.length );
                            icon_adj = 100 - ( icon_len * $icons.length );

                            t.http.ajax_request( 'baselines_ss_' + data.index, 'post');

                    }, function() {

                        if( idi_testing ) {
                            $(".premium_idi_found").show().scrollTo();
                            t.http.ajax_request( 'progress_ss_idi', 'post');
                        }
                        else t.modal.show('report_ready2');
                                                
                        t.http.ajax_request( 'baselines_ss_report', 'post');

                    } );

                },
                data: [
                    {
                        data: [
                            { text: "Searching state data sources", speed: 230, percentage: 100 },
                        ],
                        index: 0,
                    },
                    {
                        data: [
                            { text: "Searching Dating Sites", speed: 230, percentage: 100 },
                        ],
                        index: 1,
                    },
                    {
                        data: [
                            { text: "Searching Dating Apps", speed: 230, percentage: 100 },
                        ],
                        index: 2,
                    },
                    {
                        data: [
                            { text: "Searching Chat Apps", speed: 230, percentage: 100 },
                        ],
                        index: 3,
                    },
                    {
                        data: [
                            { text: "Searching Social Media", speed: 230, percentage: 100 },
                        ],
                        index: 4,
                    },
                    {
                        data: [
                            { text: "Organizing all the data retrieved from premium sources", speed: 300, percentage: 100 },
                        ],
                        index: 5,
                    },
                ],
                premuim_data:  function( el, t ) {

                    $(el).on( "click", function() {
    
                        var $this = $(this);
                            id = $this.data( "id" );

                        if( id == "add" ) t.http.ajax_request( 'set_regular_premium_combine', 'post' );
                        else t.http.ajax_request( 'unset_regular_premium_combine', 'post' );

                        t.modal.show( "report_ready2" );
    
                    });
                }
            }, 
            revamp:  function( el, t ) {
               
                function setp6_start(){
                    setTimeout(function () { 
                        $('#step4').fadeOut(); 
                        setTimeout(function () { 
                            $('#step6').fadeIn(); 
                            t.http.ajax_request( "revamp_step", 'post', {"step": "6"}, function( response ) {
                                if (response.status) {
                                    //console.log(response);
                                }
                            }); 
    
                          }, 500);
                      }, 3000);
                }

                t.http.ajax_request( "revamp_step", 'post', {"step": "1"}, function( response ) {
                    if (response.status) {
                        //console.log(response);
                    }
                });
                t.search.search_data=JSON.parse(localStorage.getItem('search_data'));
                if(typeof t.search.search_data == "undefined"){
                window.location='/'
                }
                $('.name-span').text(t.search.search_data.full_name);
                t.search.search_data['interested'] = [];
                $('.revamp_inputs').on( "change", function() {
                    var input_name=$(this).attr('name');
                    if(input_name=='state'){
                        t.search.search_data['city'] = '';
                        t.search.search_data['state'] =   $(this).val();
                      
                        t.get_cities.dropdown( t.v['search.select.city'],  $(this).val(),2 )
                    }else if(input_name=='city' && $('#city-div').is(":visible")){
                        if($(this).val()=='' || $(this).val()==null){
                   
                            $('#step3-btn').addClass('disabled');
                         }else{
                            
                            $('#step3-btn').removeClass('disabled');
                         }
                    }else{
                        t.search.search_data[input_name] = $(this).val();
                    }
             
                } );
                $('#state-select').on('change',function () {

                        $('.search_progress_revamp .content-box .step img').css('transform', 'scale(0.7)');
                 //   $('#map_icon').effect("size", { to: { width: 102, height: 120 } },1000);  
                
                 if($(this).val()==null){
                   
                    $('#step3-btn').addClass('disabled');
                 }else{
                    
                    $('#step3-btn').removeClass('disabled');
                 }
                  });


                  $('.radio input').on('click',function () {                  
                 $('#step5-btn').removeClass('disabled');
                  });
                //flow


                //code before the pause
                if($(el).data('starting-step')!=6){
                setTimeout(function () {
                    
                  $('#step1').fadeOut();

                  //  setTimeout(function () {
                        //reomved on david's feed back
                        // $('#step2').fadeIn();
                        // t.http.ajax_request( "revamp_step", 'post', {"step": "2"}, function( response ) {
                        //     if (response.status) {
                        //         //console.log(response);
                        //     }
                        // });
                        // var $numberElement2 = $('.search_progress_revamp .content-box .step2 h2 span.number');
                        // var endValue2 = parseInt($numberElement2.data('value'), 10);
                        // var startValue2 = parseInt($numberElement2.text(), 10);
                        // var duration2 = 1000;
                        // animateNumber($numberElement2, startValue2, endValue2, duration2);

                        setTimeout(function () {
                            $('#step2').fadeOut();
                            setTimeout(function () {
                              
                                //if country is not US skip some steps
                                if (t.search.search_data['country'] == 'US') {
                                    $('#step3').fadeIn();

                                    t.http.ajax_request( "revamp_step", 'post', {"step": "state"}, function( response ) {
                                        if (response.status) {
                                            //console.log(response);
                                        }
                                    });
                                } else {
                                    $('#step5').fadeIn();
                                    t.http.ajax_request( "revamp_step", 'post', {"step": "age"}, function( response ) {
                                        if (response.status) {
                                            //console.log(response);
                                        }
                                    });
                                }
                            }, 500);
                        }, 0);
                   // }, 0);
                }, 6000);

            }else{
//setp6
//setp6_start();
            }

                  $('.stepbtn').click( function() {
                    if($(this).hasClass('disabled')){
                        return false;
                    }
                    if($(this).hasClass('btn-bordered')){
                        $(this).addClass('loading-green');
                    }else{
                        $(this).addClass('loading');
                    }
                    
                    if($('#state-div').is(":visible") && $(this).text()=='I am not sure.'){
                        t.search.search_data['city'] = '';
                        t.search.search_data['state'] = '';

                    }else if($('#city-div').is(":visible") && $(this).text()=='I am not sure.'){
                        t.search.search_data['city'] = '';
                    }else if($('#state-div').is(":visible") && t.search.search_data['state']!=''){
                        $('.search_progress_revamp .content-box .step img').css('transform', 'scale(1)');
                        $('#state-div').hide();
                        $('#city-div').show();
                        $(this).removeClass('loading');
                        $('#step3-btn').addClass('disabled');
                        return false;
                    }
                //    if($(this).text()=='I am not sure.'){
                //     t.search.search_data['city'] = '';
                //     t.search.search_data['state'] = '';
                //    }
                   

                    //setTimeout(function () { 
                        $('#step3').fadeOut(); 
                    //    setTimeout(function () { 

                            // $('#step4').fadeIn();  
                            // t.http.ajax_request( "revamp_step", 'post', {"step": "good_going"}, function( response ) {
                            //     if (response.status) {
                            //         //console.log(response);
                            //     }
                            // });                           
                            // var $numberElement = $('.search_progress_revamp .content-box .step4 h2 span.number');
                            // var endValue = parseInt($numberElement.data('value'), 10);
                            // var startValue = parseInt($numberElement.text(), 10);
                            // var duration = 1000;
                            // animateNumber($numberElement, startValue, endValue, duration);
                    //        setTimeout(function () { 
                    //            $('#step4').fadeOut();   
                                setTimeout(function () { 
                                    $('#step5').fadeIn();  
                                    t.http.ajax_request( "revamp_step", 'post', {"step": "age"}, function( response ) {
                                        if (response.status) {
                                            //console.log(response);
                                        }
                                    });                                   
                                  }, 500);
                     //         }, 4000);
                    //      }, 500);
                    //  }, 1000);

                } );

                $('.stepbtn2').click( function() {
                    if($(this).hasClass('btn-bordered')){
                        $(this).addClass('loading-green');
                    }else{
                        $(this).addClass('loading');
                    }
                    if($(this).text()=='I am not sure.'){
                        t.search.search_data['age'] = '';
                       }

                       grecaptcha.ready(function () {
                           grecaptcha.execute('6LftTMMeAAAAAHodlggyeFfE5vOJRAvyArRZqkZv', { action: 'search' }).then(function (token) {
                            t.search.search_data.token=token;
                                                             
                           });
                       });
                       

                    // var form_data = new FormData();
                    // for (var key in t.search.search_data) {
                    //     form_data.append(key, t.search.search_data[key]);
                    // }
                    

                         setTimeout(function () {
// Seach request
$.ajax({
    url: path.base_url + 'search.html',
    type: 'POST',
    data: t.search.search_data,
    async: false,
    cache: false,
    success: function(response){ 
        responseJ = JSON.parse(response);

        if(responseJ.url.includes("recaptcha")){
            $('#step5').fadeOut();
            setTimeout(function () {   
                var $numberElement = $('.search_progress_revamp .content-box .step4 h2 span.number');
                //var endValue = parseInt($numberElement.data('value'), 10);
                var endValue = parseInt(Math.floor(Math.random() * 100), 10);
                var startValue = parseInt($numberElement.text(), 10);
                var duration = 1000;
                animateNumber($numberElement, startValue, endValue, duration);                  
            $('#step4').fadeIn();
            setTimeout(function () { 
                window.location = responseJ.url;
            }, 3000); 
        }, 500);
           // t.modal.show('secure_recaptcha');
          
        }else{
        $('#step5').fadeOut();
        setTimeout(function () {
                           
        $('#step4').fadeIn();
            t.http.ajax_request("revamp_step", 'post', { "step": "good_going" }, function (response) {
                if (response.status) {
                    //console.log(response);
                }
            });
           
            var $numberElement = $('.search_progress_revamp .content-box .step4 h2 span.number');
            //var endValue = parseInt($numberElement.data('value'), 10);
            var endValue = parseInt(responseJ.counts.names, 10);
            var startValue = parseInt($numberElement.text(), 10);
            var duration = 1000;
            animateNumber($numberElement, startValue, endValue, duration);
     setTimeout(function () {
        if (responseJ.counts.names == 1) {
            $('#search_progress_revamp').data('report-page-url', responseJ.url + '&count=1')
            setp6_start()
        } else {

            t.search.search_data.response_url = responseJ.url;
            window.location = responseJ.url;
        }
    }, 3000);
}, 500);
    }
}
});
                    }, 500);
                   



                } );



                $('#step6').on( "click",'.list-item', function() {

                   $(this).toggleClass('active');

                   if($(this).hasClass('active')){
                    t.search.search_data['interested'].push($(this).find('h4').text());
                   }else{
                    t.search.search_data['interested'].pop($(this).find('h4').text());
                   }

                } );
                $('.tostep7').click(function () {
                    $(this).addClass('loading');

                    setTimeout(function () {
                        $('#step6').fadeOut();
                        setTimeout(function () {
                            $('#step7').fadeIn();
                            t.http.ajax_request( "revamp_step", 'post', {"step": "7"}, function( response ) {
                                if (response.status) {
                                    //console.log(response);
                                }
                            }); 
                            t.search_progress.notification(document.getElementById('sticky-notification'), t);
                            t.search_progress.circle_progress(document.getElementById('circular-progress'), t);
                        }, 500);
                    }, 500);





                });
                $('#tos-checkbox').click(function () {
                    if($("#tos-checkbox").is(':checked')){
                        $('#stepbtn13').removeClass('disabled'); 
                    }else{
                        $('#stepbtn13').addClass('disabled'); 
                    }

                });
                $('#stepbtn13').click(function () {
                    if($("#tos-checkbox").is(':checked')){
                        $(this).addClass('loading');
                        setTimeout(function () {
                           
                        $('#step13').fadeOut();
                            setTimeout(function () {
                                $('#step14').fadeIn();

                                    t.http.ajax_request( "revamp_step", 'post', {"step": "14"}, function( response ) {
                                        if (response.status) {
                                            //console.log(response);
                                    }
                                    }); 
                                    //Desktop
                                   $('#new_search_results-d').find('svg').remove();
                                   lottie.loadAnimation( {
                                    container: document.getElementById('new_search_results-d'),
                                    renderer: 'svg',
                                    loop: false,
                                    autoplay: true,
                                    animationData: lottie.animations[ 'new_search_results' ]
                                } );
                                    //Mobile
                                    $('#new_search_results-m').find('svg').remove();
                                    lottie.loadAnimation( {
                                     container: document.getElementById('new_search_results-m'),
                                     renderer: 'svg',
                                     loop: false,
                                     autoplay: true,
                                     animationData: lottie.animations[ 'new_search_results' ]
                                 } );

                                progressbar_animate(".search_progress_revamp .step14 .scf-progress-bar .value",8000);                                   

                                setTimeout(function () {
                                    $('#step14').fadeOut();
                                    setTimeout(function () {
                                        $('#step15').fadeIn();
                                        t.http.ajax_request( "revamp_step", 'post', {"step": "15"}, function( response ) {
                                            if (response.status) {
                                                //console.log(response);
                                            }
                                        }); 

                                    }, 500);
                                }, 10000);
                            }, 500);
                        }, 500);
                    }

                });
                $('#save_email_id').on('click', function(){
                  
                    if(/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/.test( $('#save-email').val()) ) {

                        $('#save-email-error').hide();
                        $(this).addClass('loading');
                        t.http.ajax_request( 'sendy_ss', 'post', {
                            from_flow: true,email: $('#save-email').val(),interested_information:t.search.search_data['interested']
                        }, function( response ) {
                            if (response.status) {
                                $('#alert-box').show();
                                t.http.ajax_request( "revamp_step", 'post', {"step": "saving_results"}, function( response ) {
                                    if (response.status) {
                                        //console.log(response);
                                    }
                                }); 
                                progressbar_animate(".search_progress_revamp #alert-box .scf-progress-bar .value",5000);
                                $('#step15').fadeOut();   
                                setTimeout(function(){
                                    $('#alert-box').hide();
                                    $('#step16').fadeIn();  
                                    t.http.ajax_request( "revamp_step", 'post', {"step": "16"}, function( response ) {
                                        if (response.status) {
                                            //console.log(response);
                                        }
                                    });                      

                                }, 5000);
                            }else{
                                $('#save-email-error').text(response.message).fadeIn(); 
                                setTimeout(function(){                
                                    window.location = path.base_url + 'login-form';
                                }, 3000);
                            }
                        });


                    } else {
                        
                        $('#save-email-error').text('Please enter a valid email address to continue.').fadeIn()
                    }

                });
                $('#step16-btn').click(function () {
                    $(this).addClass('loading');
                    setTimeout(function () {
                        $('#step16').fadeOut();
                        setTimeout(function () {
                            $('#step18').fadeIn();
                            
                            t.http.ajax_request( "revamp_step", 'post', {"step": "18"}, function( response ) {
                                if (response.status) {
                                    //console.log(response);
                                }
                            }); 
                            //t.search_progress.slider(document.getElementById('step18-slider'),t);
                            carousel_start(t);
                            progressbar_animate(".search_progress_revamp .step18 .scf-progress-bar .value",24000);

                        }, 500);
                    }, 500);
                });

                $('#results-ready').click(function () {
                    
                    t.http.ajax_request( "revamp_step", 'post', {"step": "name_list"}, function( response ) {
                        if (response.status) {
                            //console.log(response);
                          
                            if($('#search_progress_revamp').data('report-page-url')!=''){
                                window.location=$('#search_progress_revamp').data('report-page-url');
                            }else{
                                window.location=t.search.search_data['response_url'];
                            }


                        }
                    }); 
                });

            }           
        }
    }
    scf.merge( func );

    // Search Pointer
    var func = {
        search_pointer: {
            $result_list: {},
            $location_list: {},
            original_results: [], // Store the original results to reset when needed
            current_results: [], // Store the currently available results to filter and sort
            activeFilters: {}, // To keep track of active filters
            originalCitiesArray: [], // To keep track of original cities before state filter 
            
            advanced_search: function(el, t) {
                $(el).on("submit", function() {
                    t.search.run_search($(this).serialize(), t);
                    return false;
                });
            },
    
            store_results: function(el, t) {
                var container = $(el);
                t.search_pointer.$result_list = container.find('.result-section');
                t.search_pointer.original_results = t.search_pointer.$result_list.toArray();
                t.search_pointer.current_results = [...t.search_pointer.original_results]; // Initialize current_results
            },
    
            sort_results: function(el, t) {
                    var sortOrder = $(el).val(); // Get the selected sort order ('asc' or 'desc')
                
                    // Ensure current results are available
                    if (t.search_pointer.current_results.length === 0) {
                        $(document).find('.results-container').empty().append(t.search_pointer.current_results);
                        console.warn("Current results are not available for sorting.");
                        return;
                    }
    
                    
                    // Sort the list based on the selected order
                    var sortedList = t.search_pointer.current_results.sort((a, b) => {
                        var ageA = $(a).data('age');
                        var ageB = $(b).data('age');
                        return sortOrder === 'asc' ? ageA - ageB : ageB - ageA;
                    });
    
                    // Update the document with the sorted results
                    $(document).find('.results-container').empty().append(sortedList);
            },
    
            filter_results: function(el, t, val, type) {
                var results_array = [...t.search_pointer.original_results]; // Start with original results
                
                // Apply all active filters
                var activeFilters = t.search_pointer.activeFilters;
            
                // Apply name filter if exists
                if (activeFilters.name && activeFilters.name.length > 0) {
                    var nameFilter = activeFilters.name[0]; // assuming single name filter
                    results_array = results_array.filter((a) => {
                        var name = $(a).data('name').toLowerCase();
                        return name.includes(nameFilter.toLowerCase());
                    });
                }
            
                // Apply age filter if exists
                if (activeFilters.age && activeFilters.age.length > 0) {
                    var ageRange = activeFilters.age[0].split('-');
                    var ageMin = parseInt(ageRange[0], 10) || 0;
                    var ageMax = ageRange[1] ? parseInt(ageRange[1], 10) : Infinity;
            
                    results_array = results_array.filter((a) => {
                        var itemAge = parseInt($(a).data('age'), 10);
                        return !isNaN(itemAge) && itemAge >= ageMin && itemAge <= ageMax;
                    });
                }
            
                // Apply country filter if exists
                if (activeFilters.country && activeFilters.country.length > 0) {
                    var countryFilter = activeFilters.country[0]; // assuming single country filter
                    results_array = results_array.filter((a) => {
                        var citiesArray = $(a).data('city').split('|');
                        return citiesArray.some((cityState) => {
                            var [city, state, country] = cityState.trim().split(', ');
                            if (country !== undefined) {
                                return country.toLowerCase() === countryFilter.toLowerCase();
                            }
                            if (countryFilter.toLowerCase() === 'us') return true;
                        });
                    });
                }
            
                // Apply state or city filter (OR condition)
                if ((activeFilters.state && activeFilters.state.length > 0) || (activeFilters.city && activeFilters.city.length > 0)) {
                    results_array = results_array.filter((a) => {
                        var citiesArray = $(a).data('city').split('|');
                        return citiesArray.some((cityState) => {
                            var [city, state] = cityState.trim().split(', ');
            
                            // Check if the state or city matches any of the active filters
                            var stateMatches = activeFilters.state && activeFilters.state.some((filterState) => {
                                return state && state.toLowerCase() === filterState.toLowerCase();
                            });
            
                            var cityMatches = activeFilters.city && activeFilters.city.some((filterCity) => {
                                var cityPart = filterCity.split(', ')[0].trim();
                                return city && city.toLowerCase() === cityPart.toLowerCase();
                            });
            
                            return stateMatches || cityMatches; // Match if either state or city matches
                        });
                    });
                }
            
                // Update current results with filtered data
                t.search_pointer.current_results = results_array;
            
                // Apply sorting if needed
                if (t.search_pointer.sortOrder) {
                    t.search_pointer.sort_results(t.search_pointer.sortOrder, t);
                } else {
                    // Update the document with filtered results if no sorting order is set
                    $(document).find('.results-container').empty().append(results_array);
                }
                
                if(t.search_pointer.current_results.length <= 0){
                    $('.scf-search-pointer #er').show();
                } else {
                    $('.scf-search-pointer #er').hide();
                }
            
                // Update result count
                $(t.v['search_pointer.result_count']).text('(' + t.search_pointer.current_results.length + ')');

                if(t.search_pointer.current_results.length <= 1){
                    $(t.v['search_pointer.result_txt']).text(`Result`);
                } else {
                    $(t.v['search_pointer.result_txt']).text(`Results`);
                }
            
                // Update filter badges
                t.search_pointer.update_filter_badges(t);
            },            
            
            // Capitalize the first letter of a string
            capitalizeFirstLetter: function(string) {
                return string.charAt(0).toUpperCase() + string.slice(1);
            },

            // Update filter badges
            update_filter_badges: function(t) {
                var badgesContainer = $('.filters');
                badgesContainer.empty();
                var first_state;
                // Loop through each filter type
                for (var filterType in t.search_pointer.activeFilters) {
                    var filterValues = t.search_pointer.activeFilters[filterType];
                    

                    // Check if filterValues is an array
                    if (Array.isArray(filterValues)) {
                        // Loop through each filter value for the current type
                        filterValues.forEach(function(filterValue) {
                            var displayText = filterType === "age" ? filterType + " " + filterValue : filterValue;
                            
                            if(filterType === "state") {
                             
                                if(typeof first_state==='undefined'){
                                    first_state=displayText;
                                }
                                displayText = displayText.toUpperCase();
                            }
                            if(filterType === "city") {
                                
                                // console.log(state);
                                // console.log(t.search_pointer.activeFilters["state"]);
                                // if( undefined == state){
                                //     state = t.search_pointer.activeFilters["state"]
                                // }
                                // console.log(state);
                                [city, state] = displayText.split(', ');
                               
                                if(typeof state==='undefined'){
                                    state=first_state;
                                   
                                }
                                state=state.toUpperCase();
                                
                                displayText = `${city}, ${state}`;
                            }
                            var formattedText = t.search_pointer.capitalizeFirstLetter(displayText);

                            // Create and append badge
                            var badge = $('<div class="filter-item"></div>')
                                .text(formattedText)
                                .attr('type', filterType)
                                .attr('value', filterValue);
                            
                            // Create close icon and attach event handler
                            var closeIcon = $('<span class="si-close-circle"></span>').on('click', function(el) {
                                var filterType = $(this).parent().attr('type');
                                var filterValue = $(this).parent().attr('value');                        
                                t.search_pointer.remove_filter(el, t, filterValue, filterType);
                            });

                            badge.append(closeIcon);
                            badgesContainer.append(badge);
                        });
                    } else {
                        // Handle the case where filterValues is not an array (fallback)
                        var displayText = filterType === "age" ? filterType + " " + filterValues : filterValues;
                        var formattedText = t.search_pointer.capitalizeFirstLetter(displayText);

                        // Create and append badge
                        var badge = $('<div class="filter-item"></div>')
                            .text(formattedText)
                            .attr('type', filterType)
                            .attr('value', filterValues);
                        
                        var closeIcon = $('<span class="si-close-circle"></span>').on('click', function(el) {
                            var filterType = $(this).parent().attr('type');
                            var filterValue = $(this).parent().attr('value');                        
                            t.search_pointer.remove_filter(el, t, filterValue, filterType);
                        });

                        badge.append(closeIcon);
                        badgesContainer.append(badge);
                    }
                }
            },


            // Apply or remove a filter
            apply_filter: function(el, t, value, type) {
                
                if(!value) return;

                // Initialize the filter type if it doesn't exist
                if (!t.search_pointer.activeFilters[type]) { 
                    t.search_pointer.activeFilters[type] = [];
                }
                
                // Check if the value already exists in the array
                const index = t.search_pointer.activeFilters[type].indexOf(value);
                
                if (index === -1) {
                    // Add the value if it doesn't exist
                    if(type === 'age' || type === 'country'){
                        t.search_pointer.activeFilters[type].splice(index, 1);
                    }
                    t.search_pointer.activeFilters[type].push(value);
                } else {
                    // Remove the value if it exists (toggle functionality)
                    t.search_pointer.activeFilters[type].splice(index, 1);
                }
                
                // Apply the filter results
                t.search_pointer.filter_results(el, t, value, type);
            },
            remove_filter: function(el, t, value, type) {
                // Check if the filter type exists and contains values
                if (t.search_pointer.activeFilters[type]) {
                    var index = t.search_pointer.activeFilters[type].indexOf(value);
                    
                    // Remove the specific value if it exists
                    if (index > -1) {
                        t.search_pointer.activeFilters[type].splice(index, 1);
                    }else delete t.search_pointer.activeFilters[type];
                    
                    // If the array is empty after removal, delete the filter type
                    if(t.search_pointer.activeFilters[type]){
                        if (t.search_pointer.activeFilters[type].length === 0) {
                            delete t.search_pointer.activeFilters[type];
                        }
                    }

                    // Remove the 'selected' or 'active' class from the corresponding input/button
                    if (type === "age") {
                        // For age filters, find the corresponding button with the data-age attribute
                        $(`.age[data-age="${value}"]`).removeClass('selected');
                    } else if (type === "state") {
                        // For state filters, find the corresponding input element with the matching value
                        $(`input[type="checkbox"][value="${value}"], input[type="radio"][value="${value}"]`).prop('checked', false);
                        
                        var filterContainer = $('.scf-search-pointer .city-filter #filter-city');

                         // Show the first 4 cities and hide the rest when removing the filter
                         var i = 0;
                         filterContainer.children().each(function() {
                             i++;
                             if (i <= 4) {
                                 $(this).css('display', 'block');
                             } else {
                                 $(this).css('display', 'none');
                             }
                         });
 
                         $('.scf-search-pointer .city-filter #filter-city #load_icon').css('display', 'block');
             
                    } else if (type === "city") {
                        // For city filters
                        $(`input[type="checkbox"][value="${value}"]`).prop('checked', false);
                    } else if (type === "country") {
                        // For country filters
                        $(`input[name="country"][value="${value}"]`).prop('checked', false);
                    } else if (type === "name") {
                        // For name filters, clear the corresponding text input
                        $(' input[name="middle_name"]').closest('.input-wrapper').removeClass('filled');
                        $(' input[name="middle_name"]').val('');
                    }
                    
                    // Apply the filter results with the updated filters
                    t.search_pointer.filter_results(el, t, "", type);
                }
            },
            
            filter_results_name: function(el, t) {
                $(el).on("keyup", function() {
                    // Get values of the first, middle, and last name fields
                    var firstName = $('input[name="first_name"]').val();
                    var middleName = $('input[name="middle_name"]').val();
                    var lastName = $('input[name="last_name"]').val();
            
                    // Concatenate the values to form the full name
                    var fullName = [firstName, middleName, lastName].filter(Boolean).join(' ');
            
                    // Add or remove the 'filled' class based on the input's value
                    if ($(this).val() !== "") {
                        if (fullName !== "") {
                            t.search_pointer.activeFilters.name = [fullName]; // Set the full name filter
                
                            // Apply all filters (including the name filter)
                            t.search_pointer.filter_results(el, t);
                            
                            // $(this).closest('.input-wrapper').addClass('filled');
                        }
                    } else {
                        $(this).closest('.input-wrapper').removeClass('filled');
            
                        // Remove the name filter and reapply filters without the name filter
                        delete t.search_pointer.activeFilters.name;
                        
                        t.search_pointer.filter_results(el, t);
                    }                    
                });
            },
            
            filter_results_age_group: function(el, t) {
                $(el).on("click", function() {
                    // Remove 'selected' class from all age blocks
                    $(el).siblings().removeClass('selected');

                    // Check if the clicked element is already selected
                    var isSelected = $(this).hasClass('selected');

                    // Remove 'selected' class from all elements
                    $(el).removeClass('selected');
                    $('.scf-search-pointer #sidebar_filter .age').removeClass('selected');

                    // If the clicked element was not selected, add 'selected' class to it
                    if (!isSelected) {

                        // Get the selected age group
                        var age = $(this).data('age');

                        $(this).addClass('selected');
                        $(`.scf-search-pointer #sidebar_filter [data-age="${age}"]`).addClass('selected');

                        // Filter results based on selected age group
                        t.search_pointer.apply_filter(el,t, age, "age");
                    }else t.search_pointer.remove_filter( el,t, "", "age");
                });
            },
            filter_results_state: function(el, t) {
                $(el).on("click", function() {
                    // Check if the clicked element is already selected
                    var isSelected = $(this).hasClass('selected');
            
                    // Get the selected state
                    var selectedState = $(this).val().toLowerCase();
                    var filterContainer = $('.scf-search-pointer .city-filter #filter-city');
            
                    // Initialize originalCitiesArray if not already done
                    if (!t.search_pointer.originalCitiesArray || t.search_pointer.originalCitiesArray.length === 0) {
                        t.search_pointer.originalCitiesArray = filterContainer.children().clone(); // Cache the original city list
                    }
            
                    // // Clear the filter container first
                    // filterContainer.children().detach(); // Detach all children to re-order
                    if (!isSelected) {

                        // Loop through each city to sort them based on the selected state
                        filterContainer.children().each(function(item) {
                            var id = $(this).attr('id');
                            if (id) {
                                var [city, state] = id.trim().split(', ');
                
                                // Check if the city matches the selected state
                                if (state && state.toLowerCase() === selectedState) {
                                    $(this).css('display', 'block'); // Show matching city
                                    filterContainer.prepend($(this)); // Prepend to show matching cities at the top
                                } else {
                                    // $(this).css('display', 'none'); // Show non-matching city
                                    filterContainer.append($(this)); // Append non-matching cities at the bottom
                                }
                            }
                        });

                        // Mark the clicked element as 'selected'
                        $(this).addClass('selected');
                        // Apply the filter logic
                        t.search_pointer.apply_filter(el, t, selectedState, "state");
                    } else {
                        // Get all children elements of the filter container
                        var cityElements = filterContainer.children();
                    
                        // Sort the children based on city names
                        cityElements.sort(function(a, b) {
                            var cityA = $(a).attr('id').trim().split(', ')[0].toLowerCase(); // Extract city name from the id
                            var cityB = $(b).attr('id').trim().split(', ')[0].toLowerCase(); // Extract city name from the id
                            return cityA.localeCompare(cityB); // Sort using localeCompare
                        });
                    
                        // Update the filter container to reflect the new order
                        cityElements.each(function(index) {
                            if (index < 4) {
                                $(this).css('display', 'block'); // Show the first four cities
                            } else {
                                $(this).css('display', 'none'); // Hide the rest
                            }
                            // Append sorted element back to the container to maintain order in the DOM
                            $(filterContainer).append($(this)); // Appends $(this) to filterContainer as a child
                        });
                    
                        
                        $('.scf-search-pointer .city-filter #filter-city #load_icon').css('display', 'block').appendTo('#filter-city');
                        // Remove the 'selected' class
                        $(this).removeClass('selected');
                        
                    
                        // Remove the filter
                        t.search_pointer.remove_filter(el, t, selectedState, "state");
                    }
                    
                });
            },                        
            no_results:function(el,t){
               $(el).on("ready",function() {
                    $(this).css('display','none');
               })
            },
            filter_results_city: function(el, t) {        
                $(el).on("change", function() {
                    // Check if the clicked element is already selected
                    var isSelected = $(this).hasClass('selected');

                    // Remove 'selected' class from all elements
                    $(el).removeClass('selected');

                    
                    // Get the selected city
                    var city = $(this).val();
                    
                    if (!isSelected) {
                        // If the clicked element was not selected, add 'selected' class to it
                        $(this).addClass('selected');

                        // Filter results based on selected city group
                        t.search_pointer.apply_filter(el,t, city, "city");
                    }else t.search_pointer.remove_filter( el,t, city, "city");
                });
            },
            filter_results_country: function(el, t) {
                $(el).on("change", function() {

                    // Get the selected country
                    var country = $(this).val();

                    // Filter results based on selected country
                    t.search_pointer.apply_filter(el, t, country, "country");
                });
            },
            advance_location_filter: function(el, t) {
                $(".search-filter-city select").attr("disabled", true);
                $(el).on("submit", function(event) {
                    event.preventDefault();
                    var formData = $(this).serializeArray();
                    var itemState=null;
                    var itemCity=null;
                    var itemCountry=null;
                    // Iterate through each item in formData
                    formData.forEach(function(item) {
                        if(item.name == 'state' && item.value){
                            var selectedState = item.value;
                            var filterContainer = $('.scf-search-pointer .city-filter #filter-city');
            
                            // Initialize originalCitiesArray if not already done
                            if (!t.search_pointer.originalCitiesArray || t.search_pointer.originalCitiesArray.length === 0) {
                                t.search_pointer.originalCitiesArray = filterContainer.children().clone(); // Cache the original city list
                            }
                    
                            // Hide cities that do not match the selected state and set display to block
                            filterContainer.children().each(function () {
                                var id = $(this).attr('id');
                                if (id) {
                                    var [city, state] = id.trim().split(', ');
                                    // Show matching items and hide non-matching items
                                    $(this).css('display', (state && state.toLowerCase() == selectedState.toLowerCase()) ? 'block' : 'none');
                                }
                            });

                            itemState=item.value
                        }else if(item.name == 'country' && item.value){
                            itemCountry=item.value
                        }else if(item.name == 'city' && item.value){
                            itemCity=item.value
                        }



                    });
                    if(itemCountry){
                        t.search_pointer.apply_filter(el, t, itemCountry,'country');
                    }
                    if(itemCity){
                        t.search_pointer.apply_filter(el, t, itemCity+', '+itemState,'city');
                    }else if(itemState){
                        t.search_pointer.apply_filter(el, t,itemState, 'state');
                    }
                    t.modal.close('refine-search-location-popup');
                });
            },
            remove_age_filters:function(el,t){
                $(el).on("click", ()=>{
                    $('.scf-search-pointer #sidebar_filter .age').removeClass('selected');                    
                    t.search_pointer.remove_filter( el,t, "", "age")
                });
            },
            
            set_sort_order: function(el, t) {
                $(el).on("change", () => {
                    t.search_pointer.sortOrder = $(el).val(); // Store the selected sort order
                    t.search_pointer.sort_results(el, t); // Sort based on the selected order
                });
            },
         
            run_filter: function( t ) {
                if ( ! this.$result_list.length ) {
                    this.$result_list = $( t.v['search_pointer.results'] ).find(".result-section");
                }                
            
                var
                    $filters = '',
                    // $filters = this.$location_list.filter(":checked"),
                    age_from = parseInt( $( t.v['search_pointer.age_from'] ).text() ),  
                    age_to = parseInt( $( t.v['search_pointer.age_to'] ).text() );

            
                if ( ! $filters.length ) {
                    this.$result_list.show();
                } else {
                    this.$result_list.hide();

                    function removeStateDuplicates(arr) {
                        // Create a new set to store unique states from city-state pairs
                        const statesInCityState = new Set();
                        // Iterate over array
                        for(let i=0; i<arr.length; i++) {
                          // Check if current element is a city-state pair
                          if(arr[i].includes(',')) {
                            // Extract state from city-state pair and add to set
                            statesInCityState.add(arr[i].split(', ')[1]);
                          }
                        }
                      
                        // Iterate over array again and remove any standalone states
                        // that were found in city-state pairs
                        return arr.filter(item => {
                          // Check if item is a city-state pair or a state that's not in the set
                          return item.includes(',') || !statesInCityState.has(item);
                        });
                      }
                      $filteredList = [];
                    $filters.each( function() {
                        $filteredList.push(this.value);
                    });

                    duplicatesRemoved = removeStateDuplicates($filteredList);

                    duplicatesRemoved.forEach(item => {
                        t.search_pointer.$result_list.filter("[data-city*='" + item + "|']").show();
                      });                      

                }
            
                t.search_pointer.$result_list.filter(":visible").each( function() {
                    var
                        $this = $(this),
                        age = $this.data("age");
                    if ( ( age && ( age < age_from || age > age_to ) ) ) $this.hide();
                });
            
                $( t.v['search_pointer.result_count'] ).text( '(' + t.search_pointer.$result_list.filter(":visible").length+ ')' );
            },
            
            filters: {
                init: function( el, t ) {
                    $(window).on('load', function () {

                        var
                            $this = $(el);
                            $advanced_filters = $this.find('.filter-list h4');
                        t.search_pointer.$location_list = $advanced_filters.on( "click", function() {

                            $(this).find("span").toggleClass("si-down-circle").end().parent().toggleClass("active");

                        } ).end().find(".load_icon").on( "click", function() {

                            var $elm = $(this).find("span").toggleClass("si-minus").end().parent().toggleClass("all").end().find("label");
                            $elm.text( $elm.text().replace( /more|less/i, /more/i.test( $elm.text() ) ? "Less" : "More" ) )

                        }).end().find(".age-range-slider").slider( {
                            range: true,
                            min: 1,
                            max: 150,
                            values: [ 1, 150 ],
                            slide: function( event, ui ) {

                                $( t.v['search_pointer.age_from'] ).text( ui.values[0] );
                                $( t.v['search_pointer.age_to'] ).text( ui.values[1] );
                                t.search_pointer.run_filter( t );

                            }
                        } ).end().find(".loc-filter input").on( "change", function() {

                            t.search_pointer.run_filter( t );

                        } );

                        //if ( t.is_mobile() ) $advanced_filters.click();
                    })

                }
            },
            filter_toggle: function( el, t ) {
                $(el).on("click", function(){
                    
                    if($(this).hasClass('close')){
                        $('.scf-search-pointer .filter-section').removeClass('open');
                    } else {
                        $('.scf-search-pointer .filter-section').addClass('open');
                    }

                });
            },
            
            state_ns: function( el, t ) {

                $(el).on( "change", function() {
                    var state = this.value;
                    if(state){
                        
                        t.get_cities.dropdown( t.v['search_pointer.city'], state,undefined,true );
                    }else{
                        $(".search-filter-city select").empty().append('<option value="">Select a City</option>').prop('disabled', true);
                    }
                } );

            },
            // city: function( el, t ) {

            //     $(el).on( "click", function() {

            //         t.search.search_data.city = t.v['search_pointer.city'].value;
            //         t.modal.close('select_city');
            //         t.modal.show('select_age');

            //     } );

            // },
        },
    };
    scf.merge( func );

    // Campaigner
    var func = {
        campaigner : {
            run_submit: function( el, t ){
                $(el).on('submit', function(e){
                    e.preventDefault(); // Prevent the default form submission

                    $('.landing-page #EMAIL').closest('.sib-form-block').find('.entry__error').css('display', 'none');
                    $('.landing-page #success-message').removeClass('sib-form-message-panel--active');
                    $('.landing-page #error-message').removeClass('sib-form-message-panel--active');

                    const recaptchaResponse = grecaptcha.getResponse();

                    if (!recaptchaResponse) return;                    

                    if( $('.landing-page #FIRSTNAME').val() == "" ) return;
                    
                    if( $('.landing-page #EMAIL').val() == "" ) {
                        $('.landing-page #EMAIL').closest('.sib-form-block').find('.entry__error').html('This field cannot be left blank.');
                        $('.landing-page #EMAIL').closest('.sib-form-block').find('.entry__error').css('display', 'block');
                        return;
                    }

                    if ( ! t.validator.email( $('.landing-page #EMAIL').val() ) ) {
                        $('.landing-page #EMAIL').closest('.sib-form-block').find('.entry__error').html('Invalid Email Address.');
                        $('.landing-page #EMAIL').closest('.sib-form-block').find('.entry__error').css('display', 'block');
                        return false;
                    }

                    var send_data = {
                        firstname: $('.landing-page #FIRSTNAME').val(),
                        email: $('.landing-page #EMAIL').val(),
                        phone: $('input[name="SMS__COUNTRY_CODE"]').val() + $('input[name="SMS"]').val(),
                        recaptcha: recaptchaResponse
                    };
                    
                    t.http.request( ( path.base_url +'/ajax.html?cmd=campaigner_submit' ), 'post', send_data, 'json', function( response ) {
                        if ( response.status ) {
                            $('.landing-page #success-message').addClass('sib-form-message-panel--active');
                        }else{
                            $('.landing-page #error-message').addClass('sib-form-message-panel--active');
                        }
                    });
                });
            }
        }
    }
    scf.merge( func );
    
    // Reverse Address Search
    var func = {
        ras: {
            post_data: { address: '', city: '', state: '', zip: ''},
            $input_field: null,
            tool_tip: null,
            $f: {},
            progress_type: '',
            address_changed: function( el, t ) {
                var
                    place = el.getPlace(),
                    undefined = 'undefined',
                    address_data = {};
                place.address_components.forEach( function( data ) {

                    data.types.forEach( function( _data ) {

                        address_data[ _data ] = { long_name: data.long_name, short_name: data.short_name };

                    } );

                } );
                t.ras.post_data = {
                    address: place.formatted_address,
                    city: ( typeof address_data.locality != undefined ) ? address_data.locality.long_name : ( typeof address_data.sublocality_level_1 != undefined ) ? address_data.sublocality_level_1.long_name : '',
                    state: ( typeof address_data.administrative_area_level_1 != undefined ) ? address_data.administrative_area_level_1.short_name : '',
                    zip: ( typeof address_data.postal_code != undefined ) ? address_data.postal_code.long_name : '',
                    lat: place.geometry.location.lat(),
                    lng: place.geometry.location.lng(),
                };

            },
            reset: function( t ) {

                this.$f.progress.text('0%');
                this.$f.progress_bar.css( { width: '0%' } );
                if ( typeof this.$f.title != "undefined" ) {

                    this.$f.address.text( this.post_data.address );
                    this.$f.title.text("Starting ...");
                    this.$f.footer.text("");
                    this.$f.data_list = this.$f.data_list.find(">div").hide().eq(0).show().end();
                    this.$f.steps = this.$f.steps.find("li").removeClass("active");

                }

            },
            progress_data: {
                address_search_progress: [
                    { speed: 200, percentage: 100 },
                ],
                ras_proccess: [
                    { index: 1, speed: 200, text: 'Searching Owner Information', footer: 'Thank you for your patience', percentage: 20 },
                    { index: 2, speed: 200, text: 'Search Deed and Tax Information', footer: 'Looking through County Assessor records', percentage: 40 },
                    { index: 3, speed: 200, text: 'Organizing Financial Data', footer: 'Sorting through available public records', percentage: 55 },
                    { index: 4, speed: 200, text: 'Extracting Property Information', footer: 'Searching public records of the property', percentage: 75 },
                    { index: 5, speed: 200, text: 'Organizing All the Data', footer: 'All data arranged in a detailed, easy-to-read report', percentage: 90 },
                    { index: 6, speed: 200, text: '', footer: '', percentage: 100 },
                ],
            },
            state: function( el, t ) {

                $(el).on( "change", function() {

                    t.get_cities.dropdown( t.v['ras.city'], this.value, 2 );

                } );
                t.v['ras.state'] = el;

            },
            refine_form: function( el, t ) {

                el.address.oninput = function() {
                
                	this.setCustomValidity('');
                	
				};
                
                el.address.oninvalid = function() {
                
                	this.setCustomValidity('Invalid address');
                	
				};            	
            	
                $(el).on( "submit", function() {

                    var
                        form = t.v['ras.refine_form'],
                        $address = $(form.address);
                                        

                    t.ras.post_data = {
                        street: form.address.value,
                        city: form.city.value,
                        state: form.state.value,
                        zip: form.zip.value,
                        address:form.address.value+','+form.city.value+','+form.state.value+' '+form.zip.value+' USA',
                        original_address:form.address.value+' '+form.city.value+' '+form.state.value+' '+form.zip.value+' USA'
                    }

                    t.modal.close('refine_address_search');
                    t.ras.run_search( t, parseInt( form.redirect.value ) );
                    return false;

                } );
                t.v['ras.refine_form'] = el;

            },
            form: function( el, t ) {

                $(el).on( 'submit', function() {

                    t.ras.run_search( t );
                    return false;

                } );

            },
            suggestions:function( el, t ) {
                $(el).on( 'click', function() {
                    if( $('input[name="address_suggest"]:checked').val() == ""){
                        t.modal.show( 'refine_address_search' );
                        t.modal.close( 'autocomplete_suggestion' );
                        return false;
                    }
                    var selected_id = $('input[name="address_suggest"]:checked').val();
                    var original_address = $('label[for="'+ selected_id +'"]').html();
                    var request = {
                        placeId: $('input[name="address_suggest"]:checked').val(),
                      };
                      service = new google.maps.places.PlacesService(document.createElement('div'));
                      service.getDetails(request, callback);
                      function callback(place, status) {
                        address_data = {},
                        undefined = 'undefined';
                        place.address_components.forEach( function( data ) {
                            data.types.forEach( function( _data ) {
                                address_data[ _data ] = { long_name: data.long_name, short_name: data.short_name };
                            } );
                        } );

                        t.ras.post_data = {
                            address: place.formatted_address,
                            original_address: original_address,
                            city: ( typeof address_data.locality != undefined ) ? address_data.locality.long_name : ( typeof address_data.sublocality_level_1 != undefined ) ? address_data.sublocality_level_1.long_name : '',
                            state: ( typeof address_data.administrative_area_level_1 != undefined ) ? address_data.administrative_area_level_1.short_name : '',
                            zip: ( typeof address_data.postal_code != undefined ) ? address_data.postal_code.long_name : '',
                            lat: place.geometry.location.lat(),
                            lng: place.geometry.location.lng(),
                        };
                        t.ras.run_search( t, 1);
                        t.modal.close('autocomplete_suggestion');
                      }
                } );
            },
            run_search: function( t, redirect ) {

                var
                    post_data = t.ras.post_data,
                    $f = this.$f,
                    guest = true;

                if ( typeof redirect == "undefined" ) redirect = 0;

                if ( ( ! /^[0-9]/m.test( post_data.address ) ) || ! post_data.city || ! post_data.state || ! post_data.zip || post_data.zip1 == "show_suggestions" ) {
                    var form = t.v['ras.refine_form'];
                    form.redirect.value = redirect;
                    form.state.value = ( ! post_data.state ) ? 'Select a State' : post_data.state;
                    $(form.state).change();

                    form.city.value = 'Select a City';
                    form.zip.value = post_data.zip;
                    const displaySuggestions = function (predictions, status) {

                        if(status == "ZERO_RESULTS"){
                            t.modal.show( 'no_address_suggestions' );
                            return;
                        }
                        if (status != google.maps.places.PlacesServiceStatus.OK || !predictions) {
                          return;
                        }
                        var rtn = false;
                        predictions.forEach(prediction => {
                            if(prediction.description == $(".pac-target-input").val()) {
                                t.ras.post_data.original_address =  prediction.description;
                                rtn = true;
                            }
                        });

                        if ($('.search-form-2020').parent().hasClass('new-header')) {
                            rtn = true;
                        }

                        $('#suggestions').html("");
                        predictions.forEach((prediction) => {
                            //console.log(prediction)
                            if(!prediction.types.includes('route')){
                                
                            
                          $('#suggestions').append(
                            $('<div >').append(
                            $('<input>').prop({
                                type: 'radio',
                                id: prediction.place_id,
                                name: 'address_suggest',
                                value: prediction.place_id
                            })
                        ).append(
                            $('<label>').prop({
                                for: prediction.place_id
                            }).html(prediction.description)
                        ).append(
                            $('<br>')
                        ));
                            }
                         });

                         $('#suggestions').append(
                            $('<div>').append(
                            $('<input>').prop({
                                type: 'radio',
                                id: 'suggestion_none',
                                name: 'address_suggest',
                                value: ""
                            })
                        ).append(
                            $('<label>').prop({
                                for: 'suggestion_none'
                            }).html("Refine Search")
                        ).append(
                            $('<br>')
                        ));
                        if( rtn == false ) 
                        t.modal.show( 'autocomplete_suggestion' );
                        else run_ras_search(t);
                      };
                      const service = new google.maps.places.AutocompleteService();
                      if($("input[name=address]").val() == ""){
                          $el = $("input[name=ras_address]").val();
                          if(typeof $el == 'undefined'){
                            $("input[name=address]").each(function($ele) {
                                if(this.value != "")
                                    $el = this.value;
                            });
                          }
                      } else{
                          $el = $("input[name=address]").val();
                      }
                      $el = $el.replace(/\d+$/, '');
                      service.getPlacePredictions({ input:$el,types: [ 'address' ], componentRestrictions: { country: "us" } }, displaySuggestions);
                      t.ras.$input_field = $(t.v['ras.input']);
                      t.ras.tool_tip = t.ras.$input_field.siblings("label").get(0);

                    return false;

                }

                run_ras_search(t);
                
                function run_ras_search(t) {
                    t.http.ajax_request( 'search_ras', 'post');
                    // t.ras.progress_type = ( typeof t.modal.ref['ras_proccess'] != "undefined" ) ? 'ras_proccess' : 'address_search_progress';
                    t.ras.progress_type = $('.ras_proccess').length ? 'ras_proccess' : 'address_search_progress';

                    t.modal.ref[ t.ras.progress_type ].extract_vars( $f );
                    t.modal.show( t.ras.progress_type );
                    t.ras.reset( t );

                    guest = ( t.ras.progress_type == "ras_proccess" );

                    t.progress_runner.start( t.ras.progress_data[ t.ras.progress_type ], function( status ) {

                        t.http.request( ( guest ? path.base_url +'ajax.html?cmd=ras_save' : path.base_url + 'ras_report.html' ), 'post', t.ras.post_data, 'json', function( response ) {
                            //alert(response); return;
                            if ( ! guest ) {

                                status.rush = true;
                                response = JSON.parse( response );
                                status.id = response.status ? response.id : null;
                                status.do_redirect = ( typeof response.validate_email !== "undefined" && response.validate_email ) ? response.url : false;

                            }else if(response.status==false){
                                
                                status.report = false;
                            }

                        } );

                    }, function( data, status ) {

                        $f.progress.text( status.percentage + '%' );
                        $f.progress_bar.css( { width: status.percentage + '%' } );

                    }, function( data, status ) {

                        if ( typeof $f.title != "undefined" ) {

                            $f.title.text( data.text + "..." );
                            $f.footer.text( data.footer );
                            $f.data_list.hide().eq( data.index - 1 ).show();
                            if ( data.index > 1 ) $f.steps.eq( data.index - 2 ).toggleClass('active');

                            if ( data.index == 6 ) {

                                $f.unlock.show();
                                $f.pbar.hide();

                            }

                        }

                        t.http.ajax_request( 'baselines_ras_' + data.index, 'post');

                    }, function( data, status ) {

                        if ( typeof status.do_redirect !== "undefined" && status.do_redirect ) {

                            window.location.href = status.do_redirect;
                            return false;

                        }

                        if ( guest ) {
                            if(!status.report){
                                //window.location.href = path.base_url+'search/no-results-0/';

                            }
                        } else {

                            if ( status.id ) {

                                window.location.href = path.base_url+'ras_report/?id=' + status.id;

                            } else {

                                if ( ! redirect ) {

                                    t.modal.close('address_search_progress');
                                    t.tooltip.show( t.ras.tool_tip );

                                } else {

                                    window.location.href = path.base_url+'search/no-results-0/';

                                }

                            }

                        }

                    } );
                }
            },
        }
    };
    scf.merge( func );

    // Checkout Page
    //let turnstileRendered = false; 
    var func = {
        checkout: {
            pay_method: null,
            $pay_form: null,
            tds: null,
            payload: null,
            verify_card: false,
            vault_verify_card: false,
            vault_bin: null,
            vault_token: null,
            run_vault_tokenize: null,
            run_tokenize: true,
            payment_check: true,
            post_data: null,
            pg_func: {},
            email_address: [],
            token_r3 : null,
            signup_count: null,
            
            unlock_btn: function( el, t, o ) {

                $(el).on( "click", function() {

                    $( t.v['checkout.payments'] ).scrollTo( -50 );

                } );

            },
            email_logging: function( el, t, o ) {
                var sendy_list = "sendy_ss";
                var email_initial = $("#email_address, #abandoned_ris_emails");
                var search_type = $("#search_type").val();
                var link_container = $('.report_ready2 .email-capture');
                var link = $(".report_ready2 .btn.btn-dark-green, #ris_accept");
                var email_valid = false;
                var phone = $("#phone");
                var ris_type = $("#ris_accept").length > 0;
                var phone_valid = false;
                var forward = "";
                var ris_button = $("#ris_accept");
            
                function validateEmail() {
                    var email = email_initial.val();
                    return email !== "" && /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+\.[a-zA-Z]{2,}$/.test(email);
                }
            
                function validatePhone() {
                    var phoneNumber = phone.val();
                    return phoneNumber === "" || /^[0-9]{10,}$/.test(phoneNumber);
                }
                
            
                function toggleSubmitButton() {
                
                    //validate both email and phone
                    if (validateEmail() && validatePhone()) {
                        link.removeAttr("data-target");
                        link.removeClass("disabled");
                        ris_button.removeAttr('disabled');  
                        ris_button.removeClass("disabled");
                    } else {
                        link.addClass("disabled");
                        ris_button.addClass('disabled');
                    }
                }
                
            
                email_initial.on("change keydown keyup", function() {
                    toggleSubmitButton();
            
                    if (link.attr("data-target") && forward.length < 1) {
                        forward = link.attr("data-target");
                    }
            
                    if (email_initial.val() !== "" && !validateEmail()) {
                        $(t.v["checkout.email_validation"]).show();
                    } else {
                        $(t.v["checkout.email_validation"]).hide();
                    }
        
                    if (email_initial.val() == "") {
                        $(t.v["checkout.email_empty_validation"]).show();
                    } else {
                        $(t.v["checkout.email_empty_validation"]).hide();
                    }
            
                    if (validateEmail() && email_initial.val() !== "" && !email_valid) {
                        o.email_address.push(email_initial.val());
                        email_valid = true;
                        link.one("click", function() {
                            var form = {
                                email: email_initial.val(),
                                phone: phone.val(),
                                ris: ris_type,
                                type: ""
                            };
                            link.addClass('loading');
                            t.http.ajax_request(sendy_list, 'post', form, function(response) {
                                if (response.status) {                                    
                                    t.fl(forward); 
                                } else {
                                    t.fl(forward); 
                                }
                            });
                        });
                    } else {
                        email_valid = false; // Reset email_valid if the email is deleted
                    }
                });
            
                phone.on("change keydown keyup", function() {
                    phone_valid = validatePhone();
                    toggleSubmitButton();
            
                    if (phone.val() !== "" && !validatePhone()) {
                        $(t.v["checkout.phone_validation"]).show();
                    } else {
                        $(t.v["checkout.phone_validation"]).hide();
                    }
                });
            },    
            email_logging_ab: function( el, t, o ) {
                var sendy_list = "sendy_ss";
                var email_initial = $("#email_address, #abandoned_ris_emails");
                var link_container = $('.report_ready2 .email-capture');
                var link = $(".report_ready2 .btn.btn-dark-green, #ris_accept");
                var email_valid = false;
                var phone = $("#phone");
                var ris_type = $("#ris_accept").length > 0;
                var phone_valid = false;
                var forward = "";
                var ris_button = $("#ris_accept");
                
            
                function validateEmail() {
                    var email = email_initial.val();
                    return email !== "" && /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+\.[a-zA-Z]{2,}$/.test(email);
                }
            
                function validatePhone() {
                    var phoneNumber = phone.val();
                    return phoneNumber === "" || /^[0-9]{10,}$/.test(phoneNumber);
                }
            
                function toggleSubmitButton() {
                
                    //validate both email and phone
                    if (validateEmail() && validatePhone()) {
                        link.removeAttr("data-target");
                        link.removeClass("disabled");
                        ris_button.removeAttr('disabled');  
                        ris_button.removeClass("disabled");
                    } else {
                        link.addClass("disabled");
                        ris_button.addClass('disabled');
                    }
                }
                
            
                email_initial.on("change keydown keyup", function() {
                    // toggleSubmitButton();
            
                    if (link.attr("data-target") && forward.length < 1) {
                        forward = link.attr("data-target");
                    }
            
                    // if (email_initial.val() !== "" && !validateEmail()) {
                    //     $(t.v["checkout.email_validation"]).show();
                    // } else {
                    //     $(t.v["checkout.email_validation"]).hide();
                    // }
        
                    // if (email_initial.val() == "") {
                    //     $(t.v["checkout.email_empty_validation"]).show();
                    // } else {
                    //     $(t.v["checkout.email_empty_validation"]).hide();
                    // }
            
                    if (email_initial.val() !== "" && !email_valid) {
                        o.email_address.push(email_initial.val());
                        email_valid = true;
                        link.one("click", function() {
                            var form = {
                                email: email_initial.val(),
                                phone: phone.val(),
                                ris: ris_type,
                            };
                            link.addClass('loading');
                            t.http.ajax_request(sendy_list, 'post', form, function(response) {
                                if (response.status) {
                                    t.fl(forward); 
                                } else {
                                    t.fl(forward); 
                                }
                            });
                        });
                    } else {
                        email_valid = false; // Reset email_valid if the email is deleted
                    }
                });
            
                phone.on("change keydown keyup", function() {
                    phone_valid = validatePhone();
                    toggleSubmitButton();
            
                    if (phone.val() !== "" && !validatePhone()) {
                        $(t.v["checkout.phone_validation"]).show();
                    } else {
                        $(t.v["checkout.phone_validation"]).hide();
                    }
                });
            },                                          
            get_form_fields: function( $form ) {

                var $f = {};
                $form.extract_vars( $f );
                return $f;

            },
            country: function( el, t, o ) {

				var
					$this = $(el),
					$address_fields = $( t.v['checkout.address_fields'] );

				t.v['checkout.country'] = el;
                $this.on( "change", function() {

					$address_fields.toggleClass( "optional", ( $this.val() == "US" ) );


				} ).change();

            },
            go: function( el, t, o ) {

                var validations = [
                    { field: 'email_address', error: 'Invalid Email.', validator: 'email' },
                    { field: 'email_address_confirm', error: 'Email addresses do not match.', validator: 'email_confirm' },
                    { field: 'card_name', error: 'Card Holder Name is required to be filled.', validator: 'not_empty' },
                    { field: 'card_number', error: 'Card Number is required to be filled.', validator: 'not_empty' },
                    { field: 'card_expiry_month', error: 'Expiry Month is required to be filled.', validator: 'not_empty' },
                    { field: 'card_expiry_year', error: 'Expiry Year is required to be filled.', validator: 'not_empty' },
                    { field: 'card_cvv', error: 'CVV is required to be filled.', validator: 'not_empty' },
                    { field: 'address', error: 'Address is required to be filled.', validator: 'not_empty' },
                    { field: 'city', error: 'City is required to be filled.', validator: 'not_empty' },
                    { field: 'state', error: 'State is required to be filled.', validator: 'not_empty' },
                    { field: 'postal_code', error: 'Postal Code is required to be filled.', validator: 'not_empty' },
                    { field: 'phone', error: 'Phone is required to be filled.', validator: 'not_empty' },
                    { field: 'tos', error: 'Please accept the Terms of Service and Privacy Policy.', validator: 'is_true', checkbox: true },
                ];
                var validations_savedcard = [
                    { field: 'sc_phone', error: 'Phone is required to be filled.', validator: 'not_empty' },
                    { field: 'tos', error: 'Please accept the Terms of Service and Privacy Policy.', validator: 'is_true', checkbox: true },
                ];
                
                $(el).on( "click", function() {
                    grecaptcha.ready(function () {
                        grecaptcha.execute('6LftTMMeAAAAAHodlggyeFfE5vOJRAvyArRZqkZv', { action: 'checkout' }).then(function (token) {
                            token_r3 = token;
                        });
                    });
                    o.pay_method = 'card';
                    o.$pay_form = $(this).closest("form")
                    o.vault_verify_card = false;

                    var
                        $this = $(this),
                        $form = o.$pay_form,
                        errors = {},
						$country = $(t.v['checkout.country']),
						final_validations = validations;

                    $form.find(".error").remove();
                    if ( o.$pay_form.find(".acard.active.card").length ) {

                        var
                            savedcard = o.$pay_form.find(".acard.active.card"),
                            $cvv_elem = o.$pay_form.find(".ctoken_cvv"),
                            $phone_elem = o.$pay_form.find(".sc_billing_phone"),
                            $savedcard = $(savedcard),
                            cvv_value = $savedcard.find("input.input_cvv_save_card").val(),
                            $phone_val_elem = $savedcard.find("input.input_phone_save_card");

                        $savedcard.find("input[name='card']").prop("checked", true);
                        o.$pay_form.find(".ctoken").val( $savedcard.data("token") );
                        if ( $savedcard.data("verify") ) {

                            o.vault_verify_card = true;

                            if ( ! o.vault_token || o.run_vault_tokenize ) {

                                $this.loading( true );
                                t.http.ajax_request( 'vault_token', 'post', { 'key': $savedcard.data("key"), 'token': o.$pay_form[0].token.value }, function( data ) {

                                    $this.loading();
                                    o.run_vault_tokenize = false;
                                    o.vault_bin = data.bin;
                                    o.vault_token = data.nonce;
                                    $this.click();

                                } );

                                return;

                            }
                            o.run_vault_tokenize = true;

                        }

                        if ( $phone_val_elem.length ) {

                        	$phone_elem.val( $phone_val_elem.val() );

						}

                        errors = t.validator.run( $form, validations_savedcard );

                    } else {

						final_validations = final_validations.filter( function( data ) {

							return ! ( $country.val() == 'US' && ['address', 'city', 'state'].includes( data.field ) );

						} );

                        errors = t.validator.run( $form, final_validations );

                        if ( ! errors.length && typeof o.pg_func['braintree'] != 'undefined' && ( o.run_tokenize || typeof o.pg_func['braintree_nonce'] == 'undefined' ) ) {

                            $this.loading( true );
                            $form.find(".scf-form-error").removeClass("scf-form-error");
                            o.pg_func['braintree']( $this );
                            return;

                        }

                    }

                    if ( errors.length ) {

                        $form.prepend( t.create.notification( 'error', errors[0].error ) );
                        return;

                    }

                    if ( $form.data('update') == 1 ) {

                        $form.submit();
                        return;

                    }
                    //Add entered name to next step
                    var name = $("input[name='card_name']").val();
					if(name != null){
						name = name.trim().split(/\s+/);
	                    $(t.v["modal.signup_form.first_name"]).val(name[0]);
	                    $(t.v["modal.signup_form.last_name"]).val(name[name.length-1]);
                        
					}


                    //t.modal.show('search_ready');

                    $form_close = t.modal.ref['search_ready'].find(".close-modal"),
                    t.v['checkout.agreement'].value = 1;

                    if ( typeof t.modal.ref['signup_form'] != "undefined" ) {

                        o.run_tokenize = true;
                        if ($("#email_address").length) {
                            var email = $("#email_address").val();
                            $('.signup_form input[name="email"]').val(email);
                            $('.signup_form input[name="email_confirm"]').val(email);
                            $('.signup_form .emails-signup-form').hide(); 

                        }

                        // commenting out turnstile for revenue
                        // //t.modal.close('search_ready');
                        // if(!turnstileRendered){
                        //     turnstile.render('.cf-turnstile', {
                        //         sitekey: "0x4AAAAAABCiUaFhjEXaAywY"
                        //     });
                        //     turnstileRendered = true;
                        // }
                        t.modal.show('signup_form');

                    } else {

                        if ( typeof saved_card == "undefined" && o.payment_check ) {

                            var post_data = {
                                token: o.$pay_form.find("input[name='token']").val(),
                            };
                            o.payload && o.payload.details && o.payload.details.cardType && ( post_data.card_type = o.payload.details.cardType );
                            t.http.ajax_request( 'payment_data_check', 'post', post_data, function( response ) {

                                response.verify_card && ( o.verify_card = true );
                                o.payment_check = false;
                                $this.click();

                            } );

                            return;

                        }

                        o.run_tokenize = true;
                        o.payment_check = true;
                        if ( o.verify_card || o.vault_verify_card ) {

                            $this.loading( true );
                            $form_close.hide();

                            o.bt_verify_card( function() {

                                $this.loading();
                                $form_close.show();

                            }, function() {

                                o.submit( el, t, o );

                            }, function() {

                                //t.modal.close('search_ready');

                            } );

                        } else {

                            o.submit( el, t, o );

                        }

                    }
                } );

            },
            form_card: function( el, t, o ) {

                o.$pay_form = $(el);
                var
                    pg = o.$pay_form.data('pg'),
                    $f = {};

                o.$pay_form.extract_vars( $f );

                switch ( pg ) {

                    case 'braintree':

                        ( function() {

                            braintree.client.create( { authorization: bt_auth }, function( err, client ) {
                                
                                if ( err ) return;
                                
                                if ( bt_tds ) {
                                    
                                    braintree.threeDSecure.create( {
                                        authorization: bt_auth,
                                        version: 2
                                    }, function( err, tds ) {
                                        
                                        if ( err ) return;
                                        o.tds = tds;
                                        
                                    } );
                                    
                                }

                                ( function( client ) {

                                    braintree.hostedFields.create( {
                                        client: client,
                                        styles: {
                                            'input': {
                                                'font-size': _frommobileapp ? '16px' : '14px',
                                            },
                                            'select': {
                                                'font-size': _frommobileapp ? '16px' : '14px',
                                            }
                                        },
                                        fields: {
                                            number: {
                                                container: $f.number[0],
                                                placeholder: 'Ex: 4111 1111 1111 1111',
                                            },
                                            cvv: {
                                                container: $f.cvv[0],
                                                placeholder: 'Enter CVV',
                                            },
                                            expirationMonth: {
                                                container: $f.exp_month[0],
                                                select: true,
                                                placeholder: 'MM',
                                            },
                                            expirationYear: {
                                                container: $f.exp_year[0],
                                                select: true,
                                                placeholder: 'YY',
                                            },
                                            postalCode: {
                                                container: $f.postal[0],
                                                placeholder: 'Postal Code',
                                            }
                                        },
                                    }, function( err, hosted_fields ) {

                                        o.pg_func['braintree'] = function( $trigger ) {

                                            var fields_to_be_tokenized = typeof $f.card_name!=="undefined"?{ cardholderName: $f.card_name.val() }:{};

                                            hosted_fields.tokenize( { fields_to_be_tokenized }, function( tokenize_error, payload ) {

                                                $trigger.loading();

                                                if ( tokenize_error ) {

                                                    switch ( tokenize_error.code ) {

                                                        case 'HOSTED_FIELDS_FIELDS_EMPTY':
                                                        case 'HOSTED_FIELDS_FIELDS_INVALID':

                                                            if ( tokenize_error.details && tokenize_error.details.invalidFields ) {

                                                                $.each( tokenize_error.details.invalidFields, function( field_name, field ) {

                                                                    $(field).addClass('scf-form-error');

                                                                } );

                                                            } else if ( ( typeof tokenize_error.message != "undefined" ) && ( typeof hosted_fields._fields != "undefined" ) && /all fields/i.test( tokenize_error.message ) ) {

                                                                $.each( hosted_fields._fields, function( field_name, field ) {

                                                                    field.containerElement && $(field.containerElement).addClass('scf-form-error');

                                                                } );

                                                            }
                                                            break;

                                                    }

                                                } else {

                                                    o.run_tokenize = false;
                                                    o.payload = payload;
                                                    o.pg_func['braintree_nonce'] = payload.nonce;

                                                    ( typeof $f.bt_token != "undefined" ) ? $f.bt_token.val( payload.nonce ) :
                                                    o.$pay_form.append('<input type="hidden" name="bt_token" value="' + payload.nonce + '"/>');

                                                    $trigger.click();

                                                }

                                            } );

                                        };

                                    } );

                                } )( client );

                            });

                        } )();

                        break;

                }

            },
            agreed: function( el, t, o ) {

                var
                    $this = $(el),
                    $form_close = t.modal.ref['search_ready'].find(".close-modal"),
                    $error;

                $this.on( "click", function() {

                    var $f = {};

                    if ( $this.is_loading() ) return;

                    if ( $error ) $error.remove();

                    t.modal.ref['search_ready'].extract_vars( $f );
                    if ( ! $f.tos.is(":checked") ) {

                        $error = t.create.notification('error', 'Please accept the Terms of Service and Privacy Policy.')
                        $f.tos.closest(".agreement").before( $error );
                        return;

                    }

                    t.v['checkout.agreement'].value = 1;
                    o.verify_card = ( bt_tds && ( "pp" != o.pay_method ) && ( ( typeof o.tds != "undefined" && o.payload != null && "MasterCard" == o.payload.details.cardType ) || o.vault_verify_card ) );

                    if ( typeof t.modal.ref['signup_form'] != "undefined" ) {

                        if ($("#email_address").length) {
                            var email = $("#email_address").val();
                            $('.signup_form input[name="email"]').val(email);
                            $('.signup_form input[name="email_confirm"]').val(email);
                            $('.signup_form .emails-signup-form').hide(); 

                        }

                        // if(!turnstileRendered){
                        //     turnstile.render('.cf-turnstile', {
                        //         sitekey: "0x4AAAAAABCiUaFhjEXaAywY"
                        //     });
                        //     turnstileRendered = true;
                        // }
                        t.modal.close('search_ready');
                        t.modal.show('signup_form');

                    } else {

                        if ( o.verify_card ) {

                            $this.loading( true );
                            $form_close.hide();

                            o.bt_verify_card( function() {

                                $this.loading();
                                $form_close.show();

                            }, function() {

                                o.submit( el, t, o );

                            }, function() {

                                t.modal.close('search_ready');

                            } );

                        } else {

                            o.submit( el, t, o );

                        }

                    }

                } );

            },
            paypal_ec: function( el, t, o ) {

                $(el).on( "click", function() {
                    grecaptcha.ready(function () {
                        grecaptcha.execute('6LftTMMeAAAAAHodlggyeFfE5vOJRAvyArRZqkZv', { action: 'checkout' }).then(function (token) {
                            token_r3 = token;
                        });
                    });
                    o.pay_method = 'pp';
                    o.$pay_form = $(t.v['checkout.form_pp']);
                    t.modal.show('search_ready');
                    t.modal.close('pp_fastlane');
                    t.modal.close('pp_card_select');
                } );

            },
            send_token_update: function( t, callback ) {

                var post_data = t.checkout.$pay_form.serializeObject();
                t.http.ajax_request( 'token_update', 'post', post_data, function( response ) {

                    callback();

                } );

            },
            submit: function( el, t, o ) {

                $(el).loading( true );
                t.modal.show_fs_overlay();

                if ( 'pp' == o.pay_method ) {
                    o.$pay_form.submit();
                    return;

                } else {

                    var
                        pg = o.$pay_form.data('pg'),
                        $ext_form = null,
                        pg_data = o.$pay_form.serializeObject(),
                        callback = null;

                    // Payflow Pro
                    if ( 'payflowpro' == pg ) {

                        $ext_form = $(t.v['checkout.pg.form_payflow']);
                        callback = function() {

                            var
                                $from = {},
                                $target = {};

                            $ext_form.extract_vars( $target );
                            t.checkout.$pay_form.extract_vars( $from );
                            t.input_data_update( $target, $from, { acc: 'card_number', cvv: 'card_cvv', email: 'email', firstname: 'firstname', lastname: 'lastname', street: 'address', zip: 'postal_code' } );
                            $target.exp.val( ( '00' + $from.card_expiry_month.val() ).slice(-2) + ( '00' + $from.card_expiry_year.val() ).slice(-2) );
                            $ext_form.submit();

                        };

                    }

                    if ( callback != null ) o.send_token_update( t, callback );
                    else o.$pay_form.submit();

                }

            },
            bt_verify_card: function( load, success, fail ) {

                var
                    o = this,
                    $f = {};

                o.$pay_form.extract_vars( $f );

                if ( typeof $f.bt_user_token != "undefined" ) {

                    $f.bt_user_token.val() && ( o.post_data = JSON.parse( atob( $f.bt_user_token.val() ) ) );

                }

                o.tds.verifyCard( {
                    onLookupComplete: function ( data, next ) {

                        next();

                    },
                    amount: o.$pay_form.data("amount"),
                    nonce: o.vault_verify_card ? o.vault_token : o.payload.nonce,
                    bin: o.vault_verify_card ? o.vault_bin : o.payload.details.bin,
                    email: o.post_data.email,
                    billingAddress: {
                        givenName: o.post_data.billing_firstname,
                        surname: o.post_data.billing_lastname
                    }
                }, function( err, payload ) {

                    load();
                    if ( ! err && ( ! payload.liabilityShiftPossible || payload.liabilityShifted ) ) {

                        $f.bt_token.val( payload.nonce );
                        success();

                    } else {

                        delete o.pg_func['braintree_nonce'];
                        o.vault_token = o.vault_bin = null;
                        fail();

                    }

                } );

            },
            user_data_submit: function( el, t, o ) {
                
                var
                    $form = $( t.v['modal.signup_form.form'] ),
                    $form_close = t.modal['signup_form'].$modal_obj.find(".close-modal"),
                    $this = $(el);

                $this.on( "click", function() {

                    if ( $this.is_loading() ) return;

                    var post_data = $form.serializeObject();
                    t.http.ajax_request( 'check_transactions', 'post', post_data, function( response ) {
                        captcha_resolved = ( typeof t.v['google.recaptcha.key'] != 'undefined' );
                            if ( ! captcha_resolved && (response.name_count > 50 || response.card_count > 0 )) {
                                t.v['google.recaptcha.checkout'] = true; 
                                t.modal.show('secure_recaptcha');
                                return false;
                            } else{
                               
                                o.post_data = post_data;
                                o.payload && o.payload.details && o.payload.details.cardType && ( o.post_data.card_type = o.payload.details.cardType );
                                o.post_data.bin=o.payload.details.bin;
                                $this.loading( true );
                                $('#form-alert').show().html('<div class="scf-notification warning">Processing.. please don\'t close the tab</div>' );
                                $form_close.hide();
                                if (typeof token_r3 !== 'undefined' && token_r3 !== null) {
                                    post_data['token_r3'] = token_r3;
                                } else {
                                    post_data['token_r3'] = ''; 
                                }
                                t.http.ajax_request( 'membership_signup', 'post', post_data, function( response ) {

                                    var
                                        $err = $form.find('.error'),
                                        purpose = '',
                                        $f = {};
            
                                    $err.remove();
                                    if ( ! response.status ) {
                                        $('#form-alert').hide();
                                        $this.loading();
                                        $form_close.show();
                                        if (response.message == "Login User") {
            
                                            t.modal.close('signup_form');
                                            $('.existing_user_login').show();
                                            if (response.active_plans == false) {
                                                $('.existing_user_login .existing_login h2').text("Welcome back!");
                                                $('.existing_user_login .existing_login p').text("Please log in to complete purchase");
                                                $('.existing_user_login .login-controller').text("Login and Process Payment");
                                            } else {
                                                $('.existing_user_login .existing_login h2').text("That email is already in use.");
                                                $('.existing_user_login .existing_login p').text("Please login");
                                                $('.existing_user_login .login-controller').text("LOGIN NOW");
                                            }
                                            $('#redirect').val(window.location.href);
            
                                        }
            
                                        $form.prepend( t.create.notification( 'error', response.message ) );
                                        return;
            
                                    }
            
                                    o.$pay_form.extract_vars( $f );
                                    $f.firstname.val( post_data.billing_firstname );
                                    $f.lastname.val( post_data.billing_lastname );
                                    $f.email.val( post_data.email );
                                    $f.password.val( post_data.password );
                                    $f.signup_purpose.val( purpose );
                                    response.verify_card && ( o.verify_card = response.verify_card );

                                    localStorage.setItem("is_new_user", "true");
            
                                    if ( o.verify_card ) {
            
                                        o.bt_verify_card( function() {
            
                                            $this.loading();
                                            $form_close.show();
            
                                        }, function() {
            
                                            o.submit( el, t, o );
            
                                        }, function() {
            
                                            t.modal.close('signup_form');
            
                                        } );
            
                                    } else {
            
                                        $this.loading();
                                        $form_close.show();
                                        o.submit( el, t, o );
            
                                    }
            
                                } );
                            }
                    });
                    

                } );

            },
            plan_selection: function ( el, t, o ) {

                $(el).on( "change", "input", function() {

                    var $this = $(this);
                    t.v['checkout.plan_id_pp'].value = this.value;
                    t.v['checkout.plan_id_cc'].value = this.value;
                    if ( t.v['checkout.plan_id_pcb'] ) t.v['checkout.plan_id_pcb'].value = this.value;
                    t.v['modal.search_ready_agreement'].textContent = atob( $this.data("agreement") );
                    $( t.v['checkout.form_pcb'] ).toggleClass( 'hide', ! $this.parents(".pcb").length );
                    o.$pay_form.data("amount", $this.data("amount") );

                } );

            },
            countdown_collapse: function ( el, t ) {

                $(el).on( "click", function() {

                    $(t.v['checkout.count_down_text']).toggle();

                } );

            },
            what_you_get: function ( el, t ) {

                $(el).on( "click", function() {

                    var $this = $(el);
                    $( ".scf-app-checkout .what-you-get span" ).removeClass();

                    if ( $this.hasClass( "active" ) ) {
                        $this.removeClass( "active" );
                        $( ".scf-app-checkout .what-get-content" ).hide();
                        $( ".scf-app-checkout .what-you-get span" ).addClass( "si-down" );
                    } else {
                        $this.addClass( "active" );
                        $( ".scf-app-checkout .what-get-content" ).show();
                        $( ".scf-app-checkout .what-you-get span" ).addClass( "si-up" );
                    }

                } );

            },
            saved_cards: function ( el, t, o ) {

                var
                    $card_opt_list = $(el).find(".acard").on( "click", function() {

                        var $this = $(this);
                        $this.addClass("active").siblings("div").removeClass("active");

                        if ( $this.attr("id") != "add-new-card" ) {

                            $this.find("input[name='card']").prop("checked", true);

                            $(".collapsable-fields").hide();

                            o.$pay_form.find(".ctoken").val($this.data("token"));

                            if( $this.find("input.input_cvv_save_card").length && $this.find("input.input_cvv_save_card").val().length > 2 ) {

                                o.$pay_form.find(".ctoken_cvv").val($this.find("input.input_cvv_save_card").val());

                            } else {

                                o.$pay_form.find(".ctoken_cvv").val("");

                            }

                        } else {

                            o.$pay_form.find(".ctoken").val("");
                            o.$pay_form.find(".ctoken_cvv").val("");
                            $(".collapsable-fields").show();

                        }

                    } ),

                $forced = $card_opt_list.filter(".forced");

                if ( $forced.length ) {

                    $forced.scrollTo();
                    $forced.find("input[type='radio']").click();
                    $forced.parent().parent().find("input[name='card_name']").focus();

                }

            },
            select_state: function ( el, t, o ) {

                $(el).on( "change", function() {

                    var $this = $(this);
                    var val = $this.val();
                    $("#billing_state_txt").val(val);
                    if(val == ""){
                        $("#billing_state_txt").show();
                    } else {
                        $("#billing_state_txt").hide();
                    }

                } );

            },
            phone_required: function ( el, t, o ) {
                $(el).on( "click", function() {
                    grecaptcha.ready(function () {
                        grecaptcha.execute('6LftTMMeAAAAAHodlggyeFfE5vOJRAvyArRZqkZv', { action: 'checkout' }).then(function (token) {
                            token_r3 = token;
                        });
                    });
                    if (  !t.validator.phone( $("#search_phone").val() )) {
                        $("#phone_error").addClass("scf-notification error")
                        $("#phone_error").html( "Invalid Phone Number" );
                        return false;
                    }      
                    $("#phone_error").removeClass("scf-notification error")
                    $("#phone_error").html( "" );              
                    var post_data = { number:  $("#search_phone").val()}                    
                    t.http.ajax_request( 'search_specialist_phone', 'post', post_data, function( response ) {
                        o.pay_method = 'pp';
                        o.$pay_form = $(t.v['checkout.form_pp']);
                        t.modal.show('search_ready');
                        t.modal.close('phone_required');
                        t.modal.close('pp_fastlane');
                        t.modal.close('pp_card_select');
                    }
                    );
                });              
            },
            combine_plan: function ( el, t, o ) {

                $(el).on( "click", function() {

                    var $this = $(this),
                        token = $this.data( "token" );     

                    if( $this.is(":checked") ) {
                        //window.location.href = path.base_url+'membership-levels/?token=' + token + '&type=regular_premium_combine';
                        t.http.ajax_request( 'set_regular_premium_combine_plan', 'post', "", function( response ) {
                            location.reload();
                        });
                    } else {
                        //window.location.href = path.base_url+'membership-levels/?token=' + token + '&type=regular';
                        t.http.ajax_request( 'unset_regular_premium_combine_plan', 'post', "", function( response ) {
                            location.reload();
                        });
                    }

                });

            },
            toggle_tab: function ( el, t, o ) {

                $(el).on( "click",'li', function() {
                $(el).find('li').removeClass('active');
                $(this).addClass('active');
                $('.scf-plans').hide();
                $('#tab-'+$(this).data('target')).show();
                if($(this).data('target')=='regular'){
                    $('#lm_tab').hide();
                }else{
                    $('#lm_tab').show();
                }

                });

            },
            toggle_switch: function (el, t, o) {

                $(el).on("click", 'li', function () {
                    $(el).find('li').removeClass('active');
                    $(this).addClass('active');
                    var target = $(this).data('target');
                   
                    
                    $('.lt-price-label').each(function (i, obj) {
                        $(obj).html('$ ' + $(obj).data('price-' + target) + '<span>/ ' + target + '</span>');
                    });
                    $('.lt-id').each(function (i, obj) {
                        $(obj).val($(obj).data('id-' + target));
                        var active_plans = Object.values($('#lm_tab').data('active_plans'));


                        if($('#lm_tab').data('has_ss')=='1' || active_plans.includes($(obj).data('id-' + target).toString())){
                            $(obj).parent('form').find('a').removeClass('upgrade').addClass('btn btn-gray').data('disabled','disabled')
                        }else{
                            $(obj).parent('form').find('a').removeClass('btn btn-gray').addClass('upgrade').data('disabled','none')

                        }
                    });
                });

            },
            combo: function ( el, t, o ) {
                $(el).on( "click", function() {

                    var $this = $(this);
                    if($this.attr("id")== "regular_radio"){
                        $("#payment_summary").html(`<ul>
                        <li>
                            <div class="description">Search Subscription (USS/ 3 days)</div>
                            <div class="amount">$ 5.73</div>
                        </li>
                        <li class="total">
                            <div class="description">Due Today</div>
                            <div class="amount">$ 5.73</div>
                        </li>
                    </ul>
                    <p>Cancel anytime. After 3 days, you'll be charged $27.48 per month.</p>`)
                    } else {
                        $("#payment_summary").html(`<ul>
                        <li>
                            <div class="description">Search Subscription (USS/ 3 days)</div>
                            <div class="amount">$ 6.37</div>
                        </li>
                        <li>
                            <div class="description">Premium Data (Single)</div>
                            <div class="amount">$ 3.99</div>
                        </li>
                        <li>
                            <div class="description">Discount / Promotion</div>
                            <div class="amount red">-$ 3.99</div>
                        </li>
                        <li class="total">
                            <div class="description">Due Today</div>
                            <div class="amount">$ 6.37</div>
                        </li>
                    </ul>
                    <p>Cancel anytime. After 3 days, you'll be charged $35.36 per month.</p>`)
                    }
                       
                });
            },
            close_errors: function( el, t ) {
                $(el).on('click', function(){
                    $(this).parents('.error-msg').slideUp();
                });
            },
            cr_business_plan: function( el, t ) {
                $('.business-plans-landing .token').on('click', function(){

                    $('.business-plans-landing .price').text('$ '+$(this).data('plan-price'));
                    $('.business-plans-landing .number').text($(this).data('num-tokens'));
                    $('.business-plans-landing .membership-plan-id').val($(this).data('plan-id'));

                });

            }            
        }
    }
    scf.merge( func );

    // Ajax Pagination
    var func = {
        ajax_pagination: {
            init: function( el, t ) {

                if ( typeof $.fn.tbl_row_refresh == "undefined" ) {

                    $.fn.tbl_row_refresh = this.refresh_row;

                }

                var
                    $this = $(el),
                    pagination_info = this.pagination( $this );
                    this.refs[ pagination_info["id"] ] = pagination_info["obj"];

            },
            refresh_row: function() {

                var
                    $tr = $(this).empty(),
                    row = $tr.data("row_data");

                $.each( row, function( key, value ) {

                    var $td = $("<td></td>");

                    if ( key[0] == "@" ) {

                        $tr.data( key.substring( 1 ), value );

                    } else if ( key[0] == "#" ) {

                        $td.html( value );
                        $tr.append( $td )

                    } else {

                        $td.text( value );
                        $tr.append( $td )

                    }

                } );

            },
            refs: {},
            pagination: function( $this ) {

                var
                    data = $this.data(),
                    $obj = {},
                    $table = $( data["target"] ),
                    $target = $table.find("tbody"),
                    $buttons = $this.find("li").on( "click", function( event ) {

                        $obj.button_event.call( $obj, event, this );

                    } );

                if ( ! $target.length ) return;

                $obj = {
                    data_id: data["data_id"],
                    $table: $table,
                    $target: $target,
                    page_data: {},
                    current_page: null,
                    $buttons: $buttons,
                    $page_buttons: $buttons.filter(".page"),
                    rpp: data["rpp"],
                    tp: data["tp"],
                    nr: data["nr"],
                    init_bc: data["button_count"],
                    button_count: data["button_count"],
                    center: Math.floor( data["button_count"] / 2 ) + 1,
                    nav_buttons: {},
                    url: data["url"],
                    identify_nav_buttons: function() {

                        var
                            nav_buttons = [ 'first', 'last', 'next', 'previous', 'prev_pages', 'more_pages' ],
                            $obj = this;

                        $.each( this.$buttons, function( index ) {

                            var
                                $this = $(this),
                                identifier = $this.data("page");

                            if ( identifier && nav_buttons.includes( identifier ) ) {

                                $obj.nav_buttons[ '$' + identifier ] = $this;

                            }
                            $this.removeAttr("data-page");

                        } );

                    },
                    refresh_page: function( purge_all ) {

                        if ( typeof purge_all != "undefined" && purge_all ) {

                            this.page_data = {};

                        } else {

                            delete this.page_data[ this.current_page ];

                        }

                        this.change_page( this.current_page );

                    },
                    button_event: function( event, obj ) {

                        var
                            $this = $(obj),
                            disabled = $this.hasClass("disabled"),
                            active = $this.hasClass("active"),
                            page = $this.data("page");

                        if ( disabled || active || this.nr ) {

                            return;

                        } else if ( page == "next" && ( ( this.current_page + 1 ) <= this.tp ) ) {

                            page = this.current_page + 1;

                        } else if ( page == "previous" && this.current_page > 1 ) {

                            page = this.current_page - 1;

                        } else if ( page == "last" ) {

                            page = this.tp;

                        } else if ( page == "first" ) {

                            page = 1;

                        }

                        ( typeof page == "number" ) && this.change_page( page );

                    },
                    change_button_count: function() {

                        var
                            buttons = this.$buttons,
                            pages = buttons.filter(".page").show(),
                            guides = buttons.filter(".guide").removeClass(".hide");

                        this.center = Math.floor( this.init_bc / 2 ) + 1;
                        this.button_count = this.init_bc;

                        if ( this.tp < this.button_count ) {

                            pages.slice( this.tp ? this.tp : 1 ).hide();
                            guides.addClass(".hide");
                            this.center = Math.floor( this.tp / 2 ) + 1;
                            this.button_count = this.tp;

                        }

                    },
                    update_table: function( page ) {

                        var
                            data = this.page_data[ page ],
                            $target = this.$target;

                        if ( typeof data !== "undefined" ) {

                            $target.children().remove().end();

                            data.forEach( function( row, index ) {

                                var
                                    $tr = $("<tr></tr>").data( "row_data", data[ index ] );

                                $tr.tbl_row_refresh();
                                $target.append( $tr );

                            } );

                            this.current_page = page;
                            this.activate_page( page );

                        }

                        this.$table.removeClass("loading");

                    },
                    activate_page: function( page ) {

                        var
                            start_pos = page - ( this.center - 1 ),
                            start = ( start_pos < 1 ) ? 1 : ( ( start_pos + this.button_count ) > this.tp ? ( this.tp - ( this.button_count - 1 ) ) : start_pos ),
                            current_start = this.$page_buttons.eq(0).data("page"),
                            re_number = ( start != current_start ),
                            btn_page = start;

                        $.each( this.$page_buttons, function() {

                            var
                                $this = $(this);

                            re_number && $this.data("page", btn_page ).text( btn_page );
                            $this.toggleClass( "active", ( btn_page == page ) );
                            btn_page++;

                        } );

                        this.nav_buttons.$first && this.nav_buttons.$first.toggleClass( "disabled", ( page <= 1 ) );
                        this.nav_buttons.$previous && this.nav_buttons.$previous.toggleClass( "disabled", ( page <= 1 ) );
                        this.nav_buttons.$next && this.nav_buttons.$next.toggleClass( "disabled", ( page >= this.tp ) );
                        this.nav_buttons.$last && this.nav_buttons.$last.toggleClass( "disabled", ( page >= this.tp ) );
                        this.nav_buttons.$prev_pages && this.nav_buttons.$prev_pages.toggleClass( "hide", ( page <= this.button_count ) );
                        this.nav_buttons.$more_pages && this.nav_buttons.$more_pages.toggleClass( "hide", ( page > ( this.tp - this.button_count ) ) );

                    },
                    change_page: function( page ) {

                        var
                            cached_data = ( typeof this.page_data[ page ] !== "undefined" ),
                            $obj = this;

                        this.$table.addClass("loading");

                        if ( cached_data ) {

                            this.update_table( page );

                        } else {

                            scf.http.request( this.url, 'post', { page: page }, 'json', function( response ) {

                                if ( response.status ) {

                                    $.each( response.data, function( page_number, page_data ) {

                                        if ( typeof $obj.page_data[ page_number ] === "undefined" ) {

                                            $obj.page_data[ page_number ] = page_data;

                                        }

                                    } );

                                    $obj.update_table( page );

                                }

                            } );

                        }

                    }
                };

                $obj.identify_nav_buttons();

                $obj.page_data = ( typeof ajax_tbl_data[ $obj["data_id"] ] !== "undefined" ) ? ajax_tbl_data[ $obj["data_id"] ] : [];
                delete( ajax_tbl_data[ $obj["data_id"] ] );

                $obj.nr ? $obj.$buttons.addClass("disabled") : $obj.change_page(1);

                return { id: data["data_id"], obj:$obj };

            }
        },
    };
    scf.merge( func );

    // Dr.Phil
    var func = {
        drphil: {
            checkout: {
                form: function( el, t ) {

                    $(el).on( "submit", function() {

                        $(t.v['drphil.checkout.go']).loading(true);

                    } );


                },
            },
            countdown: function() {

                // Set the date we're counting down to
                var countDownDate = new Date("May 4, 2023 12:30:00").getTime();

                // Update the count down every 1 second
                var x = setInterval( function() {

                    // Get today's date and time
                    var now = new Date().getTime();

                    // Find the distance between now and the count down date
                    var distance = countDownDate - now;

                    // Time calculations for days, hours, minutes and seconds
                    var days = Math.floor(distance / (1000 * 60 * 60 * 24));
                    var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                    var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
                    var seconds = Math.floor((distance % (1000 * 60)) / 1000);

                    $( ".phil-countdown #days" ).text( days );
                    $( ".phil-countdown #hrs" ).text( hours );
                    $( ".phil-countdown #min" ).text( minutes );
                    $( ".phil-countdown #sec" ).text( seconds );


                    // If the count down is over, write some text
                    if (distance < 0) {
                        clearInterval(x);
                        $( ".phil-countdown #days" ).text( "00" );
                        $( ".phil-countdown #hrs" ).text( "00" );
                        $( ".phil-countdown #min" ).text( "00" );
                        $( ".phil-countdown #sec" ).text( "00" );
                    }

                }, 1000 );

            }
        }
    };
    scf.merge( func );

    // Opt-Out
    var func = {
        optout: {
            
            company_hide: function( el, t){
                $( document ).ready(function() {
                    //alert($(el).data("step"))
                    //if( $(el).data("msg") != "" && $(el).data("step") != "step3" ) window.scroll(0, 400);
                    if( $(el).data("step") == "Y" ) {
                        $('.opt-out-content.get-started').css('margin-bottom', '24px');
                        $('.opt-out-content.get-started').css('border-radius', '8px 8px 8px 8px');
                    }
                    
                });
                $(el).on( "click", function(){
                    $("#txtcomname").val("");
                    $('.opt-out-content.get-started1').css('display', 'none');
                    $('.opt-out-content.get-started1').css('visibility', 'hidden'); 
                    $('.opt-out-content.get-started').css('margin-bottom', '24px');
                    $('.opt-out-content.get-started').css('border-radius', '8px 8px 8px 8px');

                    if($(this).val() == 3){
                        $(".law-enforcement-note").show();
                    }else{                        
                        $(".law-enforcement-note").hide();
                    }
                });
            },
            company_show: function( el, t){
                $(el).on( "click", function(){
                $('.opt-out-content.get-started1').css('display', 'block');
                    $('.opt-out-content.get-started1').css('visibility', 'visible');
                    $('.opt-out-content.get-started').css('margin-bottom', '0px');
                    $('.opt-out-content.get-started').css('border-radius', '8px 8px 0px 0px');

                    if($(this).val() == 4){
                        $(".law-enforcement-note").show();
                    }else{                        
                        $(".law-enforcement-note").hide();
                    }
                });
                
            },
            del: function() {

                $(this).parent().remove();

            },
            delete_elm: function( el, t, o ) {

                $(el).on( "click", o.del );

            },
            $delete: $('<span class="si-delete"></span>'),
            add_field: function( el, t, o ) {

                var
                    $this = $(el),
                    $obj = $this.siblings(".input-opt").eq(0).clone().append( o.$delete.clone( true ).on( "click", o.del ) );

                $obj.find("input").val("");

                $this.on( "click", function() {

                    $this.before( $obj.clone( true ) );

                } );

            },
            clone_divs:function( el, t ){
                $(el).click(function(){
                    $( ".opt-out-inner.request_update .row.update" ).eq(0).clone().appendTo( ".opt-out-inner.request_update .more-updates" );
                });
            },
			filter: function( el, t ) {

				$(el).on( "change", function() {

					var
						$this = $(this),
						type = $this.val(),
						$container = $( "html,body" ),
                        ccpatype = $(this).data("ccpatype");

					if(  type != "" ) {

						$(".scf-optout #step2").removeClass( "deactivate" );
						$(".scf-optout #step3").addClass( "deactivate" );

						$("#step2_form :input").prop( "disabled", false );
						$("#step3_form :input").prop( "disabled", true );

						$('#step3_form').trigger("reset");

                        $(".scf-optout .checkbox.state_chk").css("display", "block");
                        $(".scf-optout .state_chk_imput").css("display", "block");
                        
                        
                        $(".scf-optout .checkbox.state_chk").html('<input type="checkbox" class="state_chk_imput"  data-state="'+ type +'" name="status" value="'+ type +'" ><span class="checkmark"></span> I verify I am a resident of '+ type +' and am the person named above or their registered agent. I understand I may not make this request unless I am a resident of '+ type +' and the person named above, or the registered agent of said verified resident of '+ type + ' *' );


					} 
                    
                    // if( type == "California" || type == "Nevada"  && ccpatype === "request_update"){
                    //     console.log("tesr");
					// 	$(".scf-optout #step2").addClass( "deactivate" );
					// 	$(".scf-optout #step4").removeClass( "deactivate" );

					// 	$("#step2_form :input").prop( "disabled", true );
					// 	$("#step4 :input").prop( "disabled", false );

					// 	$('#step2_form').trigger("reset");
                    
					// 	var $scrollTo = $('.scf-optout #step4');
					// 	$container.animate( { scrollTop: $( $scrollTo ).offset().top }, 300 );
					// }
                    else if( ccpatype === "request_update" ){
                        // t.fl(path.base_url + "opt-out");

						// $(".scf-optout #step2").addClass( "deactivate" );
						// $(".scf-optout #step4").removeClass( "deactivate" );

						// $("#step2_form :input").prop( "disabled", true );
						// $("#step4 :input").prop( "disabled", false );

						// $('#step2_form').trigger("reset");
                        // $( "#nv_resident_check" ).prop( "disabled", true );
                        // $( "#ca_resident_check" ).prop( "disabled", true );
						// var $scrollTo = $('.scf-optout #step4');
						// $container.animate( { scrollTop: $( $scrollTo ).offset().top }, 300 );
					}
                    else{
                        // t.fl(path.base_url + "opt-out");
                    }

                    // if (type == "California") {
                    //     $(".resident_title span").text("California Residents");
                    //     $(".ccpa_step_3").html("Not a California Resident? <span>Click Here.</span>");
                    //     $(".ccpa_step_2").html("California Resident? <span>Click Here.</span>");
                    //     $("#nv_resident_check").hide();
                    //     $("#co_resident_check").hide();
                    //     $("#ct_resident_check").hide();
                    //     $("#fl_resident_check").hide();
                    //     $("#or_resident_check").hide();
                    //     $("#tx_resident_check").hide();
                    //     $("#ut_resident_check").hide();
                    //     $("#va_resident_check").hide();
                    //     $("#ca_resident_check").css("display", "block");
                    // } else if (type == "Colorado") {
                    //     $(".resident_title span").text("Colorado Residents");
                    //     $(".ccpa_step_3").html("Not a Colorado Resident? <span>Click Here.</span>");
                    //     $(".ccpa_step_2").html("Colorado Resident? <span>Click Here.</span>");
                    //     $("#ca_resident_check").hide();
                    //     $("#nv_resident_check").hide();
                    //     $("#ct_resident_check").hide();
                    //     $("#fl_resident_check").hide();
                    //     $("#or_resident_check").hide();
                    //     $("#tx_resident_check").hide();
                    //     $("#ut_resident_check").hide();
                    //     $("#va_resident_check").hide();
                    //     $("#co_resident_check").css("display", "block");
                    // } else if (type == "Connecticut") {
                    //     $(".resident_title span").text("Connecticut Residents");
                    //     $(".ccpa_step_3").html("Not a Connecticut Resident? <span>Click Here.</span>");
                    //     $(".ccpa_step_2").html("Connecticut Resident? <span>Click Here.</span>");
                    //     $("#ca_resident_check").hide();
                    //     $("#nv_resident_check").hide();
                    //     $("#co_resident_check").hide();
                    //     $("#fl_resident_check").hide();
                    //     $("#or_resident_check").hide();
                    //     $("#tx_resident_check").hide();
                    //     $("#ut_resident_check").hide();
                    //     $("#va_resident_check").hide();
                    //     $("#ct_resident_check").css("display", "block");
                    // } else if (type == "Florida") {
                    //     $(".resident_title span").text("Florida Residents");
                    //     $(".ccpa_step_3").html("Not a Florida Resident? <span>Click Here.</span>");
                    //     $(".ccpa_step_2").html("Florida Resident? <span>Click Here.</span>");
                    //     $("#ca_resident_check").hide();
                    //     $("#nv_resident_check").hide();
                    //     $("#co_resident_check").hide();
                    //     $("#ct_resident_check").hide();
                    //     $("#or_resident_check").hide();
                    //     $("#tx_resident_check").hide();
                    //     $("#ut_resident_check").hide();
                    //     $("#va_resident_check").hide();
                    //     $("#fl_resident_check").css("display", "block");
                    // } else if (type == "Nevada") {
                    //     $(".resident_title span").text("Nevada Residents");
                    //     $(".ccpa_step_3").html("Not a Nevada Resident? <span>Click Here.</span>");
                    //     $(".ccpa_step_2").html("Nevada Resident? <span>Click Here.</span>");
                    //     $("#ca_resident_check").hide();
                    //     $("#co_resident_check").hide();
                    //     $("#ct_resident_check").hide();
                    //     $("#fl_resident_check").hide();
                    //     $("#or_resident_check").hide();
                    //     $("#tx_resident_check").hide();
                    //     $("#ut_resident_check").hide();
                    //     $("#va_resident_check").hide();
                    //     $("#nv_resident_check").css("display", "block");
                    // } else if (type == "Oregon") {
                    //     $(".resident_title span").text("Oregon Residents");
                    //     $(".ccpa_step_3").html("Not an Oregon Resident? <span>Click Here.</span>");
                    //     $(".ccpa_step_2").html("Oregon Resident? <span>Click Here.</span>");
                    //     $("#ca_resident_check").hide();
                    //     $("#nv_resident_check").hide();
                    //     $("#co_resident_check").hide();
                    //     $("#ct_resident_check").hide();
                    //     $("#fl_resident_check").hide();
                    //     $("#tx_resident_check").hide();
                    //     $("#ut_resident_check").hide();
                    //     $("#va_resident_check").hide();
                    //     $("#or_resident_check").css("display", "block");
                    // } else if (type == "Texas") {
                    //     $(".resident_title span").text("Texas Residents");
                    //     $(".ccpa_step_3").html("Not a Texas Resident? <span>Click Here.</span>");
                    //     $(".ccpa_step_2").html("Texas Resident? <span>Click Here.</span>");
                    //     $("#ca_resident_check").hide();
                    //     $("#nv_resident_check").hide();
                    //     $("#co_resident_check").hide();
                    //     $("#ct_resident_check").hide();
                    //     $("#fl_resident_check").hide();
                    //     $("#or_resident_check").hide();
                    //     $("#ut_resident_check").hide();
                    //     $("#va_resident_check").hide();
                    //     $("#tx_resident_check").css("display", "block");
                    // } else if (type == "Utah") {
                    //     $(".resident_title span").text("Utah Residents");
                    //     $(".ccpa_step_3").html("Not a Utah Resident? <span>Click Here.</span>");
                    //     $(".ccpa_step_2").html("Utah Resident? <span>Click Here.</span>");
                    //     $("#ca_resident_check").hide();
                    //     $("#nv_resident_check").hide();
                    //     $("#co_resident_check").hide();
                    //     $("#ct_resident_check").hide();
                    //     $("#fl_resident_check").hide();
                    //     $("#or_resident_check").hide();
                    //     $("#tx_resident_check").hide();
                    //     $("#va_resident_check").hide();
                    //     $("#ut_resident_check").css("display", "block");
                    // } else if (type == "Virginia") {
                    //     $(".resident_title span").text("Virginia Residents");
                    //     $(".ccpa_step_3").html("Not a Virginia Resident? <span>Click Here.</span>");
                    //     $(".ccpa_step_2").html("Virginia Resident? <span>Click Here.</span>");
                    //     $("#ca_resident_check").hide();
                    //     $("#nv_resident_check").hide();
                    //     $("#co_resident_check").hide();
                    //     $("#ct_resident_check").hide();
                    //     $("#fl_resident_check").hide();
                    //     $("#or_resident_check").hide();
                    //     $("#tx_resident_check").hide();
                    //     $("#ut_resident_check").hide();
                    //     $("#va_resident_check").css("display", "block");
                    // } else {
                    //     // t.fl(path.base_url + "opt-out");

                    //     // $( ".resident_title span" ).text( "California and Nevada Residents" );
                    //     // $( ".ccpa_step_3" ).html( "Not a California or Nevada Resident? <span>Click Here.</span>" );
                    //     // $( ".ccpa_step_2" ).html( "California Resident? <span>Click Here.</span>" );
                    //     // $( "#nv_resident_check" ).hide();
                    //     // $( "#ca_resident_check" ).hide();
                    // }

					$(".state").val( type );
				} );

			},
			switch_step: function( el, t ) {

				$(el).on( "click", function() {

                    t.fl(path.base_url + "opt-out");

					// var
					// 	$this = $(this),
					// 	type = $this.data("id"),
					// 	$container = $( "html,body" ),
                    //     state = $("#ccpa_state").val();

                        
                        
					// 	if( $this.parents('.deactivate').length ){
					// 		return false;
					// 	}

                        
                        
					// 	if( type == "step2" ) {
                    //         $('#get-started').css('display', 'none');
                    //         $('#get-started').css('visibility', 'hidden');

					// 		$(".scf-optout #step2").removeClass( "deactivate" );
					// 		$(".scf-optout #step3").addClass( "deactivate" );

					// 		$("#step2_form :input").prop( "disabled", false );
					// 		$("#step3_form :input").prop( "disabled", true );

					// 		$('#step2_form').trigger("reset");
					// 		$('#step3_form').trigger("reset");

                            

                    //         if( state == "Nevada" ) {
                    //             $(".state").val( "Nevada" );
                    //             $('#ccpa_state>option:eq(30)').prop( 'selected', true );
                    //             $( ".ccpa_step_3" ).html( "Not a Nevada Resident? <span>Click Here.</span>" );
                    //             $( "#nv_resident_check" ).show();
                    //             $( "#ca_resident_check" ).hide();
                    //         } else {
                    //             $(".state").val( "California" );
                    //             $('#ccpa_state>option:eq(1)').prop( 'selected', true );
                    //             $( ".ccpa_step_3" ).html( "Not a California Resident? <span>Click Here.</span>" );
                    //             $( "#nv_resident_check" ).hide();
                    //             $( "#ca_resident_check" ).show();
                    //         }
					// 	} else {
                    //         $('#get-started').css('display', 'block');
                    //         $('#get-started').css('visibility', 'visible');

					// 		$(".scf-optout #step2").addClass( "deactivate" );
					// 		$(".scf-optout #step3").removeClass( "deactivate" );

					// 		$("#step2_form :input").prop( "disabled", true );
					// 		$("#step3_form :input").prop( "disabled", false );

					// 		$('#step2_form').trigger("reset");
					// 		$('#step3_form').trigger("reset");

                            
					// 	}
					// 	setTimeout( function() {
					// 		if( type == "step3" ) $container.animate( { scrollTop: $( "#get-started" ).offset().top }, 300 );
					// 	}, 500 );

				} );

			},
            res_checkbox: function( el, t ) {

                $(el).on( "change", function() {

                    var $this = $(this)
                        state = $this.val();

                        if (state === "California") {
                            $(".state").val("California");
                            $('#ccpa_state>option:eq(1)').prop('selected', true);
                        } else if (state === "Colorado") {
                            $(".state").val("Colorado");
                            $('#ccpa_state>option:eq(2)').prop('selected', true);
                        } else if (state === "Connecticut") {
                            $(".state").val("Connecticut");
                            $('#ccpa_state>option:eq(3)').prop('selected', true);
                        } else if (state === "Florida") {
                            $(".state").val("Florida");
                            $('#ccpa_state>option:eq(4)').prop('selected', true);
                        } else if (state === "Nevada") {
                            $(".state").val("Nevada");
                            $('#ccpa_state>option:eq(5)').prop('selected', true);
                        } else if (state === "Oregon") {
                            $(".state").val("Oregon");
                            $('#ccpa_state>option:eq(6)').prop('selected', true);
                        } else if (state === "Texas") {
                            $(".state").val("Texas");
                            $('#ccpa_state>option:eq(7)').prop('selected', true);
                        } else if (state === "Utah") {
                            $(".state").val("Utah");
                            $('#ccpa_state>option:eq(8)').prop('selected', true);
                        } else if (state === "Virginia") {
                            $(".state").val("Virginia");
                            $('#ccpa_state>option:eq(9)').prop('selected', true);
                        } else {
                            // state = "Other";
                            // $(".state").val("Select");
                            $('#ccpa_state>option:eq(0)').prop('selected', true);
                        }

                    if( $this.is( ":checked" ) ) {
                        $( ".ca_resident" ).prop( 'checked', false );
                        $this.prop( 'checked', true );
                    }

                });
            },
            optional: function( el, t ) {

                $(el).on( "click", function() {

                    var $this = $( this ),
                        type = $this.data("id");

                    if( type == "Expand" ) {
                        $( ".optional-ccpa-text .opt-out-content" ).show();
                        $this.data( "id", "Hide" );
                        $( this ).html( 'Hide <i class="si-up-circle"></i>' );
                    } else {
                        $( ".optional-ccpa-text .opt-out-content" ).hide();
                        $this.data( "id", "Expand" );
                        $( this ).html( 'Expand <i class="si-down-circle"></i>' );
                    }

                });

            },
            request_form: function( el, t ) {

                $(el).on( "click", function() {

                    $( ".new-opt-out-form" ).toggle();

                });

            },
            optout_details: function( el, t ) {

                $(el).on( "click", function() {

                    var target = $(this).data( "target" );
                    t.modal.show( target );

                });

            },
                check_all_opt: function( el, t ) {

                    $(el).on( "click", function() {
                        var is_checked =$(this).is(':checked'); 
                        var opt_section = $(this).data( "section" );                 
                        if(is_checked) {
                            $( opt_section+" ."+$(this).attr('class') ).prop( 'checked', true );
                        } else {
                            $( opt_section+" ."+$(this).attr('class') ).prop( 'checked', false );
                        } 
                        t.http.ajax_request( 'check_all_opt', 'post', { is_checked: is_checked,class:$(this).attr('class') }, function( response ) {
    
                        });


                    });

                },
                check_all_opt_3rd: function( el, t ) {

                    $(el).on( "click", function() {
                        var is_checked =$(this).is(':checked'); 
                        if( is_checked) {
                            $( ".optout_check_3rd" ).prop( 'checked', true );
                        } else {
                            $( ".optout_check_3rd" ).prop( 'checked', false );
                        }    
                        t.http.ajax_request( 'check_all_opt', 'post', { is_checked: is_checked,class:$(this).attr('class') }, function( response ) {
    
                        });


                    });

                },
                check_single_opt: function( el, t ) {
                    optout_check_single();
                },
                reject_approve: function( el, t ) {

                    $(el).on( "click", function(event) {
                        event.preventDefault();
                        var opt_status = $(this).data( "id" );
                        var opt_section = $(this).data( "section" );

                        var val = [];
                        var type = $(this).data( "type" );
                        //Removed due to CSI-7854 now function via session
                        // $(opt_section+' .optout_check:checked').each(function () {
                        //     val.push( $(this).val() );
                        // });
                        // var id_string=val.join(",");
                        var id_string='just work as a passer';
                        var post_data = { action: opt_status, id: id_string,selection:$(this).data('selection-v2') };
                        t.http.request( path.base_url + "dashboard.html?section=" + type, 'post', post_data, 'json', function( response ) {
                        location.reload();
                        });

                    });

                },
                reject_approve_3rd: function( el, t ) {

                    $(el).on( "click", function(event) {
                        event.preventDefault();
                        var opt_status = $(this).data( "id" );

                        var val = [];
                        var type = $(this).data( "type" );

                        $('.opt-results-list .optout_check_3rd:checked').each(function () {
                            val.push( $(this).val() );
                        });

                        var post_data = { action: opt_status, id: val.join(",") };
                        t.http.request( path.base_url + "dashboard.html?section=" + type, 'post', post_data, 'json', function( response ) {
                            location.reload();
                        });

                    });

                },
            file: function( el, t ) {
                
                $(el).on( "change", function() {

                    var
                        file = this.files[0],
                        $this = $(this),
                        $parent = $this.parent(),
                        $wrapper = $parent.parent();

                    if ( 5242880 < file.size ) {

                        alert( "Please select an image less than 5MB" );
                        $parent.before( $item.clone( true ) ).remove();
                        return false;

                    }

                    if ( ! t.validator.image( file.name  ,file.size) ) {

                        alert( "Please upload an image in one of the following formats: .jpg, .gif, .png, .bmp, .tif. Max file size is 10MB" );
                        $parent.before( $item.clone( true ) ).remove();
                        return false;

                    }
                    var reader = new FileReader();
                    reader.onload = function( e ) {

                        $this.parent().css( { "background-image": "url(" + e.target.result + ")" } ).addClass("active");
                        if ( ! $this.data("changed") && $wrapper.children().length < 8 ) $wrapper.prepend( $item.clone( true ) );
                        $this.data( "changed", true );

                    };
                    reader.readAsDataURL( file );

                } );

                var $item = $(el).parent().clone( true );

            },
            file_update:function(el, t){
                    
                var
                    file = el.files[0],
                    $this = $(el),
                    $parent = $this.parent(),
                    $wrapper = $parent.parent();

                if ( 5242880 < file.size ) {

                    alert( "Please select an image less than 5MB" );
                    $parent.before( $item.clone( true ) ).remove();
                    return false;

                }

                if ( ! t.validator.image( file.name ,file.size) ) {

                    alert( "Please upload an image in one of the following formats: .jpg, .gif, .png, .bmp, .tif. Max file size is 10MB" );
                    $parent.before( $item.clone( true ) ).remove();
                    return false;

                }
                
                        $(el).parent().children("span").text($(el).val().replace('C:\\fakepath\\', ' '));
                    // $(this).parent().text($(this).val().replace('C:\\fakepath\\', ' '));
                //    alert($(this).val().replace('C:\\fakepath\\', ' '));
            },
            ris_optout: function( el, t ) {

                $(el).on( "click", function() {

                    var $this = $(this);

                    if( $this.hasClass( "active" ) ) {
                        $this.removeClass( "active" );
                        $this.html( "Expand <i class='si-down-circle'></i></label>" );
                        $(".ris-optout-content").removeClass("active");
                    } else {
                        $this.addClass( "active" );
                        $this.html( "Hide <i class='si-up-circle'></i></label>" );
                        $(".ris-optout-content").addClass("active");
                    }

                });
            },
            ris_status: function( el, t ) {

                $(el).on( "click", function() {

                    var $this = $(this),
                        post_data = {},
                        id = $this.data( "id" ),
                        status = $this.data( "status" ),
                        phash = $this.data( "phash" );

                    $this.addClass( "loading" );

                    post_data = { "id": id, "status": status, "phash": phash };

                    t.http.ajax_request( "optout_ris_status", 'post', post_data, function( response ) {

                        if ( response.status ) {

                            $this.parent().parent().hide();

                        }

                    });

                });

            },
            domain: function( el, t ) {

                $(el).on( "click", function() {

                    var $this = $(this),
                        post_data = {},
                        id = $this.data( "id" ),
                        status = $this.data( "status" );                      

                    $this.addClass( "loading" );

                    post_data = { "id": id, "status": status};

                    t.http.ajax_request( "block_domain", 'post', post_data, function( response ) {

                        if ( response.status ) {

                            $this.hide();

                        }

                    });

                });
            },
            profile_search: function( el, t ) {

                $(el).on( "click", ".action", function() {

                    var
                        $this = $(this),
                        $parent = $this.parent().parent(),
                        $button = $this.find("span"),
                        id = $parent.data("id"),
                        status = $parent.data("action_status");

                    if ( $this.hasClass("loading") ) return;

                    $this.addClass("loading");

                    t.http.ajax_request( "update_optout", "POST", { id: id, status: status }, function( response ) {

                        var row_data = $parent.data("row_data");
                        row_data['status'] = response.request_status;
                        row_data['@action_status'] = response.action_status;
                        row_data["#action"] = response.action;
                        $parent.tbl_row_refresh();

                    } );


                } );

            },
            domains_blacklist_search:  function( el, t, o ) {
                
                var typingTimer;
                var doneTypingInterval = 2000;
                var $blacklist_customers_input = $(".blacklist_domains_input");
                var originalTableContent = $("#blacklist_customers_list").html();

                $(el).on('keyup', function() {
                    let typingTimer;
                    const doneTypingInterval = 500; // Adjust the interval as needed

                    return function() {
                        clearTimeout(typingTimer);
                        if ($blacklist_customers_input.val()) {
                            typingTimer = setTimeout(function() {
                                o.get_blacklist_domains(el, t, o);
                            }, doneTypingInterval);
                        } else {
                            // If search input is empty, show the original table and pagination
                            o.get_blacklist_domains(el, t, o, originalTableContent);
                        }
                    };
                }());

            },
            get_blacklist_domains: function( el, t, o, originalTableContent ) {
                var domain_search = $("input[name='blacklist_domain']").val();
                domain_search = domain_search.length > 2 ? domain_search : "";                
            
                if( domain_search != '' ) {
                    $("#blacklist_customers_list").html( '<tr><td colspan="3"><div class="spinner-inline"><div class="b1"></div><div class="b2"></div><div class="b3"></div></div></td></tr>' );
                     // Hide pagination if a search is made
                    $("#blocked_domains .scf-pagination").hide();
                    $.ajax({ 
                        url: path.relative_url + "ajax.html?cmd=blacklist_domains", 
                        dataType: 'json', 
                        method: "GET", 
                        data: { 'domain_search': domain_search }, 
                        success: function(d) {
                            if( "domains_list" in d ) {
                                
                                var table = "";
                                $.each(d.domains_list, function(k, v) {
                                    
                                    var status = (v.status == 1) ? "Blocked" : ((v.status == 2) ? "Whitelisted" : "Pending");
                                    table += "<tr>";
                                    table += "<td>" + v.value + "</td>";
                                    table += "<td>" + status + "</td>";
                                    table += "<td class='actions'>";
                                    if (v.status != 2) {
                                        table += "<a class='btn btn-dark-green' data-status='2' data-id='" + v.id + "'>Whitelist</a>";
                                    }
                                    if (v.status != 1) {
                                        table += "<a class='btn btn-danger' data-status='1' data-id='" + v.id + "'>Block</a>";
                                    }
                                    table += "</td>";
                                    table += "</tr>";
                                });

                                $("#blacklist_customers_list").html(table);

                                $("#blacklist_customers_list").find("a.btn").each(function() {
                                    o.domain(this, t);
                                });
                                
                            } else {
                                $("#blacklist_customers_list").html("<tr><td colspan='3'>No Results Found</td></tr>");
                            }
                        }
                    });
                } else {
                    // If search is empty, show the original table and pagination
                    $("#blacklist_customers_list").html(originalTableContent);
                    $("#blocked_domains .scf-pagination").show();
                }
            },
        },
    };
    scf.merge( func );

    // FAQ
    var func = {
        faq: {
            view: function( el, t ) {

                $(el).on( 'click', function() {

                    $(this).siblings().show().end().remove();

                } );

            },
            activate: function( el, t ) {

                $(el).on( "click", function() {

                    $(this).parent().toggleClass("active").find("i").toggleClass("si-down si-up");

                } );

            },
            onclick_close: function( el, t ) {

                $(el).on( 'click', function() {
                    $("#faq-youtube").attr("src", $("#faq-youtube").attr("src"));
                    $('video').trigger('pause');
                    var name = t.modal.parent( el ).data('name');
                    t.modal.close( name );

                } );

            },
            tab: function( el, t ) {

                $(el).on( "click", function() {
                    
                    var $this = $(this),
                        action = $this.data("action");

                        $(".faq-section ul li .faq_tabs label").removeClass( "active" );
                        $this.addClass( "active" );
                        $this.parent().parent().find(".tab_content").hide();
                        $this.parent().parent().find( "." + action ).show();

                } );

            },
            show_login: function( el, t ) {

                $(el).on( "click", function( e ) {

                    if ( t.is_mobile() ) {
                       $(".main-menu.login-mobile > div").toggleClass( "active" );                      
                    } else {
                        $(".scf_login_item").toggleClass( "active" );  
                    }

                    t.http.ajax_request( 'faq_cancel_subscription','post',"", function() { });              
                    $('html, body').animate( { scrollTop: $("body").offset().top }, 500 );

                } );

            }
        },
    };
    scf.merge( func );

    // Signed In Users
    if ( usign ) {

        // Search History
        var func = {
            search_history: {
                class_list: {
                    active: 'active',
                    tab_data: '.tabs-item',
                },
                sort: function( el, t ) {

                    $(el).on( 'change', function() {

                        window.location.href = t.data( el, 'target' ) + "&sort=" + $(this).val();

                    } );

                },
                view: function( el, t ) {

                    $(el).on( "click", function() {

                        var
                            $this = $(this),
                            $parent = $(this).closest(".row");

                        $parent.children(".mobile-view").toggle();
                        $this.find("i").toggleClass("si-up-circle si-down-circle");
                    } );

                },
                pending: function( el, t ) {

                    var
                        $this = $(el),
                        $results = {},
                        interval = null,
                        $table = $( t.v["search_history.results"] );

                    interval = setInterval( function() {

                        var id_list = [];

                        $table.find("a[data-ref]").each( function( i, v ) {

                            var id = $(v).data("id");

                            if ( ! $results[ id ] ) $results[ id ] = $(v);
                            id_list.push( id );

                        } );

                        if ( ! id_list.length ) {

                            clearInterval( interval );
                            return;

                        }

                        post_data = { "id_list": id_list };
                        t.http.ajax_request( "ris_status", 'post', post_data, function( response ) {

                            if ( response.status ) {

                                $.each( response.results, function( i, v ) {

                                    if ( parseInt( v ) ) {

                                        if ( $results[ i ] ) {

                                            var $elm = $results[ i ];
                                            $elm.removeClass("loading btn-darkgray").addClass("btn-ris-pending").text("See Report In-Progress").attr( "data-target", $elm.data("ref") ).removeAttr("data-ref");

                                        }

                                    }

                                } );

                            }


                        } );

                    }, 5000 );

                }
            }
        };
        scf.merge( func );

        var func = {
            search_history_action: function( el, t, o ) {
                
                $( el ).ready(function() {

                    var $table = $( this ),
                        interval = null;

                    interval = setInterval( function() {

                        if ( $('.btn-ris-pending').length == 0 && $('.loading').length == 0 ) {

                            clearInterval( interval );
                            return;

                        }

                        $table.find(".btn-ris-pending").each( function() {

                            var $this = $(this),
                                id = $this.data("id"),
                                ref = $this.data("ref");

                            var post_data = { "id": id };
                            t.http.ajax_request( "get_ris_pending", 'post', post_data, function( response ) {
                                if( response.pending == 0 ) {
                                    $this.removeClass("btn-ris-pending").addClass("btn-dark-green").text("View Report").attr( "data-target", ref ).removeAttr("data-ref");
                                }
                            } );

                        } );

                        $table.find(".loading").each( function() {

                            var $this = $(this),
                                id = $this.data("id");
                            var post_data = { "id": id };
                            t.http.ajax_request( "get_ris_pending", 'post', post_data, function( response ) {
                                if( response.opt_out == 1 ) {
                                    $this.removeClass("loading btn-darkgray").addClass("btn-red btn-blocked").text("Blocked").removeAttr("data-ref").attr( "href", path.base_url + 'no-result/' );
                                }
                            } );

                        } );
        
                    }, 5000 );

                });
            },
            date_controller: {
                from_date: function( el, t, o){
                    $(el).on('change', function(){
                        const fromDate = $(this).val();
                        if( $(this).val() > $("input[name='to']").val() ) $("input[name='to']").val('');
                        $("input[name='to']").attr('min', fromDate);
                    });
                }
            }
        };
        scf.merge( func );

        // Manage Account
        var func = {
            manage_account: {
                class_list: {
                    active: 'active',
                    btn: '.btn',
                    edit: '.btn-light-green',
                    fields: 'input,select',
                    tab_data: '.tabs-item',
                },
                actions: function( el, t, o ) {

                    $el = $(el);
                    $el.find( o.class_list.btn ).on( 'click', function() {

                        var type = this.innerText.toLowerCase().replace( / /, '_' );
                        if ( typeof t.manage_account[type] === "function" ) {

                            t.manage_account[type]( this, t, o );

                        }

                    } ).end().find( o.class_list.fields ).attr( "disabled", "disabled" );
                $('#invite_family_email').removeAttr('disabled');
                },
                tabs: function( el, t, o ) {

                    var
                        $tab_data = $(el).parent().find( o.class_list.tab_data );

                    $(el).find("li").on( "click", function() {

                        var
                            $this = $(this),
                            active = o.class_list.active,
                            index = 0;

                        index = $this.addClass(active).siblings().removeClass(active).end().index();
                        $tab_data.eq( index ).show().siblings( o.class_list.tab_data ).hide();

                    } ).filter(".active").click();

                },
                activate: function( el ) {

                    $(el).click();

                },
                cancel: function( el, t, o ) {

                    $(el).siblings( o.class_list.edit ).show().siblings().hide();
                    o.disable_fields( el, o );

                },
                disable_fields: function( el, o ) {

                    $(el).parents("form").find( o.class_list.fields ).attr( "disabled", "disabled" );

                },
                edit: function( el, t, o ) {

                    $(el).hide().siblings( o.class_list.btn ).show();
                    o.enable_fields( el, o );

                },
                enable_fields: function( el, o ) {

                    $(el).parents("form").find( o.class_list.fields ).removeAttr("disabled")

                    if($('#country-select').val()=='US'){
                      
                        $('#state-input').attr( "disabled", "disabled" );
                        $('#city-input').attr( "disabled", "disabled" );
                    }else{
                        $('#state-select').attr( "disabled", "disabled" );
                        $('#city-select').attr( "disabled", "disabled" );
                    }
                    $('#country-select').change();

                },
                save: function( el ) {

                    $(el).parents("form").submit();

                },
                menu: function( el ) {
                    $(el).on('click',function(){
                        $(this).parent().siblings(".sub_menu").toggleClass("active");
                    });

                },
                country: function( el, t ) {

                    $(el).on( "change", function() {
                      
                        if(this.value=='US'){
                            $('#state-input').addClass('hide').attr( "disabled", "disabled" );
                            $('#city-input').addClass('hide').attr( "disabled", "disabled" );
                            $('#state-select').removeClass('hide').removeAttr( "disabled" );
                            $('#city-select').removeClass('hide').removeAttr( "disabled" );
                        }else{
                            $('#state-select').addClass('hide').attr( "disabled", "disabled" );
                            $('#city-select').addClass('hide').attr( "disabled", "disabled" )
                            $('#state-input').removeClass('hide').removeAttr( "disabled" )
                            $('#city-input').removeClass('hide').removeAttr( "disabled" );
                        }

                    } );
    
                },
                state_ns: function( el, t ) {

                    $(el).on( "change", function() {
                        var state = this.value;
                        if(state){  
                            t.get_cities.dropdown( t.v['search_pointer.city'], state,1,true  );
                        }else{
                            $(".search-filter-city select").empty().append('<option value="">Select a City</option>').prop('disabled', true);
                        }
                    } );
    
                },

            }
        };
        scf.merge( func );

        // Tracking Results
        var func = {
            tracking: {
                export: function( el, t ) {

                    $(el).on( 'click', function() {

                            // Get the HTML table element
                            var table = document.querySelector('table');
                          
                            // Convert the table to a CSV string
                            var csvString = '';
                            var rows = table.querySelectorAll('tr');
                            for (var i = 0; i < rows.length; i++) {
                              var cells = rows[i].querySelectorAll('th, td');
                              for (var j = 0; j < cells.length; j++) {
                                var cellValue = cells[j].innerText.replace(/"/g, '""');
                                csvString += '"' + cellValue + '",';
                              }
                              csvString = csvString.trim().slice(0, -1);
                              csvString += '\r\n';
                            }
                          
                            // Download the CSV file
                            var csvFile = new Blob([csvString], { type: 'text/csv;charset=utf-8;' });
                            var link = document.createElement('a');
                            link.href = URL.createObjectURL(csvFile);
                            link.download = 'table.csv';
                            link.style.display = 'none';
                            document.body.appendChild(link);
                            link.click();
                            document.body.removeChild(link);
                          

                    } );

                },
                export_oid: function( el, t ) {

                    $(el).on( 'click', function() {

                            // Get the HTML table element
                            var table = document.getElementById("oid");
                          
                            // Convert the table to a CSV string
                            var csvString = '';
                            var rows = table.querySelectorAll('tr');
                            for (var i = 0; i < rows.length; i++) {
                              var cells = rows[i].querySelectorAll('th, td');
                              for (var j = 0; j < cells.length; j++) {
                                var cellValue = cells[j].innerText.replace(/"/g, '""');
                                csvString += '"' + cellValue + '",';
                              }
                              csvString = csvString.trim().slice(0, -1);
                              csvString += '\r\n';
                            }
                          
                            // Download the CSV file
                            var csvFile = new Blob([csvString], { type: 'text/csv;charset=utf-8;' });
                            var link = document.createElement('a');
                            link.href = URL.createObjectURL(csvFile);
                            link.download = 'table.csv';
                            link.style.display = 'none';
                            document.body.appendChild(link);
                            link.click();
                            document.body.removeChild(link);
                          

                    } );

                },
                export_mntn: function(el, t) {
                    $(el).on('click', function() {
                        console.log("tests");
                
                        // Get the HTML table element
                        var table = document.getElementById("mntn_report");
                      
                        // Convert the table to a CSV string
                        var csvString = '';
                        var rows = table.querySelectorAll('tr');
                        for (var i = 0; i < rows.length; i++) {
                            if (rows[i].style.display !== 'none') {  // Check if the row is visible
                                var cells = rows[i].querySelectorAll('th, td');
                                for (var j = 0; j < cells.length; j++) {
                                    var cellValue = cells[j].innerText.replace(/"/g, '""');
                                    csvString += '"' + cellValue + '",';
                                }
                                csvString = csvString.trim().slice(0, -1);
                                csvString += '\r\n';
                            }
                        }
                
                        var date = new Date();
                        var day = date.getDate();
                        var month = date.getMonth() + 1; // getMonth() returns month from 0-11
                        var year = date.getFullYear().toString().substr(-2); // get last two digits of the year
                
                        var fDate = month + '-' + day + '-' + year;
                        // Pad the month and day with leading zeros if necessary
                        month = month < 10 ? '0' + month : month;
                        day = day < 10 ? '0' + day : day;
                      
                        // Download the CSV file
                        var csvFile = new Blob([csvString], { type: 'text/csv;charset=utf-8;' });
                        var link = document.createElement('a');
                        link.href = URL.createObjectURL(csvFile);
                        link.download = 'mntn-scf-db-report-' + fDate + '.csv';
                        link.style.display = 'none';
                        document.body.appendChild(link);
                        link.click();
                        document.body.removeChild(link);
                    });
                },
                membership_id_search: function( el, t ) {
                    $("#membershipSearchBtn").click(function(){
                        var membershipId = $("#membershipSearchInput").val().trim();
                        if(membershipId === ""){
                            alert("Please enter a Membership ID.");
                            return;
                        }
                        // Show loading spinner
                        $("#membershipLookupResults").html(
                            '<div class="spinner-inline" style="display: flex; justify-content: center; align-items: center; padding: 20px; margin: 20px auto;">' +
                            '<img src="' + path.relative_url + 'assets/common/js/tinymce/skins/lightgray/img/loader.gif" alt="Loading..."/>' +
                        '</div>'
                        );
                        $.ajax({
                            url: path.relative_url + "ajax.html?cmd=get_membership_details",
                            method: "GET",
                            data: { membership_id: membershipId },
                            dataType: "json",
                            success: function(response) {
                                if(response.success) {
                                    var d = response.details;
                                    var html = "<table class='scf-table table-bordered'><tr>";
                                    html += "<th>Title</th><th>Type</th><th>It Trial Included</th>";
                                    html += "<th>Initial Amount</th><th>Recurring Amount</th><th>Recurring Period</th><th>Tokens</th>";
                                    html += "</tr>";
                                    html += "<tr>";
                                    html += "<td>" + d.title + "</td>";
                                    html += "<td>" + d.type + "</td>";
                                    html += "<td>" + d.it_trial_included + "</td>";
                                    html += "<td>" + d.initial_amount + "</td>";
                                    html += "<td>" + d.recurring_amount + "</td>";
                                    html += "<td>" + d.recurring_period + "</td>";
                                    html += "<td>" + d.tokens_info + "</td>";
                                    html += "</tr></table>";
                                    $("#membershipLookupResults").html(html);
                                } else {
                                    $("#membershipLookupResults").html("<p>" + response.message + "</p>");
                                }
                            },
                            error: function(xhr, status, error) {
                                $("#membershipLookupResults").html("<p>An error occurred: " + error + "</p>");
                            }
                        });
                    });
                },
                toggle: function( el, t ) {

                    /*$(el).on( 'change', function() {

                        var
                            $this = $(this),
                            // tracking = ( $this.text().indexOf('On') > 1 ),
                            tracking = $(this).is(':checked'),
                            id = $this.data('id'),
                            type = $this.data('type');

                        // $this.toggleClass( "btn-danger btn-darkgray" ).contents()[0].nodeValue = 'Tracking ' + ( tracking ? 'Off' : 'On' );
                        $(t.v["tracking.toggle.text"]).text(tracking ? 'ON' : 'OFF' );

                        t.http.request( path.base_url + 'dashboard.html?section=' + ( 'image' == type ? 'update_image_tracking' : 'update_tracking' ) , 'post', { value: id, action: ( tracking ? 1 : 0 ), type: type } );

                        t.modal.show( tracking ? 'tracking_on' : 'tracking_off' );

                    } );*/

                    $(el).on( 'click', function() {
                        var
                            $this = $(this),
							tracking = $(this).is(':checked'),
                            id = $this.data('id'),
                            type = $this.data('type');


                        t.http.request( path.base_url + 'dashboard.html?section=' + ( 'image' == type ? 'update_image_tracking' : 'update_tracking' ) , 'post', { value: id, action: ( tracking ? 1 : 0 ), type: type } );

                        t.modal.show( tracking ? 'tracking_on' : 'tracking_off' );
                        $(t.v["tracking.toggle.text"]).text(tracking ? 'ON' : 'OFF' )

                    } );

                },
                toggle_ris: function( el, t ) {

                    $(el).on( 'click', function() {

                        var
                            $this = $(this),
							tracking = ( $this.find('.tracking-status-label').text() == 'On' ),
                            id = $this.data('id'),
                            type = $this.data('type');

                        $this.toggleClass( "btn-danger btn-darkgray" ).find('.tracking-status-label').contents()[0].nodeValue = ( tracking ? 'Off' : 'On' ); 

                        t.http.request( path.base_url + 'dashboard.html?section=' + ( 'image' == type ? 'update_image_tracking' : 'update_tracking' ) , 'post', { value: id, action: ( tracking ? 0 : 1 ), type: type } );

                        t.modal.show( tracking ? 'tracking_off' : 'tracking_on' );
                    });

                },
                $ris_tracking_toggler : null,
                toggle_ris_report: function( el, t ) {

                    $(el).on( 'click', function() {

                        t.tracking.$ris_tracking_toggler = $this = $(this);
                        $(".how_monitoring_works").find(".slide , .dots-wrapper ul li").removeClass("active");
                        $(".how_monitoring_works").find(".slide.slide-1 , .dots-wrapper ul li:first()").addClass("active");

                        var
							tracking = ( $this.find('.tracking-status').text() == 'On' ),
                            id = $this.data('id'),
                            type = $this.data('type'),
                            tracking_text = tracking ? 'Off' : 'On'
                            $ignore_howto_monitor = $this.data("ignore-howto-monitor") == 1 ? true : false; 
                            
                      
                            if(($ignore_howto_monitor) || tracking){
                                $this.toggleClass( "btn-active" );
                                $this.find('.tracking-status').text(tracking_text ); 

                                t.http.request( path.base_url + 'dashboard.html?section=' + ( 'image' == type ? 'update_image_tracking' : 'update_tracking' ) , 'post', { value: id, action: ( tracking ? 0 : 1 ), type: type } );

                                t.modal.show( tracking ? 'tracking_off' : 'tracking_on' );
                            }else{
                                t.modal.show("how_monitoring_works");
                            }
                    });

                },
                tracking_explain: function( el, t ) {   

                    $(el).on("click",function(){  
                    $this = t.tracking.$ris_tracking_toggler;

                    var
                        tracking = ( $this.find('.tracking-status').text() == 'On' ),
                        id = $this.data('id'),
                        type = $this.data('type'),
                        tracking_text = tracking ? 'Off' : 'On'
                        
                        $this.toggleClass( "btn-active" );
                        $this.find('.tracking-status').text(tracking_text ); 

                        t.http.request( path.base_url + 'dashboard.html?section=' + ( 'image' == type ? 'update_image_tracking' : 'update_tracking' ) , 'post', { value: id, action: ( tracking ? 0 : 1 ), type: type } );

                        t.modal.close( "how_monitoring_works" );
                        t.modal.show( tracking ? 'tracking_off' : 'tracking_on' );
                    });
                },
                tracking_explain_do_not_show_again:function( el, t ) {   

                    $(el).on("click",function(){ 
                        var tracking_status = $(this).is(":checked");

                        if(tracking_status){
                            $(".tracking-btn").data("ignore-howto-monitor", 1);
                        }else{
                            $(".tracking-btn").data("ignore-howto-monitor", 0);
                        }
                        t.http.ajax_request( 'do_not_show_how_to_monitoring', 'post', {"tracking_status" : tracking_status}, function( response ) {});
                     });
                },
                download_table_as_CSV: function(el, t) {
                    $(el).on("click", function() {
                        const table = $('#data-table')[0];
                        const rows = Array.from(table.rows);
                        const csvContent = rows.map(row => {
                            const cols = Array.from(row.cells);
                            return cols.map(cell => $(cell).text()).join(',');
                        }).join('\n');
                
                        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
                        const url = URL.createObjectURL(blob);
                        const link = document.createElement('a');
                        link.href = url;
                         // Get today's date
                        const today = new Date();
                        const dateStr = today.toISOString().split('T')[0]; // Format: YYYY-MM-DD
                        
                        // Set the filename with today's date
                        link.setAttribute('download', `matched_oids_${dateStr}.csv`);
                        
                        document.body.appendChild(link);
                        link.click();
                        document.body.removeChild(link);
                    });
                },
                update_filtered_utm_search: function(el, t) {
                    // Step 1: When the user selects the primary field (source, campaign, or medium)
                    // Inside update_filtered_utm_search in scf.js

                    // Reset UTM filters when the date values change.
                    $("#startDate, #endDate").on("change", function(){
                        // Clear the container that holds UTM filter dropdowns.
                        $("#filter_container").empty();
                        // Also reset the search type select if needed.
                        $("#search_type").val("");
                        // And clear any hidden input fields.
                        $("#hidden_source, #hidden_campaign, #hidden_medium").val("");
                    });

                    $("#search_type").on("change", function(){
                        // Reset hidden inputs and remove dependent dropdowns
                        $("#hidden_source, #hidden_campaign, #hidden_medium").val('');
                        $("#filter_container").empty();
                        $("#primary_value, #additional_filter, #remaining_value").remove();
                        
                        var primary = $(this).val();
                        if (!primary) {
                            return;
                        }

                        // Create a row container and insert spinner markup
                        var $primaryRow = $("<div>", { class: "row" });
                        var spinnerMarkup = '<div class="spinner-inline" style="width:10px;height:10px;margin-top:10px;">' +
                                            '<img src="' + path.relative_url + 'assets/common/js/tinymce/skins/lightgray/img/loader.gif" alt="Loading..."/></div>';
                        $primaryRow.append(spinnerMarkup);
                        $("#filter_container").append($primaryRow);
                        
                        // Retrieve date values from your date inputs
                        var fromDate = $("#startDate").val();
                        var toDate = $("#endDate").val();
                        
                        // Populate dropdown via AJAX
                        $.ajax({
                            url: path.relative_url + "ajax.html?cmd=get_filtered_utm",
                            method: "GET",
                            data: { 
                                filter: primary,
                                from_date: fromDate,
                                to_date: toDate
                            },
                            dataType: "json",
                            success: function(response) {
                                // Clear the spinner and build the primary dropdown
                                $primaryRow.empty();
                                var primaryLabel = $("<label>").attr("for", "primary_value").text("Select " + primary + ":");
                                var primarySelect = $("<select>", { 
                                    id: "primary_value",
                                    class: "scf-form",
                                    "data-field": primary 
                                });
                                
                                primarySelect.append(
                                    $("<option>", { value: "", text: "Select your option", disabled: true, selected: true })
                                );
                                primarySelect.append($("<option>", { value: "", text: "All " + primary }));
                                var $primaryCol = $("<div>", { class: "col-md-6" }).append(primaryLabel).append(primarySelect);
                                $primaryRow.append($primaryCol);
                                
                                var options = response.result[primary];
                                $.each(options, function(key, value) {
                                    primarySelect.append($("<option>", { value: value, text: value }));
                                });
                            },
                            error: function(xhr, status, error) {
                                $primaryRow.empty();
                                console.error("Error fetching options for", primary, error);
                            }
                        });
                    });
                    
                    // Step 2: When user selects a primary value, update the corresponding hidden
                    // input and show an additional filter selector.
                    $("#filter_container").on("change", "#primary_value", function(){
                        var primary = $(this).data("field");       // e.g. "source", "campaign", or "medium"
                        var primaryVal = $(this).val();              // the selected option
                        $("#hidden_" + primary).val(primaryVal);     // update the corresponding hidden field
                        
                        // Clear any additional filtering rows that might already exist
                        $("#addFilter_row, #remaining_row, #addField_row").remove();
                        
                        // Create a new row; insert a spinner as a visual indicator
                        var $addFilterRow = $("<div>", { id: "addFilter_row", class: "row" });
                        var spinnerMarkup = '<div class="spinner-inline" style="width:10px;height:10px;margin-top:10px;">' +
                                            '<img src="' + path.relative_url + 'assets/common/js/tinymce/skins/lightgray/img/loader.gif" alt="Loading..."/>' +
                                            '</div>';
                        $addFilterRow.html(spinnerMarkup);
                        $("#filter_container").append($addFilterRow);
                        
                        // After a short delay (to simulate loading), remove the spinner and build the additional filter dropdown.
                        setTimeout(function(){
                            $addFilterRow.empty();
                            // Here we determine which additional field to offer.
                            // For example, if the primary field is "source", then the remaining fields are "campaign" and "medium".
                            var allFields = ["source", "campaign", "medium"];
                            var remainingOptions = allFields.filter(function(f){ return f !== primary; });
                            var addFilterLabel = $("<label>")
                                                    .attr("for", "additional_filter")
                                                    .text("Add additional filter:");
                            var addFilterSelect = $("<select>", { 
                                                    id: "additional_filter", 
                                                    class: "scf-form"
                                                });
                            // Add a default option
                            addFilterSelect.append($("<option>", { value: "", text: "Choose an option" }));
                            // Populate the options with the remaining field names (capitalized)
                            remainingOptions.forEach(function(opt){
                                addFilterSelect.append($("<option>", { value: opt, text: opt.charAt(0).toUpperCase() + opt.slice(1) }));
                            });
                            var $addFilterCol = $("<div>", { class: "col-md-6" })
                                                    .append(addFilterLabel)
                                                    .append(addFilterSelect);
                            $addFilterRow.append($addFilterCol);
                        }, 500); // Delay can be adjusted if needed
                    });
                    
                    // Step 3: When the additional filter is chosen, generate its own dropdown.
                    $("#filter_container").on("change", "#additional_filter", function(){
                        var addField = $(this).val();  // Get the chosen additional field
                        var primary = $("#primary_value").data("field");
                        var primaryVal = $("#primary_value").val();
                        
                        // Remove any previously added additional field or remaining rows.
                        $("#addField_row, #remaining_row").remove();
                        
                        if (addField) {
                            // Create a new row and show a loading spinner immediately.
                            var $addFieldRow = $("<div>", { id: "addField_row", class: "row" });
                            var spinnerMarkup = '<div class="spinner-inline" style="width:10px;height:10px;margin-top:10px;">' +
                                                '<img src="' + path.relative_url + 'assets/common/js/tinymce/skins/lightgray/img/loader.gif" alt="Loading..."/></div>';
                            $addFieldRow.html(spinnerMarkup);
                            $("#filter_container").append($addFieldRow);
                            
                            // AJAX call to fetch options for the additional field.
                            $.ajax({
                                url: path.relative_url + "ajax.html?cmd=get_filtered_utm",
                                method: "GET",
                                data: { primary: primary, filter: addField, primary_value: primaryVal },
                                dataType: "json",
                                success: function(response) {
                                    $addFieldRow.empty();  // Remove spinner on success
                                    
                                    // Build the dropdown for the additional field.
                                    var addFieldLabel = $("<label>")
                                                        .attr("for", addField + "_value")
                                                        .text("Select " + addField + ":");
                                    var addFieldSelect = $("<select>", {
                                        id: addField + "_value",
                                        class: "scf-form",
                                        "data-field": addField
                                    });
                                    // Default option with instructions.
                                    addFieldSelect.append(
                                        $("<option>", { value: "", text: "Select your option", disabled: true, selected: true })
                                    );
                                    addFieldSelect.append($("<option>", { value: "", text: "All " + addField }));
                                    var $col = $("<div>", { class: "col-md-6" })
                                                .append(addFieldLabel)
                                                .append(addFieldSelect);
                                    $addFieldRow.append($col);
                                    
                                    // Populate the dropdown with options returned from the AJAX call.
                                    var opts = response.result[addField];
                                    if (opts) {
                                        $.each(opts, function(i, opt) {
                                            addFieldSelect.append($("<option>", { value: opt, text: opt }));
                                        });
                                    }
                                    
                                    // When an option is chosen from this dropdown, update hidden fields
                                    // and trigger further processing for remaining filters.
                                    addFieldSelect.on("change", function(){
                                        var addFieldVal = $(this).val();
                                        $("#hidden_" + addField).val(addFieldVal);
                                        
                                        // Step 4: Build the remaining field dropdown (for the one remaining option).
                                        var allFields = ["source", "campaign", "medium"];
                                        var remainingField = allFields.filter(function(f) {
                                            return f !== primary && f !== addField;
                                        })[0];
                                        
                                        // Remove any previous remaining field row.
                                        $("#remaining_row").remove();
                                        
                                        // Create a new row with a spinner and then an AJAX call for remaining options.
                                        var $remainingRow = $("<div>", { id: "remaining_row", class: "row" });
                                        var spinnerMarkup2 = '<div class="spinner-inline" style="width:10px;height:10px;margin-top:10px;">' +
                                                            '<img src="' + path.relative_url + 'assets/common/js/tinymce/skins/lightgray/img/loader.gif" alt="Loading..."/></div>';
                                        $remainingRow.html(spinnerMarkup2);
                                        $("#filter_container").append($remainingRow);
                                        
                                        $.ajax({
                                            url: path.relative_url + "ajax.html?cmd=get_filtered_utm",
                                            method: "GET",
                                            data: { 
                                                primary: primary, 
                                                filter: remainingField, 
                                                primary_value: primaryVal,
                                                additional: addField, 
                                                additional_value: addFieldVal 
                                            },
                                            dataType: "json",
                                            success: function(response) {
                                                $remainingRow.empty();
                                                // Build the dropdown for the remaining field.
                                                var remainingLabel = $("<label>")
                                                    .attr("for", remainingField + "_value")
                                                    .text("Select " + remainingField + ":");
                                                var remainingSelect = $("<select>", {
                                                    id: remainingField + "_value",
                                                    class: "scf-form",
                                                    "data-field": remainingField
                                                });
                                                remainingSelect.append(
                                                    $("<option>", { value: "", text: "Select your option", disabled: true, selected: true })
                                                );
                                                remainingSelect.append($("<option>", { value: "", text: "All " + remainingField }));
                                                var $remainingCol = $("<div>", { class: "col-md-6" })
                                                    .append(remainingLabel)
                                                    .append(remainingSelect);
                                                $remainingRow.append($remainingCol);
                                                
                                                var opts = response.result[remainingField];
                                                if (opts) {
                                                    $.each(opts, function(i, opt) {
                                                        remainingSelect.append($("<option>", { value: opt, text: opt }));
                                                    });
                                                }
                                                // When the remaining dropdown changes, update its corresponding hidden field.
                                                remainingSelect.on("change", function(){
                                                    var remVal = $(this).val();
                                                    $("#hidden_" + remainingField).val(remVal);
                                                });
                                            },
                                            error: function(xhr, status, error) {
                                                $remainingRow.empty();
                                                console.error("Error fetching options for remaining field", remainingField, error);
                                            }
                                        });
                                    });
                                },
                                error: function(xhr, status, error) {
                                    $addFieldRow.empty();
                                    console.error("Error fetching options for additional field", addField, error);
                                }
                            });
                        }
                    });
                },
            }
        };
        scf.merge( func );

        // Freshdesk
        var func = {
            freshdesk: {
                get_list: function(el, t) {
                    $(el).find('select').on('change', function() {
                        var selectedEventType = $(this).val();

                        console.log(selectedEventType);

                        $.ajax({
                            url: path.relative_url + "ajax.html?cmd=freshdesk_dropdown",
                            method: "POST",
                            cache: false,
                            data: { event_type: selectedEventType }, // Send data as regular POST variables
                            success: function(response) {
                                var event_name_dropdown = $('#event_name');
                                event_name_dropdown.empty();
                        
                                if (response && response.data.length > 0) {

                                    event_name_dropdown.append($('<option>').val('').text('All'));
                        
                                    // Add new options from the response
                                    $.each(response.data, function(index, item) {
                                        event_name_dropdown.append($('<option>').val(item.value).text(item.text));
                                    });
                                } else {
                                    // Handle case where no event names are returned or there's an error
                                    event_name_dropdown.append($('<option>').val('').text('No options available'));
                                }
                            }
                        });                        
                        
                    });
                }
            }
        };
        
        scf.merge( func );

        // Unclaimed Funds
        var func = {
            unclaimed: {
                disclaimer: function( el, t ) {

                    $(el).on( 'click', function() {

                        var
                            $t = $(this),
                            $s = $t.siblings("span"),
                            visible = $s.eq(1).is(":visible");

                        $s.toggle();
                        $t.text("[" + ( visible ? "Read More" : "Hide" ) + "]");

                    } ).click();

                },
                claim: function( el, t ) {

                    $(el).on( 'click', function() {

                        t.modal.show('about_to_leave_2');

                    } );

                }
            }
        };
        scf.merge( func );

        // Criminal Records
        var func = {
            criminal_records: {
                disclaimer: function( el, t ) {
                    $(el).on( "click", function() {
                        var dots = document.getElementById("dots");
                        var moreText = document.getElementById("more");
                        var btnText = document.getElementById("cr-read-more-btn");
            
                        if (dots.style.display === "none") {
                            dots.style.display = "inline";
                            btnText.innerHTML = "[Read More]";
                            moreText.style.display = "none";
                        } else {
                            dots.style.display = "none";
                            btnText.innerHTML = "[Read Less]";
                            moreText.style.display = "inline";
                        }
                    });
                },
                state: function( el, t ) {

                    $(el).on( "change", function() {

                        t.get_cities.dropdown( t.v["criminal_records.city"], this.value );

                    } );
                },
                submit: function( el, t ) {

                    $(el).on( "submit", function() {

                        if (  !t.validator.first_last_name( $(this).find("#full_name").val() )) {
                                    t.tooltip.show( t.v['cr_full_name.error'], 'Please enter Full Name only' );
                                    return false;
                        }

                        if (  !t.validator.not_null( $(this).find("#state").val() )) {
                            t.tooltip.show( t.v['cr_state.error'], 'State is required' );
                            return false;
                        }

                        if ( typeof user_validate_email !== "undefined" && user_validate_email ) {

                            window.location.href = path.base_url + "dashboard.html";
                            return false;

                        }

                        var form_data = $(this).serialize();
                        captcha_resolved = ( typeof t.v['google.recaptcha.key'] != 'undefined' );
                        if ( typeof t.v['google.recaptcha.cr'] != 'undefined' ) {
                            if ( ! captcha_resolved ) {
                                t.modal.show('secure_recaptcha');
                                return false;

                            }

                        }
                        t.criminal_records.reset( t );
                        t.modal.show('criminal_records_start');

                        t.progress_runner.start( t.criminal_records.data, function( status ) {

                            t.http.request( path.base_url+'criminal_report/', 'post', form_data, 'json', function( response ) {

                                if ( typeof response.token != "undefined" && response.token ) {

                                    t.criminal_records.data[6].text = "ALERT! - " + response.criminal_records + " Criminal Records Found";
                                    t.criminal_records.el.token = response.token;
                                    t.criminal_records.el.sub = response.sub;

                                } else {

                                    t.criminal_records.data[6].text = "0 Criminal Records Found";
                                    status.rush = true;

                                }

                                status.do_redirect = ( typeof response.validate_email !== "undefined" && response.validate_email ) ? response.url : false;

                            } );


                        }, function( data, status ) {

                            var el = t.criminal_records.el;

                            el.progress_value.innerText = ( status.percentage ) + '%';
                            el.$progress_bar.css( { width: status.percentage + '%' } );

                        }, function( data, status ) {

                            var el = t.criminal_records.el;

                            $( el.progress_text ).text( data.text + '...' ).parent().toggleClass( 'found-alert', ( typeof data.alert != "undefined" ) );
                            el.foot.innerHTML = data.foot;
                            if ( typeof data.activate != "undefined" ) $( el.$progress_steps ).eq(data.activate).addClass("active");

                        }, function( data, status ) {

                            if ( typeof status.do_redirect !== "undefined" && status.do_redirect ) {

                                window.location.href = status.do_redirect;
                                return false;

                            }

                            t.modal.close('criminal_records_start');
                            if ( typeof t.criminal_records.el.token == "undefined" ) {

                                t.modal.show('criminal_records_good');

                            } else {

                                t.modal.show('criminal_records_warning');

                            }

                        } );

                        return false;

                    } );

                },
                go: function( el, t ) {

                    $(el).on( "click", function() {
                        t.modal.close('criminal_records_warning');
                        if(t.criminal_records.el.sub ){
                            t.fl( $(this).data("target") + t.criminal_records.el.token );
                        }else{
                            t.modal.show('criminal_records_subscription');
                        }
                    } );

                },
                pay: function( el, t ) {

                    $(el).on( "click", function() {
                        t.fl( $(this).data("target") + t.criminal_records.el.token );
                    } );

                },
                data: [
                    { text: "Starting Search", foot: "", speed: 100, percentage: 25 },
                    { text: "Search Federal Criminal Records", foot: "Thank you for your patience.", speed: 200, percentage: 35, activate: 0 },
                    { text: "Search State Criminal Records", foot: "Searching through millions of public criminal records", speed: 200, percentage: 50, activate: 1 },
                    { text: "Search County Criminal Records", foot: "Making sure we search through all the available records", speed: 300, percentage: 65, activate: 2 },
                    { text: "Search City Criminal Records", foot: "Almost there!", speed: 200, percentage: 75, activate: 3 },
                    { text: "Search Premium Data Sources", foot: "Organizing results now", speed: 400, percentage: 90, activate: 4 },
                    { text: "0 Criminal Records Found", foot: "", speed: 400, percentage: 100, alert: true },
                ],
                reset: function( t ) {

                    this.el = {
                        foot: t.v["criminal_records.foot"],
                        name: t.v["criminal_records.name"],
                        progress_text: t.v["criminal_records.progress_text"],
                        progress_value: t.v["criminal_records.progress_value"],
                        $progress_bar: $( t.v["criminal_records.progress_bar"] ),
                        $progress_steps: $( t.v['criminal_records.progress_steps'] ).find("li"),
                    };

                    this.data[0].foot = "Possible Criminal Record for <span>" + this.el.name.value + "</span>";
                    this.data[6].foot = "Could be associated with <span>" + this.el.name.value + "</span>";
                    this.el.progress_text.innerText = '';
                    this.el.progress_value.innerText = '0%';
                    this.el.$progress_bar.css( { width: '0%' } );
                    this.el.$progress_steps.removeClass("active");
                    this.el.foot.innerText = '';

                },
                view: function( el, t ) {

                    $(el).on( "click", function() {

                        var
                            $this = $(this),
                            $parent = $(this).closest(".view-box");

                        $parent.children(".criminal-table").toggle();
                        $this.toggleClass("btn-dark-green btn-gray-default").find("span").toggleText( 'View Details', 'Hide Details' ).siblings("i").toggleClass("si-up-circle si-down-circle");
                    } );

                },
                set: function( el, t ) {


                      t.http.ajax_request( 'cr_set','post',"", function( response ) {

                            if ( response.status ) {
                                $("#full_name").val(response.data.name);
                                $("#state").val(response.data.state);
                                if(response.data.dob != null){
                                    const date = response.data.dob.split("-");
                                    $("[name='month']").val(parseInt(date[1], 10));
                                    $("[name='day']").val(date[2]);
                                    $("[name='year']").val(date[0]);
                                }
                            }
                        } );


                },
            }
        }
        scf.merge( func );

        // In Depth
        var func = {
            indepth: {
                add: function( el, t ) {

                    $(el).on( "click", function() {

                        var $this = $(this);
                        $this.parents(".title-box-body").find("table tbody").append( atob( $this.data( 'target') ) );
                        init_mc();

                    } ).data( $(el).data() ).removeAttr("data-target");

                },
                'delete': function( el, t ) {

                    $(el).on( "click", function() {

                        var
                            $parent = $(el).parents("tr"),
                            id = $parent.data("id");

                        if( $(this).hasClass("delete_img") ) {
                            var alert_msg = "Are you sure you want to remove this image?";
                        } else {
                            var alert_msg = "Are you sure you want to delete?";
                        }

                        if ( confirm( alert_msg ) ) {

                            if ( typeof id != "undefined" ) t.v['indepth.delete_ids'].value += id + '|';
                            $parent.remove();

                        }

                    } );

                },
                'tab': function( el, t ) {

                    $(el).on( "click", function() {

                        $(el).siblings().removeClass("active").end().addClass("active").parent().siblings(".tabs-item").hide();
                        $( t.v[t.data( el, 'target' )] ).show();

                    } );

                },
                file: function( el, t ) {

                    $(el).on( "change", function() {

                        var
                            file = this.files[0],
                            $this = $(this),
                            $parent = $this.parent(),
                            $wrapper = $parent.parent();

                        if ( 5242880 < file.size ) {

                            alert( "Please select an image less than 5MB" );
                            $parent.before( $item.clone( true ) ).remove();
                            return false;

                        }

                        if ( ! t.validator.image( file.name ,file.size) ) {

                            alert( "Please upload an image in one of the following formats: .jpg, .gif, .png, .bmp, .tif. Max file size is 10MB" );
                            $parent.before( $item.clone( true ) ).remove();
                            return false;

                        }
                        var reader = new FileReader();
                        reader.onload = function( e ) {

                            $this.parent().css( { "background-image": "url(" + e.target.result + ")" } ).addClass("active");
                            if ( ! $this.data("changed") && $wrapper.children().length < 50 ) $wrapper.prepend( $item.clone( true ) );
                            $this.data( "changed", true );

                        };
                        reader.readAsDataURL( file );

                    } );

                    var $item = $(el).parent().clone( true );

                },
                sp_tab: function( el, t ) {

                     $(el).init(function() {
                        $($(".scf-pagination")[1]).hide();
                    }),

                    $(el).on( "click", function() {

                        var item = $(this).data("id");
                        $(el).siblings().removeClass("active").end().addClass("active").parent();
                        $(".tabs-item").hide();
                        $( "." + item ).show();

                        

                       if($(el).data("id") === "sp-indepth"){
                        
                        $($(".scf-pagination")[0]).show();
                        $($(".scf-pagination")[2]).show();
                        $($(".scf-pagination")[1]).hide();
                       }
                       else{
                        $($(".scf-pagination")[1]).show();
                        $($(".scf-pagination")[0]).hide()
                        $($(".scf-pagination")[2]).hide()
                       }

                    } );

                },
            },
        };
        scf.merge( func );

        // // In Depth
        var func = {
            indepth_chat: {
                init: function( el, t ) {
                    $( el ).ready(function() {
                        var indepth_chat_updating = false;
                        setInterval(function () {
                            if(indepth_chat_updating === false){
                                var post_data = {};
                                post_data["last_id"] = $(".chat-box .chat-row:last-child").data("id");
                                post_data["id"] = $("#report_id").val();
                                indepth_chat_updating = true;
                                t.http.ajax_request( 'chat_update', 'post', post_data , function( response ) {
                                    if(response.status){
                                        var msg_html = '<div class="chat-row left-content" data-id="{{data_id}}"><p>{{message}}<span class="chat-time">{{chat_time}}</span></p><span class="btn-action si-user btn-purple right-icon"></span></div>';
                                            Object.values(response.data).forEach(msg_item => {
                                            msg_html = msg_html.replace('{{data_id}}',msg_item.id );
                                            var full_message = "";
                                            if(typeof msg_item.file  !== "undefined" &&  msg_item.file.length !== 0){
                                                full_message = '<img src='+path.relative_url+'uploads/'+ msg_item.file +' alt="Chat"><br><br>';
                                            }
                                            full_message += msg_item.message;
                                            msg_html = msg_html.replace('{{message}}', full_message);
                                            msg_html = msg_html.replace('{{chat_time}}',msg_item.date );
                                            $(el).append(msg_html);
                                            el.scrollTop = el.scrollHeight;
                                        });
                                    }
                                    indepth_chat_updating = false;
                                } );
                            }

                        }, 2500);
                    });
                },
                send: function( el, t ) {
                    $(el).on( "submit", function(e) {
                        e.preventDefault();
                        var formData = new FormData(el);

                        $(el).find("#chat-text-box").val("");
                        $(el).find("#file-input").val("");
                        $.ajax({
                            url: path.relative_url + "ajax.html?cmd=chat",
                            method: "POST",
                            cache: false,
                            processData: false,
                            contentType: false,
                            data: formData ,
                            success: function(data) {
                            }
                        });
                        return false;
                    } );

                },
            },
        };
        scf.merge( func );

        // Customer Feedback
        var func = {
            feedback: {
                gotoNPS: function( el, t ){
                    $( document ).ready(function() {
                        var target = $(el).data('type');
                        if( target == "OK" ){
                            setTimeout(function(){
                                window.scroll(0, 1930);
                            }, 3000);
                            //window.scroll(0, 0);
                            
                        } 
                    });
                },
                chart: function( el, t ) {

                    t.loader.google_charts();
                    
                    

                    $(el).find("select").on( "change", function() {

                        var
                            $this = $(this),
                            options = { username: 0, email: 1, name: 2, phone: 3, image: 4 },
                            value = $('select[name="report-type"]').val(),
                            period = $('select[name="period"]').val(),
                            from = $('select[name="from_cfb_viz"]').val(),
                            to = $('select[name="to_cfb_viz"]').val(),
                            endpoint = ( 'all' == value ) ? 'feedback_info' : 'feedback_info_by_type',
                            post_data = {
                                report_type: ( typeof options[ value ] === "undefined" ) ? '' : options[ value ],
                                period: period,
                                
                            };                            
                        t.http.ajax_request( endpoint, 'post', post_data, function( response ) {

                            if ( 'object' === typeof response.cfb_info ) {

                                var data = new google.visualization.DataTable();
                                

                                

                                if(period !='daily'){
                                    data.addColumn('string', 'Date');
                                    data.addColumn('number', 'Current');
                                    data.addColumn('number', 'Previous');
                                    $.each( response.cfb_info, function( i, obj ) {                                  
                                        data.addRows( [ [ obj.Day, parseFloat(obj.w1),parseFloat(obj.w2)] ] );

                                    } );
                                    var options = {
                                        'title': 'Average '+period +' Rating - ' + value,
                                        'width': t.v['feedback.chart.container'].style.width,
                                        'curveType' : 'function',
                                        'height': 500
                                    }, chart = new google.visualization.LineChart( t.v['feedback.chart.container'] );
                                } else {
                                        data.addColumn('string', 'Date');
                                        data.addColumn('number', 'Today');
                                        data.addColumn('number', 'Yesterday');
                                        rating=[response.cfb_info[0].w1,response.cfb_info[0].w2];
                                                
                                                                   
                                            data.addRows( [ [response.cfb_info[0].Day, parseFloat(response.cfb_info[0].w1), parseFloat(response.cfb_info[0].w2)] ] );
    
                                        


                                        // data.addRows( [ [response.cfb_info[0].Day, parseFloat(response.cfb_info[0].w1)] ] );
                                        // data.addRows( [ [response.cfb_info[1].Day, parseFloat(response.cfb_info[1].w2)] ] );

                                    var options = {
                                        'title': 'Average Daily Rating - ' + value,
                                        'width': t.v['feedback.chart.container'].style.width,
                                        'curveType' : 'function',
                                        'height': 500
                                    }, chart = new google.visualization.BarChart( t.v['feedback.chart.container'] );
                                }
                                chart.draw( data, options );

                            }

                        } );

                    } ).change();

                    $(el).find("input[type='date']").on( "change", function() {
                        var
                            $this = $(this),
                            options = { username: 0, email: 1, name: 2, phone: 3, image: 4 },
                            value = $('select[name="report-type"]').val(),
                            from = $('input[type="date"][name="from_cfb_viz"]').val(),                            
                            to = $('input[type="date"][name="to_cfb_viz"]').val(),                            
                            endpoint = 'feedback_info_filter',
                            post_data = {
                                report_type: ( typeof options[ value ] === "undefined" ) ? '' : options[ value ],
                                from: from,
                                to: to,
                                
                            };      
                           

                        if(from !== "undefined" && to !== 'undefined'){                     
                        t.http.ajax_request( endpoint, 'post', post_data, function( response ) {

                            if ( 'object' === typeof response.cfb_info ) {

                                var data = new google.visualization.DataTable();
                                    from = new Date(from);                            
                                    from = from.toLocaleDateString(); 
                                    to = new Date(to);
                                    to = to.toLocaleDateString();

                                    data.addColumn('string', 'Date');
                                    data.addColumn('number', 'Rating');  
                                    $.each( response.cfb_info, function( i, obj ) {  
                                        date = new Date(obj.date);
                                        date = date.toLocaleDateString();
                                        data.addRows( [ [ date, parseFloat(obj.avg_rating) ] ]);

                                    } );
                                    var options = {
                                        'title': 'Average rating ' + value +' from '+ from +'-'+to,
                                        'width': t.v['feedback.chart.container'].style.width,
                                        'curveType' : 'function',
                                        'height': 500
                                    }, chart = new google.visualization.LineChart( t.v['feedback.chart.container'] );                               
                                chart.draw( data, options );

                            }

                        } );
                    }

                    } ).change();

                },
                improve_feedback: function( el, t ) {
                    $(el).find("img").on( "click", function() {

                        var $this = $(this),
                            rating = $this.attr("alt"),
                            link = $this.data("link"),
                            post_id = $this.data("id"),
                            post_data = {
                                rating: rating,
                                link: link,
                                post_id: post_id
                            };

                        t.http.ajax_request( 'improve_feedback', 'post', post_data, function( response ) {
                            if ( response.status ) {
                                $this.closest(".scfbi-feedback").hide();
                                $this.closest(".scfb-imp-content").find(".feedback-msg").show();
                                setTimeout(function() {
                                    $this.closest(".scfb-imp-content").find(".feedback-msg").remove();
                                }, 2000);
                                

                            }
                        } );

                    });
                },
                no_result_choose: function( el, t ) {
                    $(el).on( 'click', function() {
                        var $this = $(this),
                            id = $this.data("id");
                            
                            if( ! $(".scf_nr_feedback .si-like").hasClass( "active" ) ) {

                                $(".scf_nr_feedback .btn-purple").removeClass( "hide_cnt" );
                                $(".scf_nr_feedback p").removeClass( "hide_cnt" );
                                $(".scf_nr_feedback .scf-form").removeClass( "hide_cnt" );
                                
                                $(".scf_nr_feedback .si-like").addClass( "de_active" );
                                $this.removeClass( "de_active" );
                                $this.addClass( "active" );
                                $(".scf_nr_feedback .btn-default").addClass( "hide_cnt" );
                                $(".scf_nr_feedback .btn-purple").attr( "data-id", id );
                            }
                            
                        
                    });

                },
                no_result_submit: function( el, t ) {
                    $(el).on( 'click', function() {
                        var feedback = $(this).data( "id" ),
                            feedback_note = $(".scf_nr_feedback textarea").val();

                            var post_data = {
                                feedback :  feedback,
                                feedback_note : feedback_note
                            };
                            t.http.ajax_request( 'no_result_submit', 'POST', post_data, function( response ) {
                                $(".scf_nr_feedback .success-msg").removeClass( "hide_cnt" );
                                $(".scf_nr_feedback h4").text( "We truly appreciate your valuable feedback." );
                                $(".scf_nr_feedback .rate_now").addClass( "hide_cnt" );
                                $(".scf_nr_feedback p").addClass( "hide_cnt" );
                                $(".scf_nr_feedback .btn-purple").addClass( "hide_cnt" );
                                $(".scf_nr_feedback textarea").addClass( "hide_cnt" );
                            } );
                    });
                },
                no_result_close: function( el ) {
                    $(el).on( 'click', function() {
                        $(".scf_nr_feedback").hide();
                    });
                }
            }
        }
        scf.merge( func );

        // Privacy lock
        var func = {
            privacy_lock: {
                //V2 methods
                meter_score: function( el, t ) {
                    $( el ).ready(function( el, t ){
                        scf.privacy_lock.rotate_dial(1,pl_protection_level);
                    });
                },
                rotate_dial: function( val, valnext, el, t ) {
                    var deg = 0;
                    var dial = $(".dial .inner");
                    var value = Math.round(val*100);
                    var range = $(".pl-meter .range-bg");
                    range.css({'width': +value+'%'});

                    deg = (value * 177.5) / 100;
                    dial.css({'transform': 'rotate('+deg+'deg)'});
                    dial.css({'-ms-transform': 'rotate('+deg+'deg)'});
                    dial.css({'-moz-transform': 'rotate('+deg+'deg)'});
                    dial.css({'-o-transform': 'rotate('+deg+'deg)'}); 
                    dial.css({'-webkit-transform': 'rotate('+deg+'deg)'});
                    if( valnext ){
                        setTimeout(function() { 
                            scf.privacy_lock.rotate_dial(valnext, 0);
                        }, 1500);
                            }
                },
                add: function( el, t ) {

                    var $this = $(el);
    
                    $this.on( "click", function() {
                        var id = $this.data("val");
                        t.http.ajax_request( 'add_report', 'post', {'id': id }, function( response ) {
                           
                        } );
                        $(this).parents('.add-to-privacy').fadeOut(function(){
                            $('.report-head .added-to-privacy').fadeIn();
                        });
                    });
    
                },
                close: function( el, t ) {
    
                    var $this = $(el);
    
                    $this.on( "click", function() {
                        $(this).parent('.report-head').remove();
                    });
                },
                close_description_box: function( el, t ) {
                    $(el).on( 'click', function() {
                        $(this).parent().hide();
                        $(".privacy_lock_what_is_this").css("display", "inline");
                        t.http.ajax_request( 'privacy_lock_what_is_this', 'get', {'close_description': 1 }, function( response ) {} );
                    });

                },
                hide_more_info: function( el, t ) {
                    $(el).on( 'click', function() {
                        $(this).hide();
                        $(".lock-note.more-info").hide();
                        $(".show_more_info").show();
                    });

                },
                show_more_info: function( el, t ) {
                    $(el).on( 'click', function() {
                        $(this).hide();
                        $(".lock-note.more-info").show();
                        $(".hide_more_info").show();
                    });

                },
                edit_email_modal: function( el, t ) {

                    var $this = $(el);
                    $this.on( "click", function( e ) {
                        var email = $this.data("val");
                        $("#privacy_lock_email").val(email)
                        $("#privacy_lock_email").attr("name", "email["+ $this.data("key")+"]");
                        $("#delete_btn").attr("data-emailid",  $this.data("key"))
                        $("#edit_email_form").attr("data-emailid",  $this.data("key"))
                        t.modal.show( "privacy_lock_edit_email" );
                        

                    } );

                },
                add_email_modal: function( el, t ) {

                    var $this = $(el);

                    $this.on( "click", function( e ) {
                        $("#privacy_lock_email_add").attr("name", "email["+ $this.data("key")+"]");
                        $("#add_email_form").attr("data-emailid",  $this.data("key"))
                        t.modal.show( "privacy_lock_add_email" );
                        

                    } );

                },
                remove_report_modal: function( el, t ) {

                    var $this = $(el);

                    $this.on( "click", function( e ) {
                        $("#btn_delete").attr("data-val",$this.data("val"))
                        $("#btn_delete").attr("data-id",$this.data("id"))
                        t.modal.show( "privacy_lock_remove" );
                        

                    } );

                },
                remove_report: function( el, t ) {

                    var $this = $(el);

                    $this.on( "click", function( e ) {
                        var id =$this.data("val");
                        var user_id =$this.data("id");
                        t.http.ajax_request( 'remove_pl_report', 'post', {"id":id, "user_id":user_id}, function( response ) {
                           location.reload();
                        } );

                    } );

                },
                monitor_email_modal: function( el, t ) {

                    var $this = $(el);
                    $this.on( "click", function( e ) {
                    var val = ($(this).data('val')) ?  $(this).data("val") : "";
                    $(".btn_email_cancel").attr("data-id","report_slider"+val)
                    if($(this).is(':checked')) {
                        var v = 2;
                            $.ajax({ url: path.relative_url + "ajax.html?cmd=privacy_lock&v=" + v + "&val=" + val, dataType : 'json',  method:"POST", data:{},  success:function(d){
                                if("failed" in d){
                                    $(".privacy_lock_need_active_account").show();
                                } else window.location = path.base_url + 'dashboard.html?section=privacy_lock_report';
                            }});

                    } else {
                        $("#btn_email_off").attr("data-val",$this.data("val"))
                        t.modal.show( "privacy_lock_email_on" );
                    }
                });

                },
                monitor_email: function( el, t ) {

                    var $this = $(el);
                    $this.on( "click", function( e ) {
                        var val = ($(this).data('val')) ?  $(this).data("val") : "";
                        var v = 1;
                        $.ajax({ url: path.relative_url + "ajax.html?cmd=privacy_lock&v=" + v + "&val=" + val, dataType : 'json',  method:"POST", data:{},  success:function(d){
                            if("failed" in d){
                                $(".privacy_lock_need_active_account").show();
                            } else location.reload();

                        }});


                });},
                monitor_report_modal: function( el, t ) {

                    var $this = $(el);

                    $this.on( "click", function( e ) {
                        $("#btn_off").attr("data-val",$this.data("report"))
                        $("#btn_off").attr("data-id",$this.data("id"))
                        $(".btn_report_cancel").attr("data-id","report_slider"+$this.data("report"))
                        if($this.data("val") == 1){
                            t.modal.show( "privacy_lock_on" );
                        } else {
                            t.http.ajax_request( 'monitor_pl_report', 'post', {"id":$this.data("report"), "user_id":$this.data("id"), "val":1}, function( response ) {
                                location.reload();
                             } ); 
                        }
                        
                        

                    } );

                },
                monitor_report: function( el, t ) {

                    var $this = $(el);

                    $this.on( "click", function( e ) {
                        var id =$this.data("val");
                        var user_id =$this.data("id");
                        t.http.ajax_request( 'monitor_pl_report', 'post', {"id":id, "user_id":user_id, "val":0}, function( response ) {
                            location.reload();
                         } ); 

                    } );

                },
                switch_reset_monitor: function( el, t ) {
                    var $this = $(el);

                    $this.on( "click", function( e ) {
                        var id =$this.data("id");
                        $("#"+id).prop( "checked", true );
                    } );

                },
                edit_email: function( el, t ) {

                    var $this = $(el);

                    $this.on( "submit", function( e ) {

                        var emailid = ( $this.attr("data-emailid") ) ? $this.attr("data-emailid") : "";

                        if( emailid != "" ){
                            e.preventDefault();
                            $this.removeAttr("data-emailid");
                            $this.closest(".pl-db-email").find(".update_email").hide();
                            $this.closest(".pl-db-email").find(".submit_emailbox").show().text("Loading Results...");
                            $this.submit();
                        }

                    } );

                },
                edit: function( el, t ) {
                    var $this = $(el);
                    $this.on( "click", function( e ) {
                        if($this.hasClass("btn-disabled")) return false;
                        var textbox = $this.closest(".pl-db-email").find("input");
                        $(textbox).removeAttr("disabled").addClass("greenborder").attr("data-oldv",$(textbox).val() );
                        $this.hide();
                        $this.closest(".pl-db-email").find(".update_email").show();

                    } );
                },
                delete_email_modal: function( el, t ) {

                    var $this = $(el);
                    $this.on( "click", function( e ) {
                        t.modal.show( "privacy_lock_delete" );
                        t.modal.close("privacy_lock_edit_email");

                    } );

                },
                delete_email: function( el, t ) {

                    var $this = $(el);
                    $this.on( "click", function( e ) {
                        var emailid = ( $this.attr("data-emailid") ) ? $this.attr("data-emailid") : "";

                        t.http.ajax_request( 'delete_pl_email', 'post', {"id":emailid}, function( response ) {
                            location.reload();
                         } );

                    } );

                },
                cancelemailupdate: function( el, t ) {
                    var $this = $(el);
                    $this.on( "click", function( e ) {
                        var textbox = $this.closest(".pl-db-email").find("input");
                        $this.closest(".pl-db-email").find("input").attr("disabled", "").removeClass("greenborder").val($(textbox).attr("data-oldv"));
                        $this.closest(".pl-db-email").find(".update_email").hide();
                        $this.closest(".pl-db-email").find(".submit_emailbox").show();

                    } );
                },
                star_rating: function( el, t ) { //rating

                    $(el).on( "click", function( e ) {

                        var $this = $(this),
                            star = $this.data( "id" ),
                            reports = $('.pl-monitoring-count .pl-monitoring-reports .pl-reports-count').attr('data-mr'),
                            emails = $('.dw-monitor .pl-account-count').attr('data-email-count'),
                            plans = $('input.active-plans').val(),
                            
                            post_data = {
                                star: star,
                                emails: emails,
                                reports: reports,
                                plans: plans
                            }

                            $(".rating_privacy_lock .rating_stars span").removeClass("si-star-fill");
                            $(".rating_privacy_lock .rating_stars span:nth-child(-n+" + star + ")").addClass( "si-star-fill" );
                            
                            t.http.ajax_request( 'privacy_lock_rating', 'post', post_data, function( response ) {

                                if ( response.status ) {
                                    $(".rating_privacy_lock .rating_continue").show();
                                    $( ".pl-rate" ).hide();  
                                }

                            });

                    } );

                },
                star_rating_check: function( el, t ) { //rating check

                    $(el).on( "click", function( e ) {
                        
                        var $this = $(this),
                        answer = $this.data( "answer" );

                        $this.parent().find("li").removeClass( "active" );
                        $this.addClass( "active" );

                        $this.parent().parent().find(".answer").val( answer );

                    } );

                },
                star_rating_next: function( el, t ) { //rating next

                    $(el).on( "click", function( e ) {
                        
                        var $this = $(this),
                        question = $this.data( "question" ),
                        next_question = $this.data( "next" ),
                        answer = $this.parent().find(".answer").val();

                        var question_number = parseInt( question.substring(1) );
                        question_number += 1;

                        if( answer == "" ) $this.parent().find(".validation_msg").text( "Please select an option*" ); 
                        else {
                            $this.parent().find(".validation_msg").text( "" );
                            if( question == "q1" ) post_data = { q1: answer }
                            else if ( question == "q2" ) post_data = { q2: answer }
                            else if ( question == "q3" ) post_data = { q3: answer }
                            else if ( question == "q4" ) post_data = { q4: answer }
                            else if ( question == "q5" ) post_data = { q5: answer }
                            
                            t.http.ajax_request( 'privacy_lock_rating', 'post', post_data, function( response ) {

                                if ( response.status ) {
                                    $( ".rating_privacy_lock_feedback .rating_question" ).hide();
                                    if( next_question == "thank_you" ) {
                                        t.modal.close( 'rating_privacy_lock_feedback' );
                                        t.modal.show( "rating_thank_you" );                                                         
                                    } 
                                    else {
                                        $( ".rating_privacy_lock_feedback .progress span:nth-child(-n+" + question_number + ")" ).addClass( "active" );
                                        $( ".rating_privacy_lock_feedback ." + next_question ).show();
                                    } 

                                }

                            });
                        }
                        

                    } );

                },
                star_rating_next_universal: function( el, t ) { //rating next

                    $(el).on( "click", function( e ) {
                        
                        var $this = $(this),
                        question = $this.data( "question" ),
                        next_question = $this.data( "next" ),
                        answer = $this.parent().find(".answer").val();
                        text_answer = $this.parent().find(".scf-form").val();

                        var question_number = parseInt( question.substring(1) );


                        if( text_answer == "" ) $this.parent().find(".validation_msg").text( "Required. Please fill out this field.*" ); 
                        else if( answer == "" ) $this.parent().find(".validation_msg").text( "Please select an option*" ); 
                        else {
                            $this.parent().find(".validation_msg").text( "" );
                            post_data = { question:question_number,answer: answer }  
                            
                            t.http.ajax_request( 'in-report_feedback_collection', 'post', post_data, function( response ) {

                                if ( response.status ) {
                                    $( ".rating_privacy_lock_feedback .rating_question" ).hide();
                                    if( next_question == "thank_you" ) {
                                        t.modal.close( 'newdesign_feedback' );
                                        t.modal.show( "rating_thank_you" );                                                         
                                    } 
                                    else {
                                        $( ".rating_privacy_lock_feedback .progress span:nth-child(-n+" + (question_number+1) + ")" ).addClass( "active" );
                                        $( ".rating_privacy_lock_feedback ." + next_question ).show();
                                    } 

                                }

                            });
                        }
                        

                    } );

                },                
                explanations: function( el, t ) {
                    $(el).on( "mouseenter", function( e ) {
                        $(this).parents('.content-box-wrapper').addClass('active');
                    });
                },
                explanations_close: function( el, t ) {
                    $(el).on( "click", function( e ) {
                        $(this).parents('.content-box-wrapper').removeClass('active');
                    });
                },
            }
        }
        scf.merge( func );

        // Results
        var func = {
            results: {
                section: {
                    emails: {
                        init: function( el, t ) {

                            var
                                $this = $(el),
                                post_data = {
                                    json: true,
                                    email_list: [],
                                },
                                emails = {},
                                $f = {},
                                $_tbl = $this.find(".scf-table"),
                                $tbl = $_tbl.clone( true ),
                                $row = {};

                            if ( $tbl.length ) {

                                $_tbl.remove();
                                $tbl.extract_vars( $f );
                                $row = $f.row.clone( true );
                                $f.row.remove();
                                $f = {};

                            }

                            $this.find("h4").each( function() {

                                post_data['email_list'].push( this.title );
                                emails[ this.title ] = $(this).closest(".data-point");

                            } );

                            t.http.ajax_request( 'pwned_email_list', 'post', post_data, function( response ) {

                                $this.find('.uploading-data').remove();
                                if ( response.status ) {

                                    response.pwned.forEach( function( data ) {
                                        if(data.sites === undefined) 
                                            return;
                                        var
                                            $ft = {},
                                            $t = $tbl.clone( true );

                                        if ( emails[ data.email ] ) {
                                            var $em = {};
                                            emails[ data.email ].extract_vars( $em );

                                            if ( data.sites ) {

                                                $em.date_first.text( data.firstDate );
                                                $em.date_last.text( data.lastDate );
                                                $em.counter.text( data.sites.length );
                                                $em.count.text( $em.count.text().replace( '0', data.sites.length ) );
                                                $em.data.show().append( $t );

                                                data.sites.forEach( function( site ) {

                                                    var
                                                        $fr = {},
                                                        $r = $row.clone( true );

                                                    $r.extract_vars( $fr );
                                                    $fr.a.text( site.Title );
                                                    $fr.img.attr( "src", site.LogoPath ).css( "background-image", "url('" + site.LogoPath + "')" );
                                                    $fr.desc.text( site.Description );
                                                    $fr.comp.text( site.Compromised_Data.join(", ") );
                                                    $t.find("tbody").append( $r );

                                                } );
                                                $em.not_found.remove();
                                                $em.reported.show();

                                            } else {

                                                $em.not_found.show();
                                                $em.reported.remove();
                                                $em.data.remove();

                                            }

                                        }

                                    } );

                                }


                            } );
                            t.v['results.section.emails'] = el;

                        },
                        view: function( el, t ) {

                            var $this = $(el);
                            $this.on( "click", function() {

                                $this.toggleText( "View List", "Hide List" ).toggleClass("btn-dark-green btn-gray expand collapse").closest(".data-section").find(".scf-table").toggle();

                            } );

                        },
                    },
                    phonebreach: function( el, t ) {
                        $(el).find(".view-btn").on( "click", function() {
                            if( $(el).find(".data-breach-box").is(":visible")) $(this).html('View List <i class="si-down"></i>');
                            else $(this).html('Hide List <i class="si-up"></i>');
                            $(el).find(".data-breach-box").toggle();
                        } );
    
                    },
                    sherlock_showothers: function( el, t ) {
                        $this = $(el),
                        target = $this.data("target"),
                        scid = $this.data("scid");
                        $(window).on('load', function() {
                            setTimeout(function() {
                                $.ajax({ url: path.relative_url + "ajax.html?cmd=get_sherlock_data&target=" + target + "&scid=" + scid  , 
                                dataType : 'json', 
                                method:"GET", 
                                data:{}, 
                                success:function(d){
                                    var domArr = d.data.popular.domain
                                    var urlArr = d.data.popular.url
                                    $.each(d.data.popular.domain, function( i, v ) {
                                        var domain = urlArr[i].split("//")[1].split("/")[0].replace("www.", "");
                                        var icon = "https://www.google.com/s2/favicons?domain="+domain;
                                        $( ".popular_accounts" ).append( "<div class='flex-item'><img src='"+icon+"' alt='' style='width:20px; height: 20px;'/>"+domain+" <a href='"+urlArr[i]+"' target='_blank'><span class='si-share'></span></a></div>" );
                                        $(".tot_count").html( ($(".tot_count").html() * 1 ) + 1 );
                                    });

                                    var domArr = d.data.other.domain
                                    var urlArr = d.data.other.url
                                    $.each(d.data.other.domain, function( i, v ) {
                                        var domain = urlArr[i].split("//")[1].split("/")[0].replace("www.", "");
                                        var icon = "https://www.google.com/s2/favicons?domain="+domain;
                                        if( i > 7){
                                            var class_name = "deactivate";
                                            $(".line_count").html( "+" + ( i - 7 ) );
                                        }else var class_name = "";
                                        $( ".other_accounts" ).append( "<div class='flex-item "+class_name+"'><img src='"+icon+"' alt='' style='width:20px; height: 20px;'/>"+domain+" <a href='"+urlArr[i]+"' target='_blank'><span class='si-share'></span></a></div>" );
                                        $(".tot_count").html( ($(".tot_count").html() * 1 ) + 1 );
                                    });

                                    $(".verified-type").each(function(i, obj){
                                        $(obj).html( $(obj).html().replace("Loading...", "") );
                                    });
                                }});
                            }, 500);                            
                        });

                        $(el).on( "click", function() {
                            $(".scf-report .report-box.unverified-accounts .verified-sections .flex-item.deactivate").removeClass("deactivate");
                            $(this).hide();
                        } );

                    },
                    view_ipq: function( el, t ) {
                        
                        $(el).on( "click", function() {
                            $(this).parent().find(".hidden").toggle();
                            $(this).find(".hup").toggle();
                            $(this).find(".hdown").toggle();


                            //$(this).hide();
                        } );

                    },
                    sort_ipq: function( el, t ) {
                        
                        $( el ).ready( function() {

                            $(".ipq-email .item.error").each( function() {
                                $( this ).insertAfter( ".ipq-email .ipq_order" );
                            });

                            $(".ipq-phone .item.error").each( function() {
                                $( this ).insertAfter( ".ipq-phone .ipq_order" );
                            });

                        } );

                    },
                    ris: {
                        init:function(el ,t){
                            
                            $(el).find('#fileupload').on( 'change', function() {
                                var file, img;
                                if ((file = this.files[0])) {

                                    $(t.v["results.section.ris.upload.error"]).hide();
                                    // Allowed file types and max size
                                    const allowed_file_types = ['image/jpeg', 'image/gif', 'image/png', 'image/bmp', 'image/tiff'];
                                    const max_file_size = 10 * 1024 * 1024; // 10MB in bytes

                                    // Check file type
                                    if (!allowed_file_types.includes(file.type)) {
                                        $(t.v["results.section.ris.upload.error"]).show();
                                        return;
                                    }

                                    // Check file size
                                    if (file.size > max_file_size) {
                                        $(t.v["results.section.ris.upload.error"]).show();
                                        return;
                                    }


                                    post_data = new FormData( $(el).find('form')[0] );
                                    captcha_resolved = ( typeof t.v['google.recaptcha.key'] != 'undefined' )
                                    if (typeof t.v['google.recaptcha.ris'] != 'undefined') {
                                        if (!captcha_resolved) {
                                          t.modal.show('secure_recaptcha');
                                          return;
                                        } else {
                                          post_data.append('g-recaptcha-response', t.v['google.recaptcha.key']);
                                        }
                                      }

                                    var img = URL.createObjectURL(file);
                                        $(".loaded-img").css('background-image' , "url('"+img+"')");
                                        $(".upsell_ris .image-wrapper img").attr('src' , img);
                                        
                                        if($(t.v["results.section.ris.upload"]). attr("data-has-tokens") == "0"){                                            
                                            t.modal.show("upsell_ris");
                                            t.results.section.ris.popup.search_progress(el ,t);
                                            $(t.v["results.section.ris.upload"]).show();
                                        }else{                    
                                            $(t.v["results.section.ris.upload"]).hide();
                                            $(t.v["results.section.ris.progress"]).show();
                                        }
                                        
                                        

                                        t.http.request( '/search.html', 'POST', post_data, 'JSON', function( response ) {

                                            response = JSON.parse( response );
                                            if ( response.image_error ) {

                                                alert(image_error);
                
                                            } else{

                                                t.http.ajax_request( 'ris_multiple_face_trigger', 'post', { sid: response.queue_status.report_id , faces:0 , run_individual_report:0 ,face_count:0 ,skip:1,wait:0}, function( ) {});


                                                if($(t.v["results.section.ris.upload"]). attr("data-has-tokens") == "0"){
                                                    var url = "/ris-membership-levels/?token="+response.image_token;
                                                    
                                                    
                                                    t.http.ajax_request( 'ris_checkout_datafeed', 'post', { token: response.image_token }, function( response_data_feed ) {
                                                        if ( response_data_feed.status ) {
                                                            $(".result_count").text(response_data_feed.image_result_count);                               
                                                        }
                                                    }); 

                                                    $(t.v["results.section.ris.completed_non_ris"]).find(".view-report").attr("href", url).attr("target", "_blank");
                                                    $(t.v["results.section.ris.popup.progress_complete"]).find(".report-result a").attr("href", url).attr("target", "_blank");  

                                                }
                                                else {
                                                    $(t.v["results.section.ris.view_report"])
                                                    .attr("href", response.url)
                                                    .attr("target", "_blank");
                                                }

                                            }
                
                                    }, null, function( progress ) {
                
                                        if ( progress.lengthComputable ) {                                                
                                            var percentage = parseInt( ( progress.loaded / progress.total ) * 100 );
                                            $(t.v["results.section.ris.progress"]).find(".pl-progress-bar .progress").css( "width", percentage + "%" );
                                            $(t.v["results.section.ris.progress"]).find(".precentage").text( percentage );             
                                            if(percentage == 100) {
                                                if($(t.v["results.section.ris.upload"]) .attr("data-has-tokens") == "0"){
                                                    $(t.v["results.section.ris.upload"]).show();
                                                    $(t.v["results.section.ris.progress_non_ris"]).hide();
                                                 }else{
                                                    setTimeout(function() {
                                                        if(!$(t.v["results.section.ris.progress"]).is(':hidden')){
                                                            $(t.v["results.section.ris.progress"]).hide();
                                                            $(t.v["results.section.ris.upload_complete"]).show();
                                                        }
                                                    }, 5000);
                                                }
                                            }                
                                        }
                                    });
                                }
                            });

                            $(el).find('.file-upload .si-close-circle').on("click" , function(){
                                $(el[".file-upload"]).hide();
                                $(t.v["results.section.ris.upload"]).hide();
                                $(t.v["results.section.ris.progress"]).hide();
                            });

                            $(el).find(".view-report.non-ris").on("click", function() {
                                check_plan_activated();
                            });
                            
                            $(t.v["results.section.ris.popup.progress_complete"]).find(".report-result a").on("click", function() {
                                check_plan_activated();
                            });

                            function check_plan_activated(){
                                let has_ris_subscription = setInterval(function () {
                                    t.http.ajax_request( 'has_ris_subscription', 'post', {}, function( response ) {
                                        if ( response.has_plan ) {
                                            var url = "/dashboard.html?section=ris_intermediate";
                                            $(t.v["results.section.ris.completed_non_ris"]).find(".view-report").attr("href", url).attr("target", "_blank");
                                            $(t.v["results.section.ris.popup.progress_complete"]).find(".report-result a").attr("href", url).attr("target", "_blank");       
                                            clearInterval(has_ris_subscription);
                                        }
                                    }); 
                                }, 5000);
                            }

                        },
                        popup:{
                            close:function(el ,t){
                               $(el).on("click" ,function(){
                                $(t.v["results.section.ris.upload"]).hide();
                                $(t.v["results.section.ris.progress_non_ris"]).show();
                               });
                            },
                            search_progress:function(el ,t){

                                const steps = [
                                    { message: "Processing Image..", duration: 3000 },
                                    { message: "Scaning Social Media..", duration: 3000 }, 
                                    { message: "Deep Scanning..", duration: 3000 },
                                    { message: "Checking Scammer Image Database..", duration: 3000 },
                                    { message: "Organizing Results..", duration: 3000 },
                                ];
                                let total_steps = steps.length;
                                let cumulative_delay = 0;

                                steps.forEach((step, index) => {
                                    cumulative_delay += step.duration;
                            
                                    setTimeout(() => {
                                        let progress_percentage = ((index + 1) / total_steps) * 100;
                            
                                        $(".progress_step").html(`${step.message}<span>${progress_percentage}%</span>`);
                                        $(".progress-bar .progress").css('width' ,progress_percentage+"%");

                                        $(t.v["results.section.ris.progress_non_ris.step"]).text(step.message);
                                        $(t.v["results.section.ris.progress_non_ris.progress"]).css('width' ,progress_percentage+"%");
                                        $(t.v["results.section.ris.progress_non_ris.precentage"]).text(progress_percentage+"% Complete");

                                        $steps = $(t.v['results.section.ris.popup.process_steps']).find(".steps-list");

                                        if(index != 0){
                                            $steps.eq(index - 1)
                                                .removeClass("in-progress")
                                                .addClass("active")
                                                .find("div")
                                                .removeClass("step-active")
                                                .addClass("step-completed");

                                            $steps.eq(index)
                                                .addClass("in-progress")
                                                .find("div")
                                                .removeClass("step-inactive")
                                                .addClass("step-active");
                                        }

                                        if (index === total_steps - 1) {
                                            setTimeout(() => {
                                             $(t.v["results.section.ris.popup.progress"]).hide();
                                             $(t.v["results.section.ris.popup.progress_complete"]).show();                                             

                                             $(t.v["results.section.ris.progress_non_ris"]).hide();
                                             $(t.v["results.section.ris.completed_non_ris"]).show();

                                             $(t.v["results.section.ris.upload"]).hide();

                                            }, step.duration);
                                        }
                                    }, cumulative_delay);
                                });
                            },
                        },
                        upsell: {
                            close:function(el ,t){
                                $(el).on("click" ,function(){
                                    $(".file-upload").hide();
                                    // $(".file-upload").find(".progress").css("width", "0%");
                                    // $(".file-upload").find(".precentage").text("0");
                                
                                    $(t.v["results.section.ris.upload"]).show();
                                    $(t.v["results.section.ris.progress_non_ris"]).hide();
                                    $(t.v["results.section.ris.progress"]).hide();
                                    $(t.v["results.section.ris.completed_non_ris"]).hide();
                                    
                                    $("#fileupload").val("");
                                
                                    if (window.currentUploadRequest) {
                                        window.currentUploadRequest.abort();
                                    }
                                });
                            },
                        }
                    },
                },
                view_all: function( el, t ) {

                    $(el).on( "click", function() {

                        $(this).parent().parent().toggleClass("limit").end().find("i").toggleText( 'Show Less', 'View All' ).end().find("span").toggleClass("si-down");

                    } );

                },
                summary_link: function( el, t ) {

                    $(el).on( "click", function() {

                        var
                            target = $(this).data("target");

                        if ( t.v[ "results.section." + target ] ) {

                            $( t.v[ "results.section." + target ] ).scrollTo();

                        }

                    } );

                },
                ras: {
                    view: function( el, t ) {

                        $(el).on( "click", function() {

                            var
                                $this = $(this),
                                $parent = $(this).closest(".row");

                            $parent.siblings(".neighborhood_content").toggle();
                            $this.toggleClass("btn-dark-green btn-gray-default").find("span").toggleText( 'View Details', 'Hide Details' ).siblings("i").toggleClass("si-up-circle si-down-circle");

                        } );

                    },
                    deeds: function( el, t ) {

                        $(el).on( "click", function() {

                            var
                                $this = $(this),
                                $parent = $(this).parent();

                            $parent.siblings(".box-col-join").toggle();
                            $this.toggleClass("si-plus si-minus");

                        } );

                    },                   
                    map: function(el, t){                       
                        var post_data = {};
                        post_data.zip = $("#zip").text();
                        var lat = $('#latitude').text();
                        var lng = $('#longitude').text();
                        var $radius_data="";
                        function deg2rad(deg) {
                            return deg * (Math.PI/180);
                        }
                        t.http.ajax_request( 'radius_info', 'post', post_data, function( data ) {
                            if(data.status){
                                $radius_data=data.radius_info;
                                var map = L.map('radius-map', {
                                    scrollWheelZoom: true,
                                    zoomControl: true
                                });

                                var osmLayer = new L.TileLayer(
                                    'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                                        minZoom: 4,
                                        maxZoom: 20,
                                        attribution: 'Map data &copy; <a href="https://openstreetmap.org">OpenStreetMap</a> contributors'
                                    }
                                );
                                var markers = [];
                                map.setView(new L.LatLng(lat, lng), 12);
                                map.addLayer(osmLayer);
                                var mainIcon = L.icon({
                                    iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-blue.png', 
                                    shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',
                                    iconSize: [25, 41],
                                    iconAnchor: [12, 41],
                                    popupAnchor: [1, -34],
                                    shadowSize: [41, 41]
                                });
                                
                                // Create the marker
                                var marker = L.marker([lat, lng]).addTo(map);
                                
                                // Handle click event
                                marker.on('click', function(e) {
                                    map.setView(e.latlng, 15); // Zoom into the marker
                                });
                                markers.push(marker);
                                const lat1 = deg2rad(lat);
                                const lon1 = deg2rad(lng);
                                const earthRadius = 3958.756; // Earth radius in miles
                                
                                $.each($radius_data, function (i, obj) {
                                  
                                    const lat2 = deg2rad(obj.latitude);
                                    const lon2 = deg2rad(obj.longitude);

                                    const dLat = lat2 - lat1;
                                    const dLon = lon2 - lon1;

                                    const a = Math.pow(Math.sin(dLat / 2), 2) +
                                            Math.cos(lat1) * Math.cos(lat2) *
                                            Math.pow(Math.sin(dLon / 2), 2);

                                    const c = 2 * Math.asin(Math.sqrt(a));

                                    var distance = c * earthRadius;

                                    var otherIcon = L.icon({
                                        iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png', 
                                        shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',
                                        iconSize: [25, 41],
                                        iconAnchor: [12, 41],
                                        popupAnchor: [1, -34],
                                        shadowSize: [41, 41]
                                    });

                                    var marker = L.marker(new L.LatLng(obj.latitude, obj.longitude), {icon: otherIcon, opacity: .52, title :" Click for more info"});
                                    marker.bindPopup("<b>" + obj.full_name + (obj.age ? " (" + obj.age + ")" : "") + "</b><br>" + distance.toFixed(2) + " miles away<br>Case : " + obj.record_id).openPopup();
                                    marker.addTo(map);
                                    marker.on('click', function(e) {
                                        map.setView(e.latlng, 15); // Zoom into the marker
                                        marker.setOpacity(1);
                                    });
                                    markers.push(marker);
                                });
                                setInterval(function () {
                                    map.invalidateSize();
                                 }, 1000);
                                // $(".leaflet-marker-pane img").each(function(){
                                //     $(this).attr("src", path.relative_url + "assets/template/default/images/ras/marker-icon-2x.png");
                                // });
                                // $( ".leaflet-marker-pane img:first-child" ).attr("src", path.relative_url+"assets/template/default/images/ras/marker-icon-2x.png");
                                // $( ".leaflet-marker-pane img:first-child" ).css("height","35px");
                                // $( ".leaflet-marker-pane img:first-child" ).css("width","25px");
                            }
                        } );
                    },
                    gmap: function(el, t){
                        t.loader.google_maps( function() {

                            mapMarkers = []; // Array to hold marker references
                            activeMarker = null; // To keep track of the currently clicked marker
                            scroll = true;
                       

                            function initMap() {
                                // Create a new map
                                var map = new google.maps.Map(document.getElementById('googleMap'), {
                                    zoom: 4, // Default zoom
                                    mapTypeControl: false, // Removes the Map/Satellite button
                                    fullscreenControl: false, // Removes the Fullscreen button
                                    streetViewControl: false, // Removes the Street View button
                                    center: { lat: 39.8283, lng: -98.5795 }, // Centered in the USA
                                    draggable: true,
                                    zoomControlOptions: {
                                        position: google.maps.ControlPosition.TOP_RIGHT
                                    }
                                });

                                markerIcon = {
                                    url: path.relative_url +'assets/template/2020/images/marker.png',
                                    size: new google.maps.Size(24, 24),
                                    scaledSize: new google.maps.Size(24, 24),
                                    origin: new google.maps.Point(0,0)
                                }
                                markerActiveIcon = {
                                    url: path.relative_url +'assets/template/2020/images/marker-active.png',
                                    size: new google.maps.Size(40, 40),
                                    scaledSize: new google.maps.Size(40, 40),
                                    origin: new google.maps.Point(0,0)
                                }

                                bounds = new google.maps.LatLngBounds();

                                // Create an info window
                                var infoWindow = new google.maps.InfoWindow();

                                function zoomAndCenter(lat, lng, zoom) {
                                    // Validate lat and lng to ensure they are finite numbers, else use defaults
                                    if (!isFinite(lat) || !isFinite(lng)) {
                                        lat = 39.8283;  // Default latitude (center of the USA)
                                        lng = -98.5795; // Default longitude (center of the USA)
                                    }
                                    if ( !isFinite(zoom)) {
                                        zoom = 4;
                                    }
                                    
                                    // Validate zoom, ensuring it's a number and within a reasonable range
                                    zoom = isFinite(zoom) ? zoom : 4;  // Default zoom level if invalid

                                    // Center the map and apply the zoom
                                    map.setCenter(new google.maps.LatLng(lat, lng));
                                    map.setZoom(zoom);
                                   
                                }

                                // Function to reset markerActiveIcon but keep markerIcon
                                function resetActiveMarkers() {
                                    mapMarkers.forEach(marker => {
                                        // Reset only active marker icons
                                        if (marker.getIcon().url === markerActiveIcon.url) {
                                            marker.setIcon(markerIcon);
                                        }
                                    });
                                }


                                //map.controls[google.maps.ControlPosition.TOP_RIGHT];

                                // Add markers to the map
                                markers.locations.forEach(function(location) {
                                    if(location.lat == "" || location.lng == "" ) return;

                                    var lat = parseFloat(location.lat);
                                    var lng = parseFloat(location.lng);
                                    

                                    var myLatlng = new google.maps.LatLng(lat, lng);

                                    var marker = new google.maps.Marker({
                                        position: { lat: parseFloat(location.lat), lng: parseFloat(location.lng) },
                                        map: map,
                                        icon: markerIcon,
                                        title: location.title,
                                        animation: google.maps.Animation.DROP,
                                        id: location.id
                                    });

                                    bounds.extend(marker.getPosition());

                                    // Store marker in array
                                    mapMarkers.push(marker);
                                    $('.map-section .items-wrapper [data-id="'+location.id+'"]').addClass('active');
                                    

                                    // Add click event listener to the marker
                                    marker.addListener('click', (e) => {
                                        if(!$('.map-section .items-wrapper [data-id="'+marker.id+'"]').hasClass('active')){

                                            var index = $('.map-section .items-wrapper [data-id="'+marker.id+'"]').index();

                                            $('.map-section .item').removeClass('active');  // Remove active class from all items
                                            $('.map-section .items-wrapper [data-id="'+marker.id+'"]').addClass('active');  // Add active class to current item
                                            $('.map-section .mobile-items-wrapper button').eq(marker.id).addClass("active");

                                            resetActiveMarkers();


                                            mapMarkers.forEach(m => {
                                                if (m !== marker) {
                                                    m.setIcon(markerIcon);
                                                }
                                            });

                                            // Change the clicked marker's icon
                                            marker.setIcon(markerActiveIcon);

                                            // Update the active marker
                                            activeMarker = marker;

                                            // Set the content of the info window
                                            infoWindow.setContent(`<div id="zoomToMarker" class="custom-info-window" style="color:#0F63EC;font-family: Open Sans; font-weight: 600; font-size: 12px; background: #EBF3FF; border: 1px solid #0F63EC; border-radius: 4px; padding: 0 6px; line-height: 28px;" onclick="zoomAndCenter(${location.lat}, ${location.lng}, 14)"><span class="si-search"></span>Zoom In</div>`);

                                            // Open the info window at the marker's position
                                            infoWindow.open(map, marker);

                                            if(scroll){
                                                var wrapper = $(".dashboard-section .report-box-location .map-section .items-wrapper");
                                                var wTop = wrapper.scrollTop();
                                                var eTop = $('.map-section .items-wrapper .item.active').position().top;

                                                if(wTop == 0){
                                                    wrapper.stop().animate({scrollTop: eTop}, 500, 'swing', function() {});
                                                } else {
                                                    wrapper.stop().animate({scrollTop: (wTop + eTop - 30)}, 500, 'swing', function() {});
                                                }

                                                var activeItemId = '.item.active';

                                                // Scroll to the active item
                                                var $activeItem = $(activeItemId);
                                                var $container = $('.mobile-items-wrapper');

                                                if ($activeItem.length) {
                                                    // Calculate the scroll position
                                                    var containerOffset = $container.offset().left;
                                                    var containerScroll = $container.scrollLeft();
                                                    var itemOffset = $activeItem.position().left;

                                                    if(containerScroll < itemOffset){
                                                        var scrollPosition = itemOffset;
                                                    } else if(containerScroll > itemOffset) {
                                                        var scrollPosition = containerScroll + itemOffset;
                                                    }

                                                    // Animate the scroll
                                                    $container.animate({
                                                        scrollLeft: scrollPosition
                                                    }, 500); // 500ms animation duration
                                                }
                                            }

                                            scroll = true;

                                            zoomAndCenter(39.8283, -98.5795, 4);
                                        }
                                    });
                                });


                                // Define zoomAndCenter function on the global window object
                                window.zoomAndCenter = zoomAndCenter;

                                // Handling clicks for markers that need lat/lng to be fetched dynamically via AJAX
                                $('.map-section .items-wrapper .item').on('click', function(e){
                                    scroll = false;
                                    var dataId = $(this).attr('data-id');
                                    var lat = $(this).data('lat');
                                    var lng = $(this).data('lng');
                                    var location_d = $(this).data('location'); // Get location from data attribute

                                    var clicked_already = $(this).attr('data-clicked');
                                    if (!clicked_already) {
                                        $(this).attr('data-clicked', "true");
                                    } else {
                                        mapMarkers.forEach(m => {
                                            if (m['id'] == dataId) {
                                                google.maps.event.trigger(m, 'click');
                                            }
                                        });
                                        return;
                                    }
                                    
                                   



                                    if (!lat || !lng) {
                                        // Fetch lat/lng via AJAX if it's not already available
                                        $.ajax({
                                            url: path.relative_url + "ajax.html?cmd=get_lat_lng", 
                                            method: 'POST',
                                            data: { location: location_d },
                                            success: function(response) {
                                                lat = response.lat;
                                                lng = response.lng;

                                                $('.map-section .items-wrapper [data-id="'+dataId+'"]').removeClass('active');
                                                // Add the new marker with fetched lat/lng
                                                var marker = new google.maps.Marker({
                                                    position: { lat: parseFloat(lat), lng: parseFloat(lng) },
                                                    map: map,
                                                    zoom: 4,
                                                    icon: markerActiveIcon,  // Set active icon when adding
                                                    title: location_d,
                                                    //animation: google.maps.Animation.BOUNCE,  // Add animation immediately
                                                    id: dataId
                                                });



                                                bounds.extend(marker.getPosition());
                                                mapMarkers.push(marker);

                                                // Update the active marker to be the one just added
                                                activeMarker = marker;

                                                    // Attach the click event listener to the new marker (same as for initial markers)
                                                    marker.addListener('click', (e) => {
                                                        if (!$('.map-section .items-wrapper [data-id="'+marker.id+'"]').hasClass('active')) {

                                                            var index = $('.map-section .items-wrapper [data-id="'+marker.id+'"]').index();

                                                            $('.map-section .item').removeClass('active');  // Remove active class from all items
                                                            $('.map-section .items-wrapper [data-id="'+marker.id+'"]').addClass('active');  // Add active class to current item
                                                            $('.map-section .mobile-items-wrapper button').eq(marker.id).addClass("active");

                                                            resetActiveMarkers();

                                                            // Update all other markers to use the static icon
                                                            mapMarkers.forEach(m => {
                                                                if (m !== marker) {
                                                                    m.setIcon(markerIcon);
                                                                }
                                                            });

                                                            // Change the clicked marker's icon to the active icon
                                                            marker.setIcon(markerActiveIcon);

                                                            // Update the active marker
                                                            activeMarker = marker;

                                                            // Set the content of the info window
                                                            infoWindow.setContent(`<div id="zoomToMarker" class="custom-info-window" style="color:#0F63EC;font-family: Open Sans; font-weight: 600; font-size: 12px; background: #EBF3FF; border: 1px solid #0F63EC; border-radius: 4px; padding: 0 6px; line-height: 28px;" onclick="zoomAndCenter(${lat}, ${lng}, 14)"><span class="si-search"></span>Zoom In</div>`);

                                                            // Open the info window at the marker's position
                                                            infoWindow.open(map, marker);

                                                            if (scroll) {
                                                                var wrapper = $(".dashboard-section .report-box-location .map-section .items-wrapper");
                                                                var wTop = wrapper.scrollTop();
                                                                var eTop = $('.map-section .items-wrapper .item.active').position().top;

                                                                if (wTop == 0) {
                                                                    wrapper.stop().animate({scrollTop: eTop}, 500, 'swing', function() {});
                                                                } else {
                                                                    wrapper.stop().animate({scrollTop: (wTop + eTop - 30)}, 500, 'swing', function() {});
                                                                }

                                                                var activeItemId = '.item.active';
                                                                var $activeItem = $(activeItemId);
                                                                var $container = $('.mobile-items-wrapper');

                                                                if ($activeItem.length) {
                                                                    var containerOffset = $container.offset().left;
                                                                    var containerScroll = $container.scrollLeft();
                                                                    var itemOffset = $activeItem.position().left;

                                                                    var scrollPosition = containerScroll < itemOffset ? itemOffset : containerScroll + itemOffset;

                                                                    // Animate the scroll
                                                                    $container.animate({ scrollLeft: scrollPosition }, 500);
                                                                }
                                                            }

                                                            scroll = true;

                                                            zoomAndCenter(39.8283, -98.5795, 4);
                                                        }
                                                    });

                                          
                                                    google.maps.event.trigger(marker, 'click');
                                                    $('.map-section .items-wrapper [data-id="'+dataId+'"]').addClass('active');
                                                   
                                           
                                            },
                                            error: function(err) {
                                                console.log('Error fetching lat/lng:', err);
                                            }
                                        });
                                    }
                                    
                                        // Lat/Lng already exists, just trigger the existing marker's click event
                                        mapMarkers.forEach(m => {
                                            if (m['id'] == dataId) {
                                                google.maps.event.trigger(m, 'click');
                                            }
                                        });
                                    

                                    // Remove active class from other items and add to current one
                                    $('.map-section .item').removeClass('active');
                                    $(this).addClass('active');

                                    // Reset all markerActiveIcons and set the clicked marker as active
                                    resetActiveMarkers();

                                    // Ensure marker is active and animated
                                    mapMarkers.forEach(m => {
                                        if (m['id'] == dataId) {
                                            m.setIcon(markerActiveIcon);  // Set active icon for the marker
                                            //m.setAnimation(google.maps.Animation.BOUNCE);  // Add marker animation
                                        } else {
                                            m.setIcon(markerIcon);  // Reset other markers to default icon
                                            m.setAnimation(null);  // Remove animation from other markers
                                        }
                                    });

                                    zoomAndCenter(39.8283, -98.5795, 4);
                                });

                                $('.map-section .mobile-items-wrapper button').on('click', function(e){
                                    scroll = false;
                                    var index = $(this).index();

                                    $('.map-section .mobile-items-wrapper button').removeClass('active');
                                    $($('.map-section .items-wrapper .item')[index]).trigger('click');
                                    $(this).addClass('active');
                                });

                                map.fitBounds(bounds);
                                
                                // Add a listener for bounds_changed and enforce a zoom level of 4
                                google.maps.event.addListenerOnce(map, 'bounds_changed', function() {
                                    // Force the zoom level to be 4 after bounds are adjusted
                                    map.setZoom(4);
                                });
                                
                            }

                            google.maps.event.addDomListener(window, 'load', initMap);

                        });
                    }
                },
                image: {
                    $sbs_obj: null,
                    side_by_side: {
                        init: function( el, t ) {

                            var $el = $(el);
                            t.results.image.$sbs_obj = $el.hide();
                            t.results.image.$compare_modal = $el;

                        },
                    },
                    load_more: function( el, t ) {

                        $(el).on( "click", function() {

                            $(this).parent().removeClass("limit").end().remove();

                        } );

                    },
                    tooltip_msg: function( el, t ) {

                        $(el).on( "click", function() {
                            if($(".tootip-msg").hasClass('display-none')) {
                                $('.tootip-msg').removeClass('display-none');
                                $(".search-velocity .ris-velocity .tooltip-right i").removeClass('si-down');
                                $(".search-velocity .ris-velocity .tooltip-right i").toggleClass('si-up');
                            }else{
                                $('.tootip-msg').toggleClass('display-none');
                                $(".search-velocity .ris-velocity .tooltip-right i").removeClass('si-up');
                                $(".search-velocity .ris-velocity .tooltip-right i").toggleClass('si-down');
                            }
                        } );

                    },
                    change_view: function( el, t ) {

                        $(el).on( "click", function() {

                            var
                                $this = $(this),
                                active_class = 'active',
                                size = $this.data('size'),
                                divID = $this.data('id');

							if ( $this.hasClass( active_class ) ) return;
							
							$('.img-box-list').removeClass('active');
							$('.ris-mask.active').toggleClass('thumbnail-view');
                            
                            $this.addClass( active_class ).siblings().removeClass( active_class ).closest(".img-rpt-box").toggleClass( 'small-thumbnail', ( size == 'small' ) );
                            $this.addClass( active_class ).siblings().removeClass( active_class ).closest(".img-rpt-box").find(".img-box-list").toggleClass( 'small-thumbnail', ( size == 'small' ) );
							
							if($this.parents('.report-box.filter-wrapper').length > 0){
								$this.parents('.report-box.filter-wrapper').siblings('.filter-content').find('.img-rpt-box .img-box-row').find('.img-box-list').toggleClass( 'small-thumbnail', ( size == 'small' ) );
								//$this.parents('.report-box.filter-wrapper').siblings('.filter-content').find('.img-rpt-box .img-box-row').find('.img-box-list').toggleClass( 'small-thumbnail', ( size == 'small' ) );
							}
							
                            if ( typeof t.results.image.$sbs_obj != "undefined" ) t.results.image.$sbs_obj.hide();

                            var obj = $(this).parent().parent().parent().parent().children("#"+divID);

                            if(size=="small"){
                                $(obj).find(".img-box-list").find(".box-col").find(".adult_img_blur").find(".adult_sen_tag").hide();
                                $(obj).find(".img-box-list").find(".box-col").find(".adult_img_blur").find(".adult_sen_btn").hide();
                                $(obj).find(".img-box-list").find(".box-col").find(".adult_img_blur").css("height", "90px");
                                $(obj).find(".img-box-list").find(".box-col").find(".adult_img_blur img").css("height", "90px");
                                t.results.image.$current_size_class = "small-thumbnail";
                            }else{
                                $(obj).find(".img-box-list").find(".box-col").find(".adult_img_blur").find(".adult_sen_tag").show();
                                $(obj).find(".img-box-list").find(".box-col").find(".adult_img_blur").find(".adult_sen_btn").show();
                                $(obj).find(".img-box-list").find(".box-col").find(".adult_img_blur").css("height", "192px");
                                $(obj).find(".img-box-list").find(".box-col").find(".adult_img_blur img").css("height", "192px");
                                t.results.image.$current_size_class = "";
                            }

                        } );

                    },
                    compare: function( el, t ) {

                        $(el).on( "click", function() {

                            t.results.image.compare_func(el, t);

                        } );

                    },
                    compare_func: function( el, t ) {
                        
                        //to direct call compare function.                        
						var
							$el = $(el),
							$sbs_obj = t.results.image.$sbs_obj,
							class_name = '.img-box-list.show',
							url = $el.data('url'),
							source = $el.data('source'),
							ref = $el.data('ref'),
							$parent = $el.parents( class_name ),
							$slots = $parent.parent().find( class_name ),
							start_offset = $slots[0].offsetTop,
							row_size = $slots.filter( function( index, item ) {

								return ( item.offsetTop == start_offset );

							} ).length,
							index = $parent.siblings( class_name).addBack().index( $parent ) + 1,
							target = ( Math.ceil( index / row_size ) * row_size ) - 1,
							$slot = $slots.eq( target >= $slots.length ? $slots.length - 1 : target ),
							
							image_size = $el.data('dimensions'),
							file_size = $el.data('size');
                            if ( typeof $f === 'undefined') {
                                $f = {};
                                $sbs_obj.extract_vars( $f );  
                            }
						$(class_name).removeClass('active');
						$parent.addClass('active');
						$f.snap.hide();
						$f.snapshot.show();
						t.http.ajax_request( 'snap_cache_check', 'post', { url: ref }, function( response ) {
						
							$f.snapshot.hide();
							if ( response.status ) {
							
								$f.snap.show();	
								
							}
							
						} );
						
						$f.link.text( source ).data( "url", source );
						$f.web.text( ref );
						$f.img.attr( "src", url ).css( "background-image", 'url(' + url + ')' );
						$f.snap.data( "url", 'https://webcache.googleusercontent.com/search?q=cache:' + encodeURI( ref ) );

						image_size = ( image_size == '0x0' ) ? $f.img[0].naturalWidth + "x" + $f.img[0].naturalHeight : image_size;
						file_size = ( file_size == '0' ) ? "N/A" : ( file_size + "KB" );
						
						$f.size.text( file_size );
						$f.dim.text( image_size );                

                        $(".tooltip-down .open-image").attr({ "href": source, "target": "_blank" });
                        $(".tooltip-down .visit-website").attr({ "href": ref, "target": "_blank" });
                        
                        $slot.after( $sbs_obj.show() );

                        $(".scf-report .tooltip-down .close").on("click", function ( e ) {
                            $(this).parent().css("display", "none");
                            e.preventDefault();
                        });
                    },
                    external: function( el, t ) {

                        var
                            $this = $(el),
                            modal = 'about_to_leave';

                        $this.on( "click", function( e ) {

							e.preventDefault();

                            if ( t.modal.ref[ modal ] && ! t.modal.ref[ modal ].disabled ) {

                                t.modal.set_current_data( el, t, modal );
                                t.modal.show( modal );

                            } else {

                                t.onw( $this.data('url') );

                            }

                        } );

                    },
                    external_func: function( el, t ){
                        //to direct call external function.
                        var
                        $this = $(el),
                        modal = 'about_to_leave';

                        if ( t.modal.ref[ modal ] && ! t.modal.ref[ modal ].disabled ) {

                            t.modal.set_current_data( el, t, modal );
                            t.modal.show( modal );

                        } else {

                            t.onw( $this.data('url') );

                        }

                    },
					copy: function( el, t ) {

						$(el).on( "click", function() {

							var $this = $(this);

							var url = $this.parent().find(".url").text();
							var copy_filed = "<textarea class='copy_text'>" + url + "</textarea>";
							$(this).append( copy_filed );
							$(".copy_text").val( url ).select();
							document.execCommand("copy");
							$(this).text("Copied");
							setTimeout(function(){
								$(".copy_btn").html("<span class='si-copy'></span> Copy URL");
								$(".copy_text").remove();
							}, 3000);

						} );

					},
                    multi_tab: function( el, t ) {

						$(el).on( "click", function() {
                            var $this = $(this);
                            var id = $this.data( "id" );
                            $(".ris-multiple-tab li").removeClass("active");
                            $this.addClass("active");
                            if( id == "facial" ) {
                                $(".scf_ris_fd").show();
                                $(".scf_ris_default").hide();
                            } else {
                                $(".scf_ris_fd").hide();
                                $(".scf_ris_default").show();
                            }
                            t.lazy_loading.scroll_loader();
                        } );
                        
                    },
					scroll_handler: function( entries, observer ) {

						if ( entries[0].isIntersecting && scf.results.image.current_results.length ) {

							scf.results.image.api_fetch_images();

                            if ( ! results_set.length ) {

                                observer.unobserve( entries[0].target );

                            }

                        }

                    },
                    current_image_count: function( el, t ) {

                        t.results.image.current_results = JSON.parse( JSON.stringify( results_set ) );
                        $(el).extract_vars( t.results.image.$report_vars );
                        t.results.image.api_fetch_images();
                        t.results.image.observer_init();

                    },
                    observer_init: function() {

						this.observer = new IntersectionObserver( this.scroll_handler, { threshold: 0.5 } ); 
						this.observer.observe( this.$report_vars.more_loader.get(0) );

					},
					observer: null,
                    $scrool_images_data:0,
                    $scrool_images_data_fg :0,
                    $images_data :new Array(),
                    $images_data_fg :new Array(),
                    $current_size_class : "",
                    $exact_image_only : false,
                    $facial_image_only : false,
                    $full_image_only : false,
					$report_vars: {},
					loading_images: false,
                    queued_loading: false,
                    api_fetch_images: function() {

                        var
                            f_this = this,
                            $v = this.$report_vars,
                            icon_url = "https://www.google.com/s2/favicons?domain=";

						if ( ! this.loading_images ) {

                            $v.skeleton_loader.show();
                            this.loading_images = true;
                            setTimeout( function() {
                                // Check if ld_limit is defined, is a number, and greater than 0. If not, use 8 as default.
                              
                                var ld_limit_set = (typeof ld_limit !== 'undefined' && !isNaN(parseInt(ld_limit)) && parseInt(ld_limit) > 0) ? parseInt(ld_limit) : 8;
                                
                                var images = scf.results.image.current_results.splice( 0, ld_limit_set );

                                images.forEach( function( data ) {

                                    var $img = $v.img_result.clone();
                                    $img
										.find(".btn, .box-name, .img-thumbnail").data( "url", data.src ).on( "click", function() { scf.results.image.external_func( this, scf ) } ).end()
										.find(".img-thumbnail").data( "url", data.image ).end()
										.find(".scf_ris_loader").data( "src", data.cdn_image ).end()
										.find(".compare-action").data( { url: data.cdn_image, source: data.image, ref: data.src, dimensions: data.width + "x" + data.height, size: data.filesize } ).on( "click", function() { scf.results.image.compare_func( this, scf ) } ).end()
										.addClass("show")
                                        .find(".box-name > img").data( "src", icon_url + data.domain ).after( data.domain );

                                    if(ld_limit_set >= 5000){
                                        $img.find(".scf_ris_loader").removeClass("lazy-loader").attr("src", data.cdn_image).css( 'background-image', "url('" + data.cdn_image + "' )" );
                                    
                                    }
                                    
                                    $v.results_set.append( $img );

                                } );

                                scf.lazy_loading.scroll_loader();
                                scf.results.image.loading_images = false;
                                $v.skeleton_loader.hide();

								if ( f_this.queued_loading ) {

                                    f_this.queued_loading = false;
                                    arguments.callee();

                                }

                            }, 500 );

                        } else {

                            this.queued_loading = true;

                        }

                    },
                    read_more: function( el, t ) {

                        $(el).on( "click", function( el, t ) {
    
                            var $this = $(this);
                            $this.parent().find(".read_more").toggle();
    
                        });
                    },
                    ris_mask: function( el, t ) {

                        $(el).on( "click", function( el, t ) {
    
                            var $this = $(this);
                            $this.parent().removeClass("active");

                        });
                    },
                    adult_content:  function( el, t ) {

                        $(el).on("click", function( el, t ) {
        
                            $(".ris-adult-content p").toggle();
    
                        });
    
                    },
                    view_all:function(el,t){
                        $(`.img-box-list[data-domain='${$(el).data("domain")}']`).show();
                        $(el).parent().parent().remove();
                    },
                    about_this_photo:function(el,t){
                        $(el).click(function(){
                            $(this).find(".action").toggleClass("hide");
                            $(".ris_pro_data .rd_content , .ris_pro_data .rd_default").toggleClass("hide");
                        });
                    },
                    save_fold_status:function(el,t){
                        $(el).click(function(){
                            var $user_id = $(this).attr("data-user-id");
                            var fold_status = 0;
                            if($("#save_fold_status").is(":checked")){
                                fold_status = 1;
                            }else{
                                fold_status = 0
                            }

                            t.http.ajax_request( 'save_ris_fold_status', 'post', {user_id:$user_id ,fold_status:fold_status}, function( response ) {
                                $(".btnr-confirmed").show();
                                $(".btnr-confirm").hide();
                            });
                        });
                    },
                    save_fold_status_checkbox:function(el,t){
                        $(el).on('change', function(){
                            $(".btnr-confirmed").hide();
                            $(".btnr-confirm").removeAttr("disabled");
                            $(".btnr-confirm").removeClass("btnr-inactive");
                            $(".btnr-confirm").show();
                        });
                    },
                    do_not_show_ris_upgraded:function(el,t){
                        $(el).click(function(){
                            if($(t.v["results.image.do_not_show_ris_check"]).is(":checked")){
                                t.http.ajax_request( 'don_not_show_updated_ris_pro', 'post', {}, function( response ) {});
                            }
                            $(this).parent().parent().parent().parent().parent().hide();
                        });
                    },
                    do_not_show_ris_upgraded_close:function(el,t){
                        $(el).click(function(){
                            $(this).parent().parent().hide();
                        });
                    },
                    save_improve_data:function(el ,t){

                        $(".improve_image_search .si-close").on("click" , function(){
                            $(this).parent().find("input").val("");
                        });

                        $(el).click(function(){
                            t.http.ajax_request( 'improve_image_search', 'post', { 
                                sid:$(this).data("id"),
                                image_name:$(t.v["search.improve_image_search.name"]).val(),
                                image_age:$(t.v["search.improve_image_search.age"]).val(),
                                image_city:$(t.v["search.improve_image_search.city"]).val(),
                                image_state:$(t.v["search.improve_image_search.state"]).val(),
                                image_job:$(t.v["search.improve_image_search.job_title"]).val(),
                                dont_show_again:$(t.v["search.improve_image_search.dont_show_again"]).is(':checked') 
                            }, function( response ) {
                                t.modal.close("improve_image_search_report_page");
                                location.reload();
                            });

                        });
                    },
                    close_ris_improve_notify:function(el ,t){
                        $(el).click(function(){
                            $(this).parent().hide();
                        })
                    }
                },
                empty_relationship: function( el, t ) {

                    $( el ).ready( function() {
                        
                        $( ".relationships_row" ).each( function() {

                            var $this = $(this);

                            if ( $this.find('.data-point').length ) {
                                
                            } else {
                                $this.parent().remove();
                            }

                        });
                        

                    });
                    
    
                },
                idi_view_more: function( el, t ) {

                    $(el).on( "click", function( el, t ) {

                        var $this = $(this);
                        $this.closest(".report-list-sub").find(".list-content").toggle();

                    });
                }
            },
        };
        scf.merge( func );

        // Cancel Alternatives
        var func = {
            cancel_alt: {
                body_list: {},
                $cancel_video: true,
                autoselect: function( el, t, o ) {

                    setTimeout( function(){
                        if( typeof a_s_c_alt_o !== 'undefined' && a_s_c_alt_o != "" ){
                            
                            $(".ca-alt-" + a_s_c_alt_o + " .ca_title .radio input"  ).trigger("click");
                            if( a_s_c_alt_o == "pause30" || a_s_c_alt_o == "pause60" || a_s_c_alt_o == "pause90" ){
                                setTimeout( function(){
                                    $(".ca-alt-" + a_s_c_alt_o + " ." + a_s_c_alt_o ).trigger("click");
                
                                }, 3000);
                
                            }
                
                        }
                    }, 3000);
                    

                },
                opt: function( el, t ) {

                    var sup = this;
                    $(el).on( "change", function() {

                        $( Object.keys( sup[1].body_list ).map( function( key ) { return sup[1].body_list[ key ] } ) ).hide().filter( sup[1].body_list[ $(el).data("target") ] ).show();

                    } );

                },
                body: function( el, t ) {

                    this[1].body_list[ t.data( el, 'target' ) ] = el;

                },
                reason: function( el, t ) {

                    $(el).on( "change", function() {

                        var required = ( ! $(this).val() );
                        $( t.v['cancel_alt.other'] ).attr( "required", function() {

                            return required ? "required" : null;

                        } );


                    } );

                },
                form: function( el, t ) {

                    t.v['cancel_alt.form'] = el;
                    $(el).on( "submit", function() {
                        $( this.section ).click();
                        return false;

                    } );

                },
                assoc_account: function( el, t ) {
                    $(el).on( 'click', function() {
                        var $id = $(this).attr("data-id");
                        t.http.ajax_request( 'agree_assoc', 'post', {id:$id}, function( response ) {
                            t.v['cancel_alt.form'].submit();
                        } );

                     } );

                },
                pause_form: function( el, t  ) {

                    t.v['cancel_alt.pause_form'] = el;
                    $(el).on( "submit", function() {
                        if( $(this).hasClass('submit_ready') ){
                            return true;
                        }else{
                            $( this.section ).click();
                            return false;
                        }                        

                    } );

                },
                start_ca_vid: function( el, t  ) {

                    $(el).on( "click", function() {

                        $(".ab_ca_vid .ca_toggle").fadeIn(3000);
                        $(".wistia_responsive_padding video").get(0).play();

                    } );
                    $(el).parent().parent().on( "click", function() {

                        $(".ab_ca_vid .ca_toggle").fadeIn(3000);

                    } );

                }
            },
        };
        scf.merge( func );

        //Cancel Purpose
        var func = {
            cancel_purpose: {
                    export: function( el, t ) {

                        $(el).on( "click", function() {
                            
                            var id = $(this).parents(".scf-card").find("table").attr("id");
                            
                            exportTableToExcel( id, "Cancel Purpose " + ( id == 'cancel-purpose-weekly-tbl' ? "Weekly" : "Custom Data" ) + " - " );
                            function exportTableToExcel(tableID, filename = ''){
                                var downloadLink;
                                var dataType = 'application/vnd.ms-excel';
                                var tableSelect = document.getElementById(tableID);
                                var tableHTML = tableSelect.outerHTML.replace(/ /g, '%20');
                                var d = new Date();
                                var todaydate = d.getFullYear() + "/" + (d.getMonth()+1) + "/" + d.getDate();
                                // Specify file name
                                filename = filename?filename+todaydate+'.xls':'excel_data.xls';

                                // Create download link element
                                downloadLink = document.createElement("a");

                                document.body.appendChild(downloadLink);

                                if(navigator.msSaveOrOpenBlob){
                                    var blob = new Blob(['\ufeff', tableHTML], {
                                        type: dataType
                                    });
                                    navigator.msSaveOrOpenBlob( blob, filename);
                                }else{
                                    // Create a link to the file
                                    downloadLink.href = 'data:' + dataType + ', ' + tableHTML;

                                    // Setting the file name
                                    downloadLink.download = filename;

                                    //triggering the function
                                    downloadLink.click();
                                }
                            }
                        } );

                    },
                    scroll: function( el, t ) {
                        var $this = $(el),
                        id = $this.data("id");
                        $(document).ready(function(){                            
                            $("html, body").animate({ 
                                scrollTop: $('#'+id).offset().top - 200
                            }, 500);
                        });
                    }
                }
        };
        scf.merge( func );

        // DIT
        var func = {
            data_id_tool: function( el, t, o ) {
                       
                var
                    $this = $(el),
                    $profile_form = $( t.v['data_id_tool.profile_form'] );

            	$this.on( "submit", function() {
            	
            		$this.find("button").addClass("loading");
            		
				} ).find("i").on( "click", function( e ) {

					var 
						$el = $(this),
						remove = $el.hasClass("si-minus"),
						$parent = $el.parent().parent(),
						$clone = {};
						
					if ( remove ) {
					
						$parent.remove();
						
					} else {
					
						$clone = $parent.clone( true );
						$clone.find("input").val("");
						$parent.after( $clone );	
						
					}
            		
				} );

                $profile_form.on( "submit", function () {
				
					$(this).find("button").addClass("loading");
					return true;	
					
				} );

            	
			}        
		};
		scf.merge( func );
        
        // Bulk OptOut
        var func = {
            //added ajax call functionality and pass data to backend logic for task..
            // (remove directory+ behave as "Remove This Listing" button in opt-out request in dashboard)
            optout_directory_and_remove_listing:function(el,t){
                $(el).on("click", function() {
                    //  Collect IDs of marked checkboxes
                    var marked_checkbox_ids=[];
                    $('label.checkbox input[type="checkbox"]:checked').each(function(){
                        var id=$(this).closest('label.checkbox').data('id');
                        if(id){
                            marked_checkbox_ids.push(id);
                        }
                    });
                    // Collect form data from data attributes
                var formData = {
                    lookup_id: $(this).data("lookup-id"),
                    full_name: $(this).data("full-name"),
                    sender_email: $(this).data("sender-email"),
                    user_email: $(this).data("user-email"),
                    profile_urls: $(this).data("profile-urls"),
                    phone_numbers: $(this).data("phone-numbers"),
                    marked_checkbox_ids: marked_checkbox_ids
                };
                    // Send AJAX request
                      $.ajax({
                            url: path.relative_url + "ajax.html?cmd=bulk_optout_with_exclude_directory_and_remove_optout",
                            method: "GET",
                            data:formData,
                            dataType: "json",
                            success: function(response) {
                                if (response.status) { }
                                else { }
                            },
                            error: function() {
                                //skip
                            }
                        });
                    });
                },

            bulk_optout: function( el, t, o ) {

                var
                    $main = $this = $(el),
                    $filters = {},
                    $info = {},
                    $url_count = $( t.v['bulk_optout.url_count'] ),
                    $url_list = $( t.v['bulk_optout.url'] ),
					$url_button = $( t.v['bulk_optout.url_button'] ),
                    $results = $this.find(".results-box"),                    
					update_results_info = function() {

						var
							age_list = [],
							exact_fnames = 0,
							exact_emails = 0,
							exact_phones = 0,
							min_age = 0,
							max_age = 0;

                        $results = $this.find(".results-box:not(.removed)");
						$results.filter(":not(.hide)").each( function( index, elm ) {
							
							var
                                $elm = $(elm),
								age = $elm.data("age"),
								fname_match = $elm.data("fn_match");
								email_match = $elm.data("email_match");
								phone_match = $elm.data("phone_match");

							( ( typeof age == "number" ) && age_list.push( age ) ); 

							fname_match && exact_fnames++;
							email_match && exact_emails++;
							phone_match && exact_phones++;

						
						} );                		

						min_age = Math.min.apply( Math, age_list );
						max_age = Math.max.apply( Math, age_list );
						
						$info['age_min'].text( min_age == Infinity ? 0 : min_age );
						$info['age_max'].text( max_age == -Infinity ? 0 : max_age );
						$info['fn_matches'].text( exact_fnames );
						$info['email_matches'].text( exact_emails );
						$info['phone_matches'].text( exact_phones );
						$url_count.text( $url_list.find("li:not(.hide)").length );

						$this.find(".scf-records-found").each( function( key, section ) {

							var
								$section = $(section),
								id = $section.find("h2").data("id"),
								$result_list = $section.siblings(".search-full").find(".results-box"),
								visible_count = $result_list.filter(":not(.hide)").length,
								counter = $result_list.length;

							if ( counter ) {

								$section.find("h2 i").text( visible_count ).parents(".container").toggleClass( "hide", ! visible_count );
								$info[id].text( visible_count ).parent().toggleClass( "hide", ! visible_count );

							} else {

								$section.parents(".container").remove();
								$info[id].parent().remove();

							}

						} );

					};

				$url_button.on( "click", function() {

					var
						$this = $(this),
						expand = $url_list.hasClass("hide");

					$url_list.toggleClass( "hide", ! expand );
					$this.text( expand ? "Collapse" : "Expand" );
					
				} );
				
                $( t.v['bulk_optout.filters'] ).extract_vars( $filters );
                $( t.v['bulk_optout.info'] ).extract_vars( $info ).find(".jump-links > div").on( "click", function() {

					var
						id = $(this).data("id"),
						offset = $this.find("h2[data-id='" + id + "']").offset();

					$('html, body').scrollTo( offset.top );

				} );

                $this.find('.checkbox.optout input').on( 'change', function( e ) {

 				   	var
                        $this = $(this).parent(),
                        id = $this.data("id"),
                        $parent = $this.parent().parent(),  // Parent container of the profile
                        checked = $this.find("input").prop("checked"),
                        $container = $this.parents(".container"),
                        $section = $container.find("h2"),
                        section_id = $section.data('id');

                    if ( ! checked ) {
                         // Remove the profile and its corresponding <li> element when "OptOut" is unchecked
						$parent.remove();
						$( 'li.id_' + id ).remove();

					} 
                    update_results_info();
            
                 });
                
                $this.find(".verified input").on("change", function() {
                    var
                        $this = $(this),
                        isChecked = $this.prop("checked"),
                        id = $this.parent().data("id"),
                        $profile = $this.closest(".results-box"),
                        profileData = JSON.parse($profile.find("input[name='result']").val());
                        
                
                    if (isChecked) {
                        // Get verified profile data
                        var verifiedEmails = profileData.emails || [];
                        var verifiedPhones = profileData.phones || [];
                
                        // Extract middle name only if the name has exactly three parts
                        var nameParts = profileData.name.split(" ");
                        var verifiedMiddleName = nameParts.length === 3 ? nameParts[1].toLowerCase() : "";
                
                        var verifiedAge = profileData.age;
                
                        // Filter all profiles
                        $results.each(function(key, item) {
                
                            var
                                $item = $(item),
                                itemData = JSON.parse($item.find("input[name='result']").val()),
                                hasMatchingData = false;
                
                            // Check emails
                            if (verifiedEmails.length > 0 && itemData.emails) {
                                hasMatchingData = verifiedEmails.some(email => itemData.emails.includes(email));
                            }
                
                           // Check phones
                            if (!hasMatchingData && verifiedPhones.length > 0 && itemData.phones) {
                                hasMatchingData = verifiedPhones.some(phone => itemData.phones.includes(phone));
                            }
                
                           // Check middle name (only for three-part names)
                            if (!hasMatchingData && verifiedMiddleName && itemData.name.split(" ")[1]) {
                                var itemNameParts = itemData.name.split(" ");
                                var itemMiddleName = itemNameParts.length === 3 ? itemNameParts[1].toLowerCase() : "";
                                hasMatchingData = itemMiddleName === verifiedMiddleName;
                            }
                
                          //  Check age
                            if (!hasMatchingData && verifiedAge && itemData.age) {
                                hasMatchingData = itemData.age === verifiedAge;
                            }
                
                            // Toggle visibility
                            $item.toggleClass("hide", !hasMatchingData);
                        });
                    } else {
                        // Reset visibility when unchecked
                        $results.removeClass("hide");

                          // Ensure all "OptOut" checkboxes are checked
                         $results.find('.checkbox.optout input').prop("checked", true);
                        
                    }
                
                    update_results_info();
                });
				
                $( t.v['bulk_optout.form'] ).on( 'submit', function( e ) {

                    var
                        $this = $(this),
                        $body = $('body'),
                        $img_frm = $( t.v['bulk_optout.image'] ),
                        id_list = [],
                        not_sure_id_list = [];

                    $body.addClass('screenshot');
                    html2canvas( document.querySelector("body") ).then( canvas => {

                    	if ( typeof t.v['bulk_optout.file_data'] != "undefined" ) {
                    		
                            $( t.v['bulk_optout.file_data'] ).val( canvas.toDataURL("img/png") );
                    		
						} else {
							
                        	$img_frm.find('textarea').text( canvas.toDataURL("img/png") );
                        	$img_frm.submit();
                        	
						}
                        $body.removeClass('screenshot');

                        $( t.v['bulk_optout.url'] ).find("li:not(.hide)").each( function( i, e ) {

                            id_list.push( $(e).attr('class').replace( /id_/, '' ) )

                        } );

						$results = $main.find(".results-box:not(.hide):not(.removed)");
	
                        $( t.v['bulk_optout.text'] ).val( id_list.join('|') );
                        $this.get(0).submit();
                    } );

                    return false;

                } );
            
				$filters.refine_results.on( "click", function() {
					var
						state = $filters.state.val(),
						age_from = parseInt( $filters.age_from.val() ),
						age_to = parseInt( $filters.age_to.val() ),
						first_exact_match = $filters.exact_first_name.prop("checked");
                        middle_name_filter = $filters.middle_name.val().trim().toLowerCase(); // Extract middle name filter

					$results = $this.find(".results-box:not(.removed)");
					$results.each( function( key, item ) {
                        debugger;
						var
							check_date = parseInt( item.dataset.age ),
							$item = $(item),
                            resultJson = $item.find("input[name='result']").val(), // Get the hidden field value
                            result = JSON.parse(resultJson); // Parse the JSON string into an object
							fn_match = parseInt( item.dataset.fn_match ),
							id = $item.find(".checkbox").data("id"),
							visible = false;

						if ( ( isNaN( check_date ) || ( check_date >= age_from && check_date <= age_to ) ) ) {

							if ( state == "" || RegExp("\\b" + state + "\\b").test( item.dataset.states ) ) {

								visible = true;

							}

						}

						if ( first_exact_match && ! fn_match ) {

							visible = false;	

						}

                        // Middle name filter
                        if (middle_name_filter) {
                            // Split the full name into parts
                            var name_parts = item.dataset.fullname.split(" ");
                            var middle_name = name_parts.length === 3 ? name_parts[1].toLowerCase() : ""; // Extract middle name if it exists

                            // Check if the middle name matches the filter
                            var middle_name_match = middle_name.includes(middle_name_filter);
                            visible = visible && middle_name_match;
                        }

						$item.toggleClass( 'hide', ! visible );
						$( 'li.id_' + id ).toggleClass( 'hide', ! visible );

					} );

                    update_results_info();

				} );
				
				$filters.reset_filters.on( "click", function() {

					$filters.age_from.val(1);
					$filters.age_to.val(200);
					$filters.state.val('');
                    $filters.middle_name.val('');
					$filters.exact_first_name.prop( "checked", 0 );
					$filters.refine_results.click();					
					
				} );

				var block_btn = document.createElement("span");
				block_btn.className = "block-btn";

				$(".block-popup").on( "mouseenter", function() {

					var
						$this = $(this),
						value = $(this).text(),
						$btn = $(block_btn).clone( true, true ).on( "click", function() {

							var
								value = $(this).data("value"),
								email = /@/.test(value),
								phone = ! email,
								post_data = { 'value': value, 'email': email, 'phone': phone };

							if ( confirm( "Are you sure you want to block this " + ( email ? "Email Address" : "Phone Number" ) + "?" ) ) {

								$this.addClass("blocked").off("mouseenter mouseleave");
								t.http.ajax_request( 'block_boot', 'post', post_data );

							}

						} );

					$btn.data( "value", value ).text( "Block " + ( /@/.test( value ) ? "Email Address" : "Phone Number" ) );
					$this.after( $btn );

				} ).on( "mouseleave", function() {

					var
						$this = $(this);

					setTimeout( function() {

						$this.nextAll(".block-btn").fadeOut( 500, function() {

							$(this).remove();

						} );

						}, 2000 );

				} );
				
				update_results_info();

                $("#copy-clarify").click(function(){
                    // navigator.clipboard.writeText($(".clarification-msg").text());
                    let copied_text = $(".clarification-msg").html();
                    navigator.clipboard.writeText(copied_text.replace(/<br>/g ,"\r\n"));
                    $("#copy-clarify").text('Copied!');
                });

                $("#ai-suggestions").click(function(){
                    let passed_data = $("#ai-suggestions").attr('data-ailist');
                    let optout_suggestions = passed_data.split(",");
                    $(".results-container .results-box .result-section .checkbox").each(function( index ) {

                        //remove  checkmarks from all optout check boxes.
                        if ($( this ).hasClass("optout")){
                            $(this).children("input").prop('checked',false);
                            
                        }

                        //set checkmarks to optout or not sure based on what is in suggested array
                        if (optout_suggestions.includes($(this).attr("data-id")) && $( this ).hasClass("optout")){
                            $(this).children("input").prop('checked',true);
                            
                        }
                
                        
                        
                    });
                });
            },
        };
        scf.merge( func );

           // Charge Back
           var func = {
            chargeback: {
                generate: function( el, t ) {

                    $(el).on( "click", function() {
                    //     var doc = new jsPDF();
                    //     doc.fromHTML($('#content').html(), 15, 15, {
                    //         'width': 210
                    //     });
                    //     doc.save('sample-file.pdf');
                    // } );

                    Export2Word($(el).parent().parent().parent().find('.col-lg-8').attr('id'),"report");

                    function Export2Word(element, filename = ''){
                        var preHtml = "<html xmlns:o='urn:schemas-microsoft-com:office:office' xmlns:w='urn:schemas-microsoft-com:office:word' xmlns='http://www.w3.org/TR/REC-html40'><head><meta charset='utf-8'><title>Export HTML To Doc</title></head><body>";
                        var postHtml = "</body></html>";

                        var html = preHtml+document.getElementById(element).innerHTML+postHtml;

                        var blob = new Blob(['\ufeff', html], {
                            type: 'application/msword'
                        });

                        // Specify link url
                        var url = 'data:application/vnd.ms-word;charset=utf-8,' + encodeURIComponent(html);

                        // Specify file name
                        filename = filename?filename+'.doc':'document.doc';

                        // Create download link element
                        var downloadLink = document.createElement("a");

                        document.body.appendChild(downloadLink);

                        if(navigator.msSaveOrOpenBlob ){
                            navigator.msSaveOrOpenBlob(blob, filename);
                        }else{
                            // Create a link to the file
                            downloadLink.href = url;

                            // Setting the file name
                            downloadLink.download = filename;

                            //triggering the function
                            downloadLink.click();
                        }

                        document.body.removeChild(downloadLink);
                    }

                });
                },

            }
        };
        scf.merge( func );

        //ccpa_crm_requests
        var func = {
            ccpa_crm_requests: {
                details: function( el, t ) {
                    $(el).on( 'click', function() {
                       $id =this.id;
                       t.modal.show( "ccpa_"+$id );
                    } );

                },
                status: function( el, t ) {
                    $(el).on( 'click', function() {
                       $id =this.id;
                       t.modal.show( "ccpa_"+$id );

                    } );

                },
                show_extend: function( el, t ) {
                    $(el).on( 'click', function() {
                       $id =this.id;
                       t.modal.show( "ccpa_"+$id );

                    } );

                },
                history: function( el, t ) {
                    $(el).on( 'click', function() {
                       $id =this.id;
                       t.modal.show( "ccpa_"+$id );

                    } );

                },
                optout_details: function( el, t ) {
                    $(el).on( 'click', function() {
                       $id =this.id;
                       t.modal.show( "ccpa_"+$id );

                    } );

                },
                submit: function( el, t ) {
                    $(el).on( "submit", function() {
                        t.http.ajax_request( 'ccpa_request_update', 'post', $(this).serialize(), function( response ) {
                            location.reload();
                        } );
                        return false;

                    } );

                },
                change_status: function( el, t ) {
                    $(el).on( "submit", function() {
                        if($(this).parent().find("input[name='type']").val()== "" && $(this).parent().find('select[name="status"] option:selected').val() == 1){
                            alert("Please add request type and other details first");
                            return false;
                        } else {
                        t.http.ajax_request( 'ccpa_request_status', 'post', $(this).serialize(), function( response ) {
                            location.reload();
                        } );
                            return false;
                        }
                    } );

                },
                duplicate: function( el, t ) {
                    $(el).on( "click", function() {
                        $id =this.id;
                        t.http.ajax_request( 'ccpa_duplicate', 'post', {id:$id}, function( response ) {
                            location.reload();
                        } );
                        return false;

                    } );

                },
                export: function(el, t, o) {
                    $(el).on("click", function() {
                        // Get the ID of the closest element with class 'scf-card'
                        var closestCardId = $(this).closest('.scf-card').attr('id');
                        
                        if (closestCardId) {
                            // Use the ID to find the specific card and its form inputs
                            var typeValue = $('#' + closestCardId).find('select[name="type"]').val();
                            var fromDate = $('#' + closestCardId).find('input[name="from"]').val();
                            var toDate = $('#' + closestCardId).find('input[name="to"]').val();

                            t.http.ajax_request( 'export_crm', 'post', {status: closestCardId,type:typeValue, from:fromDate, to: toDate}, function( response ) {
                                if(response.status){
                                requests = response.requests;
                               // Create CSV data
                                var csvContent = "data:text/csv;charset=utf-8,";
                                csvContent += "Date,Lookup ID,Sender Email,Full Name, State ,Type,Status, Closed Date\n"; // Header row
                                
                                requests.forEach(function(data) {
                                    var lookupid = data.type.charAt(0).toUpperCase() + data.id + new Date(data.date).getDate();
                                    var statusText = ["Open", "Replied", "Completed Fully", "Reply received", "Closed", "Duplicate", "Denied"];
                                    var status = statusText[data.status] || 'Unknown';
                                    const cleanString = (str) => {
                                        return str ? str.trim().replace(/\s+/g, ' ') : ''; // Trims and replaces multiple spaces with a single space
                                    };
                                
                                    csvContent += [
                                        new Date(data.date).toLocaleDateString(), // Formatting date
                                        lookupid,
                                        cleanString(data.sender_email), // Cleaning sender email
                                        cleanString(data.full_name),
                                        cleanString(data.residence), // Cleaning full name
                                        cleanString(data.type), // Cleaning type
                                        cleanString(status),
                                        data.closed_date || ''
                                    ].join(",") + "\n"; // Append each row
                                });
                    
                                // Create a link to download the CSV file
                                var encodedUri = encodeURI(csvContent);
                                var link = document.createElement("a");
                                link.setAttribute("href", encodedUri);
                                link.setAttribute("download", "CCPA_REPORT_" + new Date().getTime() + ".csv");
                                document.body.appendChild(link); // Required for Firefox
                    
                                link.click(); // Trigger the download
                                document.body.removeChild(link);
                                }
                            } );
                            
                        } else {
                            console.error("No ID found for the closest 'scf-card'.");
                        }
                    });
                },
                show_more: function( el, t, o ) {

                    $(el).on( "click", function() {
                        $(el).toggleText( 'Show Message', 'Hide Message' ).siblings(".complete").toggleClass("active");
                    });
                },
                view: function( el, t, o ) {

                    $(el).on( "click", function() {

                        var
                            $this = $(this),
                            $parent = $(this).closest(".scf-card");

                        $parent.children(".scf-table-responsive").toggle();
                        $parent.children(".scf-pagination").toggle();
                        $this.toggleClass("btn-dark-green btn-gray-default").find("span").toggleText( 'View', 'Hide' ).siblings("i").toggleClass("si-up-circle si-down-circle");
                    } );
                },
                refresh: function( el, t ) {
                    $(el).on( "click", function() {
                        t.http.ajax_request( 'ccpa_refresh', 'post', {}, function( response ) {
                            location.reload();
                        } );
                        return false;

                    } );

                },
                extend: function( el, t ) {
                    $(el).on( "click", function() {
                        $id =this.id;
                        t.http.ajax_request( 'ccpa_extend', 'post', {id:$id}, function( response ) {
                            location.reload();
                        } );
                        return false;

                    } );
                },
                table_buttons: function( el, t, o ) {

                    $(el).on( "click", ".do_action", function() {

                        var
                            $this = $(this);
                            button_data = $this.data();
                            row_data = $this.parents("tr").data(),
                            modal = '',
                            target_table_id = $this.parents("table").attr("id"),
                            $f = {};

                        switch ( button_data.action ) {

                            case "more":
                                ( typeof button_data.active == "undefined" ) && ( button_data.active = false );

                                $this.siblings().remove();
                                if ( ! button_data.active ) {

                                    $this.before( '<span class="active complete">' + row_data.message + '</span>' );

                                }
                                $this.text( ! button_data.active ? "Hide Message" : "Show Message" );
                                button_data.active = ! button_data.active;
                                break;

                            case "details":
                                modal = t.modal.ref['ccpa_details'].extract_vars( $f );
                                $f.id.val( row_data.id );
                                $f.tbl.val( target_table_id );
                                t.modal.show('ccpa_details');
                                break;

                            case "extend":
                                modal = t.modal.ref['ccpa_extend'].extract_vars( $f );
                                $f.id.val( row_data.id );
                                $f.tbl.val( target_table_id );
                                t.modal.show('ccpa_extend');
                                break;

                            case "status":
                                modal = t.modal.ref['ccpa_status'].extract_vars( $f );
                                
                                $f.id.val( row_data.id );
                                $f.tbl.val( target_table_id );
                                $f.fd_url.val(row_data.history?.length && row_data.history.at(-1)?.freshdesk_url || "");
                                $f.content.html( row_data.content );
                                t.modal.show('ccpa_status');
                                break;

                            case "history":
                                modal = t.modal.ref['ccpa_history'].extract_vars( $f );

                                if ( typeof row_data["history"] == "object" ) {

                                    $f.data.children().remove();
                                    
                                    $.each( row_data["history"], function( i, d ) {

                                        var $entry = $("<tr>");
                                        $.each( d, function( k, v ) {
                                            
                                            $f.profile_data.hide(); 
                                            $f.profile_data.find("a").attr("data-id", "");
                                            if (k === "profile_data") {
                                                if (v != false) {
                                                    $f.profile_data.show(); 
                                                    $f.profile_data.find("a").attr("data-id", row_data.id);
                                                }
                                                return true; // Skip this iteration and continue to the next
                                            }

                                            var $col = $("<td>");
                                            $col.html( v );

                                            $entry.append( $col );                                           
                                        } );

                                        $f.data.append( $entry );

                                    } );                                    
                                }
                                t.modal.show('ccpa_history');
                                break;

                        }

                        if ( modal ) {

                            modal.find("input[type=radio], input[type=checkbox]").prop('checked', false);
                            modal.find("input[type=text],textarea").val('');

                        }

                    } );

                },
                optout_details_2: function( el, t ) {
                    $(el).on( 'click', function() {
                        var id = $(this).attr('data-id');                         

                        var send_data = {
                            id: id
                        }
                        t.http.ajax_request( 'optout_person_details', 'post', send_data, function( response ) {   
                          if (response.status) {
                            $('.ccpa_optout_details #rid').text(response.id);
                            $('.ccpa_optout_details .lookup-info #lookup_id').text(response.header.lookup_id);
                            $('.ccpa_optout_details .lookup-info #date').text(response.header.date);
                            $('.ccpa_optout_details .lookup-info #type').text(response.header.type);
                            $('.ccpa_optout_details .lookup-info #residence').text(response.header.residence);
                            $('.ccpa_optout_details .lookup-info #name').text(response.header.name);
                            $('.ccpa_optout_details .lookup-info #email').text(response.header.email);
                            $('.ccpa_optout_details .lookup-info #message').text(response.header.message);
                            $('.ccpa_optout_details  #profile_data_list').html(response.body);
                            t.modal.show('ccpa_optout_details');
                          }
                        } );
                    } );
                },
                modal: {
                    submit: function( el, t, o ) {

                        var
                            $this = $(el),
                            cmd = $this.data("target");

                        $(el).on( "submit", function() {

                            var
                                $this = $(this),
                                tbl = $this.find("input[name=tbl]").val();

                            t.http.ajax_request( cmd, 'post', $(this).serialize(), function( response ) {

                                $this.parents(".scf-popup").find(".close-modal").click();
                                t.ajax_pagination.refs[tbl].refresh_page( true );

                            } );
                            return false;

                        } );

                    }
                },
                filter: function( el, t, o ) {

                    var
                        $this = $(el),
                        data = $this.data();

                    $(el).on( "submit", function() {

                        var
                            pagination = t.ajax_pagination.refs[ data.id ],
                            params = $this.serialize();

                        pagination.current_page = 1;
                        pagination.url = data.url + '&' + params;
                        t.http.request( pagination.url, 'post', [], 'json', function( response ) {

                            if ( response.status ) {

                                pagination.tp = response.pages;
                                pagination.change_button_count();
                                pagination.page_data = response.data;
                                pagination.change_page( 1 );

                            }

                        } );
                        return false;

                    } );

                }
            }
        };
        scf.merge( func );

        // Dahsboard Tools
        var func = {
            tools: {
                include_exclude: function( el, t ) {

                    $(el).on( 'click', function() {

                        var $this = $(this);
                        var id = $this.data("id");
                        var type = $this.hasClass("exclude_from_directory") ? 1 : 0;

                        $this.html("Loading...");

                        $.ajax({ url: path.relative_url + "ajax.html?cmd=exclude_from_directory&id=" + id + "&type=" + type  , dataType : 'json', method:"GET", data:{}, success:function(d){
                                $this.html( d.html );
                                $this.removeClass( d.removeclass );
                                $this.addClass( d.addclass );

                        }});

                    } );

                },
                delete_from_directory: function( el, t ) {

                    $(el).on( 'click', function() {

                        var $this = $(this);
                        var id = $this.data("id");

                        $this.html("Loading...");

                        $.ajax({ url: path.relative_url + "ajax.html?cmd=delete_from_directory&id=" + id  , dataType : 'json', method:"GET", data:{}, success:function(d){
                                $this.html( "Delete From Cache" );
                                $("#tr_id_" + id ).remove();

                        }});

                    });

                },
                get_blacklist_customers: function( el, t ) {

                    var email = $("input[name='blacklist_customers_email']").val();
                    var first_name = $("input[name='blacklist_customers_first_name']").val();
                    var last_name = $("input[name='blacklist_customers_last_name']").val();
                    var phone_number = $("input[name='blacklist_customers_phone_number']").val();
                    var ip = $("input[name='blacklist_customers_ip']").val();
                    var address_1 = $("input[name='blacklist_customers_address_1']").val();
                    var address_2 = $("input[name='blacklist_customers_address_2']").val();

                    email = email.length > 2 ? email : "";
                    first_name = first_name.length > 2 ? first_name : "";
                    last_name = last_name.length > 2 ? last_name : "";
                    phone_number = phone_number.length > 2 ? phone_number : "";
                    ip = ip.length > 2 ? ip : "";
                    address_1 = address_1.length > 2 ? address_1 : "";
                    address_2 = address_2.length > 2 ? address_2 : "";

                    if( email != '' || first_name != '' || last_name != ''  || phone_number != '' || ip != '' || address_1 != '' || address_2 != '' ) {

                        $("#blacklist_customers_list").html( '<tr><td colspan="11"><div class="spinner-inline"><div class="b1"></div><div class="b2"></div><div class="b3"></div></div></td></tr>' );
                        $("#blacklist_customers_buttons").html("");
                        $.ajax({ url: path.relative_url + "ajax.html?cmd=blacklist_customers&type=search" , dataType : 'json', method:"GET", data:{ 'email' : email, 'first_name' : first_name, 'last_name' : last_name, 'phone_number' : phone_number, 'ip' : ip, 'address_1' : address_1, 'address_2' : address_2 }, success:function(d){


                            if( "r" in d ){
                                var table = "";
                                $.each(d.r, function(k,v) {
                                    var status = v.account_disabled == 1 ? "<span class='btn_disabled'>Disabled</span>" : "<span class='btn_enabled'>Active</span>";
                                    table += "<tr><td>"+ k +"</td><td><label class='checkbox'><input type='checkbox' value='"+ v.id +"' name='blacklist_customers' /><span class='checkmark'></span></label></a></td><td>"+ v.email +"</td><td>"+ v.first_name +"</td><td>"+ v.last_name +"</td><td>"+ v.phone_number +"</td><td>"+ v.ip +"</td><td>"+ v.address_1 +"</td><td>"+ v.address_2 +"</td><td></td><td>"+ status +"</td></tr>";
                                });

                                $("#blacklist_customers_list").html( table );
                                $("#blacklist_customers_buttons").html("<div class='row tools-checkbox'><div class='col-md-3'><a id='blacklist_customers_disableall' class='disableall btn btn-purple' >Disable All selected</a></div><div class='col-md-3'><a href='javascript:void(0)' id='blacklist_customers_enableall' class='btn btn-dark-green'>Enable All selected </a></div></div>" );

                            } else {
                                $("#blacklist_customers_list").html( "" );
                            }

                        }});


                    }

                },
                blacklist_search:  function( el, t, o ) {

                    var typingTimer;
                    var doneTypingInterval = 2000;
                    var $blacklist_customers_input = $(".blacklist_customers_input");

                    $(el).on( 'keyup', function() {

                        var name = $(this).attr("name");
                        name = name.replace("blacklist_customers_", "");
                        $(".preview_" + name ).html( $(this).val() );

                        clearTimeout(typingTimer);
                        if ( $blacklist_customers_input.val() ) {

                            typingTimer = setTimeout( o.get_blacklist_customers(), doneTypingInterval );
                        }

                    });

                },
                block_new_signup_filrer:  function( el, t ) {

                    $(el).on( 'click', function() {

                        $( "#signup_filter_submit_repult" ).html('<div class="spinner-inline"><div class="b1"></div><div class="b2"></div><div class="b3"></div></div>');
                        var email = $("input[name='blacklist_customers_email']").val();
                        var first_name = $("input[name='blacklist_customers_first_name']").val();
                        var last_name = $("input[name='blacklist_customers_last_name']").val();
                        var phone_number = $("input[name='blacklist_customers_phone_number']").val();
                        var ip = $("input[name='blacklist_customers_ip']").val();
                        var address_1 = $("input[name='blacklist_customers_address_1']").val();
                        var address_2 = $("input[name='blacklist_customers_address_2']").val();
                        var creditcard = $("input[name='blacklist_customers_creditcard']").val();

                        email = email.length > 2 ? email : "";
                        first_name = first_name.length > 2 ? first_name : "";
                        last_name = last_name.length > 2 ? last_name : "";
                        phone_number = phone_number.length > 2 ? phone_number : "";
                        ip = ip.length > 2 ? ip : "";
                        address_1 = address_1.length > 2 ? address_1 : "";
                        address_2 = address_2.length > 2 ? address_2 : "";
                        creditcard = creditcard.length > 2 ? creditcard : "";

                        $.ajax({ url: path.relative_url + "ajax.html?cmd=blacklist_customers&type=submitfilter" , dataType : 'json', method:"GET", data:{ 'email' : email, 'first_name' : first_name, 'last_name' : last_name, 'phone_number' : phone_number, 'ip' : ip, 'address_1' : address_1, 'address_2' : address_2, 'creditcard' : creditcard }, success:function(d){

                            $( "#signup_filter_submit_repult" ).html( d.mess );

                        }});

                    });

                },
                view_signup_filrers:  function( el, t ) {

                    $(el).on( 'click', function() {

                        $("#blacklist_customers_list").html( '<tr><td colspan="11"><div class="spinner-inline"><div class="b1"></div><div class="b2"></div><div class="b3"></div></div></td></tr>' );
                        $("#blacklist_customers_buttons").html( "" );

                        $.ajax({ url: path.relative_url + "ajax.html?cmd=blacklist_customers&type=filterslist" , dataType : 'json', method:"GET", data:{}, success:function(d){

                               if( "r" in d ){
                                   var table = "";
                                   $.each(d.r, function(k,v) {
                                       table += "<tr id='filter_id_"+ v.id +"' ><td>"+ k +"</td><td></td><td>"+ v.email +"</td><td>"+ v.first_name +"</td><td>"+ v.last_name +"</td><td>"+ v.phone_number +"</td><td>"+ v.ip +"</td><td>"+ v.address_1 +"</td><td>"+ v.address_2 +"</td><td></td><td><div><a href='javascript:void(0)' data-id='"+ v.id +"' class='delete_filter btn btn-danger' >Delete </a><a href='javascript:void(0)' data-id='"+ v.id +"' class='view_filtered btn btn-dark-green' >\""+ v.filterd_count +"\" registrations filtered </a></div></td></tr>";
                                   });

                                   $("#blacklist_customers_list").html( table );


                               } else {
                                   $("#blacklist_customers_list").html( "" );
                               }

                        }});

                    });

                },
                blacklist_customers_all: function( el, t ) {

                    $(el).on( 'click', function() {

                        $( ':checkbox[name=blacklist_customers]' ).prop( 'checked', this.checked );

                    });

                },
                table_action: function( el, t ) {

                    $("body").on( "click", ".delete_filter", function(){

                        var id = $(this).attr("data-id");
                        $.ajax({ url: path.relative_url + "ajax.html?cmd=blacklist_customers&type=deletefilter" , dataType : 'json', method:"GET", data:{ "id" : id }, success:function(d){

                                if( "success" in d ){

                                    $("#filter_id_" + id ).remove();

                                }

                        }});

                    });

                    $("body").on("click", "#blacklist_customers_disableall, #blacklist_customers_enableall", function() {

                        var method = $(this).hasClass("disableall") ? "disable" : "enable";
                        var ids = [];
                        $('input[name="blacklist_customers"]:checked').each(function() {
                            ids.push($(this).val());
                        });

                        $("#blacklist_customers_list").html( '<tr><td colspan="11"><div class="spinner-inline"><div class="b1"></div><div class="b2"></div><div class="b3"></div></div></td></tr>' );

                        $.ajax({ url: path.relative_url + "ajax.html?cmd=blacklist_customers&type=update&method=" + method , dataType : 'json', method:"GET", data:{ 'ids' : ids }, success:function(d){

                            if( "r" in d ){
                                var table = "";
                                $.each(d.r, function(k,v) {
                                    var status = v.account_disabled == "1" ? "<span class='btn_disabled'>Disabled</span>" : "<span class='btn_enabled'>Active</span>";
                                    table += "<tr><td>"+ k +"</td><td><input type='checkbox' value='"+ v.id +"' name='blacklist_customers' /></td><td>"+ v.email +"</td><td>"+ v.first_name +"</td><td>"+ v.last_name +"</td><td>"+ v.phone_number +"</td><td>"+ v.ip +"</td><td>"+ v.address_1 +"</td><td>"+ v.address_2 +"</td><td></td><td>"+ status +"</td></tr>";
                                });

                                $("#blacklist_customers_list").html( table );
                                $("#blacklist_customers_buttons").html("<div class='row tools-checkbox'><div class='col-md-3'><a id='blacklist_customers_disableall' class='disableall btn btn-purple' >Disable All selected</a></div><div class='col-md-3'><a href='javascript:void(0)' id='blacklist_customers_enableall' class='btn btn-dark-green'>Enable All selected </a></div></div>" );

                            } else {
                                $("#blacklist_customers_list").html( "" );
                            }

                        }});

                    });

                },
                disable_all: function( el, t ) {

                    $(el).on( 'click', function() {

                        alert( "ddd33" );

                    });
                }
            }
        };
        scf.merge( func );

    }

    //Plan Details
    var func = {
        plan_details: {
            onclick_show: function( el, t ) {
                $(el).on( "click", function() {
                    if( $(el).parent().parent().parent().children('td.payment-details').css('visibility') == "visible"){
                        $(el).parent().parent().parent().children('td.payment-details').css('visibility', 'hidden');
                        $(el).parent().parent().parent().children('td.payment-details').css('opacity', '0');
                    }else if($(el).parent().parent().children('td.payment-details').css('visibility') == "hidden"){
                        $(".payment-details").css('visibility', 'hidden');
                        $(el).parent().parent().children('td.payment-details').css('visibility', 'visible');
                        $(el).parent().parent().children('td.payment-details').css('opacity', '1');
                    }
                    /*
                    if( $(el).children('td.payment-details').css('visibility') == "visible"){
                        $(el).children('td.payment-details').css('visibility', 'hidden');
                        $(el).children('td.payment-details').css('opacity', '0');
                    }else if($(el).children('td.payment-details').css('visibility') == "hidden"){
                        $(".payment-details").css('visibility', 'hidden');
                        $(el).children('td.payment-details').css('visibility', 'visible');
                        $(el).children('td.payment-details').css('opacity', '1');
                    }*/
                });
            },
            cancel_subscription: function( el, t ) {

                $(el).on( "click", function(e) {

                    e.stopPropagation();
                    var $this = $(this);
                    var id = $this.data("id");
                    var user_manager = $this.data("user");
                    var canceltype = $this.data("canceltype");
                    $this.find(".btn-action").addClass("btn loading");

                    $.ajax({
                        url: path.relative_url + "ajax.html?cmd=subscription_delete_alert",
                        data: { id: id, user: user_manager, canceltype: canceltype },
                        method: "GET",
                        success: function(data) {

                            if (data) {

                                $( ".scf_cancel_sub" ).html( data );
                                $(".cancel_alternative_options").show();  //show cancel modal
                                $this.find(".btn-action").removeClass("btn loading");

                            }

                        }
                    });
                });
        },
    },
        activation_history:{
            onclick_show: function( el, t ) {
                $(el).on( "click", function() {
                    $('html, body').animate({
                        scrollTop: $("#activation_history").offset().top
                    }, 1000);
                });
            }
        }
    };
    scf.merge( func );


    //Invoice
    var func = {
        proceed_redirect:{

        redirect: function(element,t){

            //$(t.v['tl.timer']).text("test");
            $(element).on("click", function(e) {
                let timeoutDuration = t.data(element, 'interval'); 
                setInterval(function() {
                    if(timeoutDuration >=0){
                        $('.scf-thankyou .timer').text(timeoutDuration);
                        timeoutDuration = timeoutDuration-1;
                    }
                }, 1000);
                setTimeout( function() {
                    t.fl( t.data( element, 'href' ) );
                }, t.data( element, 'interval' ) * 1000 );
        });
        },
        modal_show:function(element,t){
          // t.modal.show( "invoice_confirmation" );
           setTimeout( function() {
           $('#redirect_hide_btn').click();
        }, 2000);
        }

    },
    };
    scf.merge( func );

    //Directory
    var func = {
        directory: {
            default_nember_pagin: function( el, t ) {

                $(el).on( "click", function() {

                    var $this = $(this);

                    if( $this.parent().find( ".default_nember_pagin" ).hasClass( "active" ) ) {

                        $this.parent().find( ".default_nember_pagin" ).removeClass( "active" );
                        $this.parent().find(".default_nember_value" ).removeClass( "active" );

                    } else {

                        $this.parent().find( ".default_nember_pagin" ).addClass( "active" );
                        
                    }


                });

            },
            default_nember_filter: function( el, t ) {

                $(el).on( "click", function(e) {

                    e.preventDefault();
                    var $this = $(this);

                    $(".default_nember_value").removeClass("active");
                    $this.parent().find("ul").addClass("active");

                });

            },
            phone: {
                state_change: function( el, t ){
                    $(el).on( "change", function(e) {
                        if( $(this).hasClass('area_code')){
                            window.location.href = "/directory/phone/?page=area_code&state=" + $(this).val();
                        }else{
                            window.location.href = "/directory/phone/?page=state&state=" + $(this).val();
                        }                        
                    });
                },
                show_areacode: function( el, t){
                    $(el).on( "click", function(e) {
                        $(".areacode-grid-2 p").removeClass('deactive');
                        $(".view-area-code").hide();
                    });
                },
                read_more: function( el, t){
                    $(el).on( "click", function(e) {
                        $(".hide-para").removeClass('deactive');
                        $(".read-more").hide();
                    });
                },
                prefix_loadmore: function( el, t ){
                    $(el).on( "click", function(e) {
                        if( max_prefix > prefix_i ){
                            $('.result-contents.deactivate_' + prefix_i).css('display', 'flex');
                            $('.recent-numbers-main-div.deactivate_' + prefix_i).css('display', 'block');
                            prefix_i++;
                        }
                    });
                },
                areacode_filter: function( el, t ){
                    $(el).on( "keyup", function(e) {
                        var dtype = ($(this).attr('data-type') == "mobile") ? ".mobile" : ".desktop";
                        var ee = $(this);
                        
                        var area_code = $(this).val();
                        $(".view-area-code").hide();
                        $('.areacode-grid'+ dtype +' p').removeClass('deactive');
                        $('.areacode-grid'+ dtype +' p').removeClass('item-one');
                        $('.areacode-grid-2'+ dtype +' p').removeClass('deactive');
                        $('.areacode-grid-2'+ dtype +' p').removeClass('item-one');
                        
                        if( area_code == "" ){
                            $('.filter-container i').removeClass('si-close');
                            $('.filter-container i').addClass('si-search');
                        }else{
                            $('.filter-container i').removeClass('si-search');
                            $('.filter-container i').addClass('si-close');

                            var area_code_length = area_code.length;
                            var p_line = 0;
                            $('.areacode-grid'+ dtype +' p').each(function() {
                                var p_text = $(this).text();
                                var p_substring = p_text.substring(0, area_code_length);
                                if (p_substring !== area_code) $(this).addClass('deactive');
                                else{
                                    if( p_line == 0 && $(this).hasClass('active') == false ) $(this).addClass('item-one');
                                    p_line++;
                                }
                            });
                            p_line = 0; max_first = ( dtype == ".mobile" ) ? 4 : 2;
                            $('.areacode-grid-2'+ dtype +' p').each(function() {
                                var p_text = $(this).text();
                                var p_substring = p_text.substring(0, area_code_length);
                                if (p_substring !== area_code) $(this).addClass('deactive');
                                else{
                                    if( p_line < max_first && $(this).hasClass('active') == false ) $(this).addClass('item-one');
                                    p_line++;
                                }
                            });

                            $('.filter-container i').on( "click", function(e){
                                $(ee).val('');
                                $('.filter-container i').removeClass('si-close');
                                $('.filter-container i').addClass('si-search'); 
                                $('.areacode-grid p').removeClass('deactive');
                                $('.areacode-grid-2 p').removeClass('deactive');

                                $('.areacode-grid'+ dtype +' p:eq(0)').addClass('item-one');
                                $('.areacode-grid-2'+ dtype +' p:eq(0)').addClass('item-one');
                            })
                            
                        }
                        $('.areacode-grid'+ dtype +' p:eq(0)').addClass('item-one');
                        //$('.areacode-grid-2'+ dtype +' p:eq(0)').addClass('item-one');
                        
                    });
                },
                send_report_phone: function( el, t){
                    $(el).on( "click", function(e) {
                        $('.scf-form.phone-number').val($(this).data('phone'));
                        t.modal.show("report_a_phone_number"); 
                    });
                },
                enter_phone_number: function( el, t){
                    $(el).on('input', function() {
                        var input = $(this).val().replace(/\D/g, ''); // Remove non-numeric characters
                        var formatted = '';
                
                        if (input.length > 0) {
                            formatted += '(' + input.substring(0, 3); // Add the first part "(209"
                        }
                        if (input.length >= 4) {
                            formatted += ') ' + input.substring(3, 6); // Add "001"
                        }
                        if (input.length >= 7) {
                            formatted += ' - ' + input.substring(6, 10); // Add "- 1250"
                        }
                
                        $(this).val(formatted); // Set the formatted value back to the textbox
                    });
                },
                enter_comment: function( el, t){
                    $(el).on('input', function() {
                        var input = $(this).val();
                        $('.charator_count').html(input.length + '/200');
                    });
                },
                send_report_phone_numbers: function( el, t){
                    var $this = $(el);
                    $(el).on( "click", function(e){                        
                        if( $this.is_loading() ) return;

                        $this.loading( true );

                        if (  !t.validator.phone( $('.scf-form.phone-number').val().replace(/\D/g, '') )) {
                            if ($(".subtitle.save_success_msg").find("p").length === 0) {
                                var msg = $("<p>").html("<span style='color: red;'>Invalid Phone Number</span>");
                                $('.subtitle.save_success_msg').append(msg);
                            }else{
                                $('.subtitle.save_success_msg').find('p').html("<span style='color: red;'>Invalid Phone Number</span>");
                            }
                            $this.loading();
                            return false;
                        }
                        if ( ! t.validator.email( $('.scf-form.email').val() ) ) {
                            if ($(".subtitle.save_success_msg").find("p").length === 0) {
                                var msg = $("<p>").html("<span style='color: red;'>Invalid Email</span>");
                                $('.subtitle.save_success_msg').append(msg);
                            }else{
                                $('.subtitle.save_success_msg').find('p').html("<span style='color: red;'>Invalid Email</span>");
                            }
                            $this.loading();
                            return false;                        
                        }

                        var send_data = {
                            email: $('.scf-form.email').val(),
                            "phone-number": $('.scf-form.phone-number').val().replace(/\D/g, ''),
                            type: ( $('.dropdown-input p').html() == " Mark phone number as.. " ) ? "" : $('.dropdown-input p').html().replace(" Number", ""),
                            details: $('.scf-form.comment').val()
                        };

                        t.http.ajax_request( 'report_phone_number', 'post', send_data, function( response ) {
                            if(response["status"] == true){                                
                                var msg = "<span style='color: green;'>The report has been submitted. You need to verify your email address.</span>";
                                $('.scf-form.email').val('');
                                $('.scf-form.phone-number').val('');
                                $('.scf-form.comment').val('');
                            }else{
                                var msg = "<span style='color: red;'>"+ response["error"] +"</span>";
                            }

                            if ($(".subtitle.save_success_msg").find("p").length === 0) {
                                var ptag = $("<p>").html(msg);
                                $('.subtitle.save_success_msg').append(ptag);
                            }else{
                                $('.subtitle.save_success_msg').find('p').html(msg);
                            }
                            $this.loading();
                            $('.close-modal.phone').on('click', function(){
                                $(".subtitle.save_success_msg").find("p").remove(); 
                            });
                        });
                    });                    
                },
                prefix_order: function( el, t){
                    $(el).on('click', function(e){
                        const urlParams = new URLSearchParams(window.location.search);
                        var state = urlParams.get('state');
                        var areacode = urlParams.get('code');
                        var prefix = urlParams.get('prefix');
                        var filter = (urlParams.get('filter') == null ) ? "" : "&filter=" + urlParams.get('filter');
                        window.location.href = "/directory/phone/?page=prefix&state="+state+"&code="+areacode+"&prefix="+prefix+"&sort="+$(el).data("sort")+filter;
                    });
                },
                prefix_filter: function( el, t){
                    $(el).on('click', function(e){
                        const urlParams = new URLSearchParams(window.location.search);
                        var state = urlParams.get('state');
                        var areacode = urlParams.get('code');
                        var prefix = urlParams.get('prefix');
                        var sort = (urlParams.get('sort') == null ) ? "" : "&sort=" + urlParams.get('sort');
                        window.location.href = "/directory/phone/?page=prefix&state="+state+"&code="+areacode+"&prefix="+prefix+sort+"&filter="+$(el).data("filter");
                    });
                },
                go: function( el, t ){
                    $(el).on( "click", function() {
                        var $this = $(el);
                        let phone = $(el).closest('div').find('input').val();
                        let cleanedPhone = phone.replace(/\D/g, '');
                        $("label.scf-tooltip-val.anim.phone").removeClass('show');
                        //var phone_filter = /\(?([0-9]{3})\)?([ .-]?)([0-9]{3})\2([0-9]{4})/;
                        if ( cleanedPhone.length != 10 ) {                            
                            $("label.scf-tooltip-val.anim.phone").addClass('show');
                            return false;
                        }

                        var full_name = "",
                            first_name = "",
                            middle_name = "",
                            last_name = "",
                            country = "",
                            state = "",
                            city = "",
                            age = "",
                            action = "",
                            search_type = 3;

                            t.search.search_data.phone = cleanedPhone;
                            t.search.search_data.search_type = search_type;
                            t.search.search_data.full_name = full_name;
                            t.search.search_data.first_name = first_name;
                            t.search.search_data.middle_name = middle_name;
                            t.search.search_data.last_name = last_name;
                            t.search.search_data.country = country;
                            t.search.search_data.state = state;
                            t.search.search_data.city = city;
                            t.search.search_data.age = age;
                            t.search.search_data.action = action;

                        t.search.run_search( t.search.search_data, t );
                    });
                },
                showintro: function( el, t ){
                    $(el).on('click', function( e ){
                        $(this).hide();
                        $(this).closest('.content-div').find('.showintro').removeClass('showintro');
                    });
                },
            },         
        }
    };
    scf.merge( func );

    // API Tracking Reports
    var func = {
        api_tracking_report: {
            api_conversions_chart: function( el, t ) {

                t.loader.chartjs( function() {

                    var chart = new Chart( $(el).find("canvas")[0], chart_data["api_conversions_data"] );

                } );

            },            
        }            
    };
    scf.merge( func );

    // Main Controller
    $( function () {

        init_mc = function() {

            // Main Controller
            ( function( a, b, c, d, g, j, z ) {

                // Initialization
                ( typeof scf[g] !== "undefined" ) || ( scf[g] = {} );

                var
                    k = [ z[1], b, z[0], a, z[2] ].join( j ),
                    o = function( l ) {

                        var kl = l.split('.'), p = scf, u;

                        for ( k in kl ) {

                            if ( typeof p[ kl[k] ] === "undefined" ) {

                                return null;

                            } else {

                                !(parseInt(k)) && ( u = p[ kl[k] ] );
                                p = p[ kl[k] ];

                            }

                        }

                        return [ p, u ];

                    };

                document.querySelectorAll( k ).forEach(

                    function( e ) {

                        var
                            x = [ b, z[0], a ].join( j ),
                            f = e.getAttribute( x ),
                            m = o( f );

                        e.removeAttribute( x );

                        if ( m != null && c === typeof m[0] ) {

                            m[0]( e, scf, m[1] );

                        } else if ( m != null && d === typeof m[0] && c === typeof m[0].init ) {

                            m[0].init( e, scf, m[1] );

                        } else scf[g][f] = e;

                    }
                );

            } )( 'js-r', 'data', 'function', 'object', 'v', '', '-[]' );

        };
        init_mc();

    } );
    
    //API Tracking
    var func = {
        api_tracking: function( el, t ) {

            $(el).init( function() {
                
                $(el).click();
                
            } );

            $(el).on("click", function() {
                
                el.classList.add('loading');    
                var 
                    filter = {
                        from_date : $(t.v["api_tracking.table_berify.from_date"]).val(),
                        to_date : $(t.v["api_tracking.table_berify.to_date"]).val(),
                        time_split : $(t.v["api_tracking.table_berify.time_split"]).val(),
                        engine : $(t.v["api_tracking.table_berify.engine"]).val()
                    };
                
                t.http.ajax_request( 'API_Tracking_Berify', 'post', filter, function( response ) {

                    var 
                        dataset = [],
                        labels = [], 
                        colors = [],
                        data = JSON.parse( response["data"] ),
                        keys = [];
                        
                    $.each(data.response, function( key, val ) {
                        
                        var values = [];
                        keys = Object.keys(val);

                        for ( const x in val ) {
                            
                            if( val[x] !== null ) {
                                
                                values.push( val[x] );
                                
                            }
                            
                        }

                        dataset.push( {
                            label: '',
                            data: values,
                            backgroundColor: [],
                            borderColor: [],
                            borderWidth: 1
                        } );
                        
                    } );


                    $(t.v["api_tracking.table_berify.body"]).empty();
                    $(t.v["api_tracking.table_berify.head"]).empty();
                    $.each(keys, function(key,val){
                        labels.push(val);
                        var r = Math.floor(Math.random() * 255);
                        var g = Math.floor(Math.random() * 255);
                        var b = Math.floor(Math.random() * 255);
                        colors.push("rgb(" + r + "," + g + "," + b + ",0.2)");

                        $(t.v["api_tracking.table_berify.head"]).append("<th>"+val.replace("_", " ")+"</th>");
                    });

                    $.each(dataset, function(key,val){
                        val.backgroundColor = colors;
                        val.borderColor = colors;

                        $(t.v["api_tracking.table_berify.body"]).append("<tr>");
                        $.each(val.data, function(key,val){
                            $(t.v["api_tracking.table_berify.body"]).append("<td>"+val+"</td>");
                        });
                        $(t.v["api_tracking.table_berify.body"]).append("</tr>");

                    });
                    $(t.v["api_tracking.chart"]).html("<canvas id='api_tracking_berify_chart'></canvas>");
                    const ctx = document.getElementById("api_tracking_berify_chart").getContext('2d');
                    var config = {
                        type: 'pie',
                        data: {
                            labels: labels,
                            datasets: dataset,
                        },
                        options: {
                            scales: {
                                y: {
                                    beginAtZero: true
                                }
                            }
                        }
                    };

                    t.loader.chartjs( function() {
                        
                        var myChart = new Chart(ctx, config);
                        myChart.update();
                        myChart.render();

                        el.classList.remove('loading');  
                        
                    } );

                } );
                             
            });
            
        },
        api_tracking_key_indicator: function(el,t){
                       
            $(el).click(function(){
                $(t.v["api_tracking_key_indicator.header_monthly"]).text($(el).data("header") + " - Monthly");
                $(t.v["api_tracking_key_indicator.chart_monthly"]).html("<canvas id='ris_key_indicator_monthly_chart'></canvas>");

                $(t.v["api_tracking_key_indicator.loader_monthly"]).show();

                var filter = {
                    type:$(el).data("header")
                }
                
                t.http.ajax_request( 'api_key_indicator_monthly', 'post', filter, function( response ) {
                    $(t.v["api_tracking_key_indicator.loader_monthly"]).hide();

                    var canvas = document.getElementById("ris_key_indicator_monthly_chart");
                    var ctx = canvas.getContext('2d');
                    var chart_monthly = new Chart(ctx, {
                        type: 'bar',
                        data: {
                            datasets: [{
                                label: 'History',
                                data: response["output_previous"],
                                order: 2,
                                borderColor: 'rgb(54, 162, 235)',
                                backgroundColor: 'rgba(54, 162, 235)',
                                borderWidth: 1
                            }, {
                                label: 'Current',
                                data: response["output_current"],
                                type: 'line',
                                borderColor: 'rgb(255, 99, 132)',
                                backgroundColor:'rgba(255, 99, 132, 0.2)',
                                order: 1
                            }],
                            labels: response["labels"],
                        },
                    });

                    

                    canvas.onclick = function(evt) {

                        $(t.v["api_tracking_key_indicator.chart_daily"]).html("<canvas id='ris_key_indicator_daily_chart'></canvas>");
                        
                        const points = chart_monthly.getElementsAtEventForMode(evt, 'nearest', { intersect: true }, true);

                        if (points.length) {

                            const firstPoint = points[0];
                            const label = chart_monthly.data.labels[firstPoint.index];
                            const value = chart_monthly.data.datasets[firstPoint.datasetIndex].data[firstPoint.index];
                            
                            $(t.v["api_tracking_key_indicator.header_daily"]).text($(el).data("header") + " - Daily (" + label + ")");
                            t.modal.show('ris_key_inidicator_daily');                        
                            $(t.v["api_tracking_key_indicator.loader_daily"]).show();


                                var filter = {
                                    type:$(el).data("header"),
                                    day:label
                                }

                                t.http.ajax_request( 'api_key_indicator_daily', 'post', filter, function( response ) {
                                $(t.v["api_tracking_key_indicator.loader_daily"]).hide();

                                var canvas = document.getElementById("ris_key_indicator_daily_chart");
                                var ctx = canvas.getContext('2d');
                                var chart_daily = new Chart(ctx, {
                                    type: 'bar',
                                    data: {
                                        datasets: [{
                                            label: 'History',
                                            data: response["output_previous"],
                                            order: 2,
                                            borderColor: 'rgb(75, 192, 192)',
                                            backgroundColor: 'rgb(75, 192, 192)',
                                            borderWidth: 1
                                        }, {
                                            label: 'Current',
                                            data: response["output_current"],
                                            type: 'line',
                                            borderColor: 'rgb(255, 99, 132)',
                                            backgroundColor:'rgba(255, 99, 132, 0.2)',
                                            order: 1
                                        }],
                                        labels: response["labels"],
                                    },
                                });
                            });

                        }

                    }
                });



                


                
            });


        }
    };
    scf.merge( func );

    //Filters
    var func = {
        filters: {
            all_images_filter: {},
            exact_only_checkbox: {},
            filter_type: "all",
            filter_exact: false,
            run_filter: function() {

                var
                    image = scf.results.image,
                    filter = this;

                image.observer.disconnect();
                image.current_results = {};
                image.$report_vars.results_set.find(">div").remove();

                image.current_results = results_set.filter( function( data ) {

                    return ( ( "all" == filter.filter_type || data.type == filter.filter_type ) && ( ! filter.filter_exact || ( data.exact == true ) ) );

                } );

                image.$compare_modal.hide();
				image.$report_vars.counter.text( image.current_results.length );
				image.api_fetch_images();
				image.observer_init();

                $(".default-note").toggle( "all" == this.filter_type );
                $(".face-match-note").toggle( "face" == this.filter_type );
                $(".full-image-note").toggle( "full" == this.filter_type );

                filter.tags.face.toggle( "face" == this.filter_type );
                filter.tags.full.toggle( "full" == this.filter_type );
                filter.tags.exact.toggle( this.filter_exact );

                image.$report_vars.no_exact.toggle( ! image.current_results.length );
                image.$report_vars.tips.toggle( ! image.current_results.length );

            },
            options: function( el, t ) {

                var $el = $(el);

                if ( "all" == $el.data("id") ) {

                    scf.filters.all_images_filter = $(el);

                }

                $el.on( "click", function() {

                    var
                        $this = $(this),
                        id = $this.data( "id" ),
                        image = scf.results.image;

                    if ( $this.hasClass('active') ) {

                        image.$report_vars.ris_filter.toggleClass("active-filter");
                        return;

                    }

                    image.$report_vars.ris_filter.find("li").removeClass("active");
					$this.addClass("active");
                    scf.filters.filter_type = id;
                    $('.ris-filter').toggleClass("active-filter");
                    scf.filters.run_filter();

                } );
            },
            reset:function() {

                scf.filters.exact_only_checkbox.prop("checked", false);
                scf.filters.filter_exact = false;
                scf.filters.all_images_filter.removeClass("active").click();

            },
            view_all: function( el, t ) {

                $(el).on("click", function() {

                    t.filters.reset();

                } );

            },
            exact_only: function( el, t ) {

				scf.filters.exact_only_checkbox = $(el).on( "change", function() {

                    t.filters.filter_exact = $(el).is(":checked");
                    t.filters.run_filter();

                } );

            },
            tags:{
                init: function( el,t ) {

                    $(el).find(">div").each( function( i, e ) {

                        var
                            $e = $(e),
                            id = $e.data("id");

                        t.filters.tags[id] = $e;
                        $e.find("span").on( "click", t.filters.tags.close );

                    } );

                },
                close: function() {

                    var
                        $parent = $(this).parent(),
                        id = $parent.data("id");

                    if ( "face" == id || "full" == id ) {

                        scf.filters.filter_type = "all";
                        scf.filters.all_images_filter.removeClass("active").click();

                    } else if ( "exact" == id ) {

                        scf.filters.exact_only_checkbox.click();

                    }

                    $parent.hide();

                }
            },
        }
    };
    scf.merge( func );

    // Delete account
    var func = {
        delet_acc: {
            delete: function( el, t ) {

                var $this = $(el);

                $this.on( "click", function() {
                    $.ajax({ url: path.relative_url + "ajax.html?cmd=deactivate_my_account", dataType : 'json',  method:"POST", data:{},  success:function(d){
                        if("status" in d && d.status ){
                            $this.parents('.popup-contents.default').fadeOut(function(){
                                $this.parents('.want_delete').addClass('success');
                                $this.parents('.want_delete').find('.success-contents').fadeIn();

                                setTimeout(function () {
                                    window.location = path.base_url + '?mobile_app_user_redirect_to=Account&np=true&message=del_success';
                                }, 5000);
                                
                                
                            });
                        }
                    }});
                    
                    
                } );

            },
            close: function( el, t ) {
                var $this = $(el);

                $this.on( "click", function() {
                    $this.parents('.scf-popup').fadeOut(function(){
                        $this.parents('.scf-popup').removeClass('success');
                        $this.parents('.want_delete').find('.default').show();
                        $this.parents('.want_delete').find('.success-contents').hide();
                    });
                    
                } );
            }
        },
    };
    scf.merge( func );

    // User Ratings - Chart
    var func = {
        user_ratings: {
            chart: function( el, t ) {

                var $this = $(el),
                    chart = $this.find('#mixed-chart'),
                    days = $this.find('.days').data('value'),
                    ratings = $this.find('.ratings').data('value'),
                    cRatings = $this.find('.current_ratings').data('value');

                new Chart(chart, {
                    type: 'bar',
                    data: {
                    labels: days,
                    datasets: [{
                            label: "Current Month Raings",
                            type: "line",
                            borderColor: "#232323",
                            data: cRatings,
                            fill: false
                        }, {
                            label: "Last Month Raings",
                            type: "bar",
                            backgroundColor: "rgba(78,203,112,1)",
                            data: ratings,
                    }]
                    },
                    options: {
                        title: {
                            display: true,
                            text: 'PL Feedback - Rating Chart'
                        },
                        scales: {
                            y: {
                                ticks: {
                                    beginAtZero: true,
                                    stepSize: 1,
                                    max: 5
                                }
                            }
                        },
                    }
                });
            },
        },
    };
    //GPC Banner
    var func = {
        GPC: {
            close: function( el, t ) {
                $(el).on( 'click', function() {
                    $("#gpc-banner").css("display", "none");
                } );

            },
        }
    }
    scf.merge( func );

    var func = {
        p_lock: {
            file_uploads: function( el, t ) {
                $(el).on( "click", function( e ) {
                    $('.file-upload .upload')[0].click();
                });
            },
            tabs: function( el, t ) {
                $(el).on( "click", function( e ) {
                    var $this = $(this),
                        tab = $this.data("id");

                    $("ul.pm-tabs li").removeClass("active");
                    $this.addClass("active");

                    if( tab == "monitoring" ) {
                        $("#privacy_alerts").hide();
                        $("#privacy_monitoring").show();
                    } else {
                        $("#privacy_alerts").show();
                        $("#privacy_monitoring").hide();
                    }

                });
            },
            alert_menu: function( el, t ) {
                $(el).on( "click", function( e ) {                    
                    if( $(this).closest('.item').find(".alert-menu").hasClass( "active" ) ) {
                        $(this).closest('.item').find(".alert-menu").removeClass( "active" );
                    } else {
                        $(".alert-menu").removeClass( "active" );
                        $(this).closest('.item').find(".alert-menu").addClass( "active" );
                    }
                });
            },
            mark_all_read: function(el, t) {
                $(el).on( "click", function( e ) {   
                    e.preventDefault();
                    if($(el).data("mark-as-read") == 1){
                        $(".mark-as").text( "Mark as Unread" ).prepend("<i class='si-education'></i>");                   
                        
                        var ids = $('.item:not(.read)').map(function() {
                            if (this.id !== "") {
                                return this.id;
                            }
                        }).get();
                        
                        $(el).data("mark-as-read", 0);
                        $(".mark-as").text( "Mark as Unread" ).prepend("<i class='si-education'></i>");
                        $('#pl-unread-count').text("0").hide();
                        $(el).find("span").text("Mark all alerts as unread");

                        ids.forEach(item => {

                            $('#' + item).addClass( "read" );

                            var post_data = {
                                item_id: item,
                                flag_command: '1',
                            };
                        

                            t.http.ajax_request( 'pl_change_flag', 'post', post_data, function( response ) {
                                if ( response.status ) {
                                }
                            });

                        });
                    }else {


                        var ids = $('.item.read').map(function() {
                            if (this.id !== "") {
                                return this.id;
                            }
                        }).get();

                        
                        $(el).data("mark-as-read", 1);
                        $(".mark-as").text( "Mark as Read" ).prepend("<i class='si-education'></i>");
                        $('#pl-unread-count').text(parseInt($('#pl-unread-count').text()) + ids.length).show();
                        $(el).find("span").text("Mark all alerts as read");
                        
                        ids.forEach(item => {

                            $('#' + item).removeClass( "read" );

                            var post_data = {
                                item_id: item,
                                flag_command: '0',
                            };
                        

                            t.http.ajax_request( 'pl_change_flag', 'post', post_data, function( response ) {
                                if ( response.status ) {
                                }
                            });

                        });
                    }
 
                });
            },
            mark_read: function(el, t) {
                $(el).on( "click", function( e ) {   
                    
                    e.preventDefault();
                    
                    $total = parseInt($('#pl-unread-count').text());
                    $id = $(this).closest('.item').attr('id');



                    if ( $(this).closest('.item').hasClass("read") ) {
                        $total++;
                        $('#pl-unread-count').show();      

                        $('#pl-unread-count').text($total);

                        $(this).closest('.item').removeClass("read");
                        var post_data = {
                            item_id: $id,
                            flag_command: '0',
                        };
                    } else {

                        $(this).closest('.item').addClass( "read" );
                        $total--;
                        if ($total == 0) {
                            $('#pl-unread-count').hide();      
                        }

                        $('#pl-unread-count').text($total);

                        var post_data = {
                            item_id: $id,
                            flag_command: '1',
                        };
                    }

                    if ($(el).closest('.item').find(".alert-menu").hasClass( "active" )) {
                        $(this).closest('.item').find(".alert-menu").removeClass( "active" );        
                    }
                    
                    if ($(this).closest('.item').hasClass("read")) {
                        $(this).closest('.item').find(".mark-as").text( "Mark as Unread" ).prepend("<i class='si-education'></i>");                   
                    } else {
                        $(this).closest('.item').find(".mark-as").text( "Mark as Read" ).prepend("<i class='si-education'></i>");
                    }

                    t.http.ajax_request( 'pl_change_flag', 'post', post_data, function( response ) {
                        if ( response.status ) {
                            // $(this).closest('.item').addClass( "read" );
                        }
                    });
                    
                });
            },
            mark_clear: function(el, t) {
                $(el).on( "click", function( e ) {   
                    
                    e.preventDefault();
                    
                    $id = $(this).closest('.item').attr('id');
                    $(this).closest('.item').remove();

                    var post_data = {
                        item_id: $id,
                        flag_command: '2',
                    };

                    if ($("#privacy_alerts .item:not(.read)").length == 0) {
                        $('#pl-unread-count').hide();      
                    }

                    $('#pl-unread-count').text($("#privacy_alerts .item:not(.read)").length);

                    t.http.ajax_request( 'pl_change_flag', 'post', post_data, function( response ) {
                        if ( response.status ) {
                            // $(this).closest('.item').addClass( "read" );
                        }
                    });
                    
                });
            },
            show_list: function( el, t ) {
                $(el).on( "click", function( e ) {        
                    if( $(this).hasClass( "active" ) ) {
                        $(this).closest('.report-list-sub').find('.list-content').removeClass('active');
                        $(this).removeClass( "hide-btn active" );
                        $(this).html( '<span>View Details</span> <i class="si-down-circle"></i>' );
                    } else {
                        $(this).closest('.report-list-sub').find('.list-content').addClass('active');
                        $(this).addClass( "hide-btn active" );
                        $(this).html( '<span>Hide Details</span> <i class="si-up-circle"></i>' );
                    }     
                    
                });
            },
            view_all: function( el, t ) {
                $(el).on( "click", function( e ) {               
                    $(this).closest('.result-list').addClass("show_all");
                });
            },
            toggle_show: function( el, t ) {
                $(el).on( "click", function( e ) {            
                    if( $(this).hasClass( "active" ) ) {
                        $(this).removeClass( "active" );
                        $(this).closest('.rl-list').find('.toggle-desc').removeClass('active');
                    } else {
                        $(this).addClass( "active" );
                        $(this).closest('.rl-list').find('.toggle-desc').addClass('active');
                    }
                });
            },
            view_people: function( el, t ) {
                $(el).on( "click", function( e ) {            
                    $(this).closest('.result-list').addClass('show_all');
                });
            },
            sd_toggle: function( el, t ) {
                $(el).on( "click", function( e ) {            
                    if( $(this).hasClass( "active" ) ) {
                        $(this).removeClass( "active" );
                        $(this).closest('.sd_item').removeClass('active');
                        $(this).html( '<span>View Details</span> <i class="si-down-circle"></i>' );
                    } else {
                        $(this).addClass( "active" );
                        $(this).closest('.sd_item').addClass('active');
                        $(this).html( '<span>Hide Details</span> <i class="si-up-circle"></i>' );
                    }
                });
            },
            pl_animation: function( el, t ) {
                $( document ).ready(function() {

                    var start = 1;                        
                    var interval = setInterval(function() {

                        $(".pl_animation_count").html( start + "% completed" );
                        $(".pl_animation_value").width( start + "%" ); 
                        if( start == 20 ){
                             clearInterval( interval );
                             window.location = path.base_url + 'privacy-lock?action=5a';
                        }
                        start++;

                    }, 1000 );
                    
                });
            },
            uncheck_all: function( el, t ) {
                $(el).on( "click", function( e ) {   
                    if( $(this).hasClass( "check_all" ) ) {
                        $(this).removeClass( "check_all" );
                        $(this).text( "Check All" );
                        $('input:checkbox').each(function() {
                            this.checked = false;
                            var list = $(this).closest('.list');  
                            list.removeClass('checked');
                    });

                    } else {
                        $(this).addClass( "check_all" );                        
                        $(this).text( "Uncheck All" );
                        $('input:checkbox').each(function() {
                            this.checked = true;
                            var list = $(this).closest('.list');  
                            list.addClass('checked');

                        });                        
                    } 
                  
                });
            },
             //V3 Methods
             onboard_email: function( el, t ) {
                $(el).on( "click", function( e ) {
                    $(this).addClass('loading');
                    $(".email_error").remove();
                    post_data = {
                        search_type: 1,
                        email: $("#email2").val(),
                        pl_onboard: 1,
                        pl_onboard_dashboard:false,
                    }
                    if ( ! post_data.email  ) {
                        $("#email2").after( "<span class='email_error'>Email Address is Required</span>" );
                        $(this).removeClass('loading');
                        return false;                        
                    }
                    if ( ! t.validator.email( post_data.email ) ) {
                        $("#email2").after( "<span class='email_error'>Invalid Email Address</span>" );
                        $(this).removeClass('loading');
                        return false;                        
                    }
                    t.http.ajax_request( 'onboard_email', 'post', post_data, function( response ) { });
                    t.http.request( path.base_url+'search.html', 'POST', post_data, 'json', function(response) {
                        response = JSON.parse( response );
                        if ( response.status ) {
                            window.location = path.base_url + 'privacy-lock?action=3'; 
                        }
                    } );
                });
            },
            onboard_name_next: function( el, t ) {
                $(el).on( "click", function( e ) {
                    var fname = $("#fname").val(),
                    lname = $("#lname").val();
                    
                    $(".email_error").remove();
                    
                    if ( fname == "" || lname == "" ) {
                        $("#fname").after( "<span class='email_error'>First name and last name fileds are required</span>" );
                        $(this).removeClass('loading');
                        return false;
                    } else {
                        t.modal.show('age_location_filter');
                    }
                    
                });
            },
            onboard_name: function( el, t ) {
                $(el).on( "click", function( e ) {
                    $(this).addClass('loading');

                    let fname = $("#lname").val(),
                        lname = $("#lname").val();
                    
                    $(".email_error").remove();
                    
                    if ( fname == "" || lname == "" ) {
                        $("#fname").after( "<span class='email_error'>First name and last name fileds are required*</span>" );
                        $(this).removeClass('loading');
                        return false;
                    }
                    
                    if ( $("#age").html() == "" ) {
                        $("#age_error").text("Age field is required");
                        $("#age_error").show();
                        $(this).removeClass('loading');
                        return false;
                    }
                    if ( $("#state").val() == null ||  $("#city").val() == null ) {
                        $("#loc_error").text("Location is required");
                        $("#loc_error").show();
                        $(this).removeClass('loading');
                        return false;
                    }
                    if ( $("#age").html() <= 0 ) {
                        $("#age_error").text("Please enter a valid age");
                        $("#age_error").show();
                        $(this).removeClass('loading');
                        return false;
                    }
                    
                        // Retrieve day, month, and year values
                    const day = $(".age_location_filter #datepicker_day").val().padStart(2, '0');
                    const month = $(".age_location_filter #datepicker_month").val().padStart(2, '0');
                    const year = $(".age_location_filter #datepicker").val();

                    // Combine values into a formatted date string
                    const dob = `${day}/${month}/${year}`;

                    $agemin =  $("#age").html() - 3;
                    $agemax=  parseInt($("#age").html()) + parseInt(3);
                    $age = $agemin+" - "+$agemax;
                    post_data = {
                        search_type: 2,
                        full_name: $("#fname").val()+" "+$("#mname").val()+" "+$("#lname").val(),
                        age: $age,
                        dob: dob,
                        state: $("#state").val(),
                        city: $("#city").val(),
                        pl_onboard: 2,
                        pl_onboard_dashboard:false,
                    }
                    t.http.ajax_request( 'onboard_name', 'post', post_data, function( response ) { });
                    t.http.ajax_request( 'add_birthday_to_pl_report', 'post', {birthday: dob}, function( response ) {} );
                    t.http.request( path.base_url+'search.html', 'POST', post_data, 'json', function( response ) {
                        response = JSON.parse( response );                        
                        window.location = path.base_url + 'privacy-lock?action=2';

                    } );
                });
            },
            onboard_phone: function( el, t ) {
                $(el).on( "click", function( e ) {
                    $(this).addClass('loading');
                    post_data = {
                        search_type: 3,
                        phone:$("#phone").val(),
                        pl_onboard: 3,
                        pl_onboard_dashboard:false,
                    }
                    if($("#phone").val() == ""){
                        window.location = path.base_url + 'privacy-lock?action=4';
                    }
                    else{
                    t.http.request( path.base_url+'search.html', 'POST', post_data, 'json', function( response ) {
                        response = JSON.parse( response );
                        // skipping step 4 until images are added to PL
                        window.location = path.base_url + 'privacy-lock?action=4';

                    } );
                    }
                });
            },
            privacy_mode: function( el, t ) {
                $(el).on( "click", function( e ) {
                    $(this).addClass('loading');                        

                    var arr = [];
                    $('input:checkbox:checked').each(function () {
                        arr.push($(this).parent().text());
                    });
                    console.log(arr);
                    post_data = {
                        type: "email",
                        data:arr,
                    }
                    t.http.ajax_request( 'pl_selection', 'post', post_data, function( response ) {
                        if ( response.status ) {   
                            window.location = path.base_url + 'privacy-lock?action=6';
                        }
                    });
                });
            },
            selected_privacy: function( el, t ) {
                $(el).on( "click", function( e ) {
                    $(this).addClass('loading');

                    var arr = $('.scf-pl-steps .privacy-types.selected').attr('data-id');

                    post_data = {
                        type: "privacy_type",
                        data:arr,
                    }
                    
                    t.http.ajax_request( 'pl_type_selection', 'post', post_data, function( response ) {
                        if ( response.status ) {   
                            window.location = path.base_url + 'privacy-lock?action=7';
                        }
                    });
                });
            },
            show_privacy_score: function( el, t ) {
                $(el).ready(function() {
                    var dVal = $('.pl-meter #privacy_score').data('score') || 0.5;
                    dVal = dVal /100;
                    $( el ).ready(function( el ){
                        t.p_lock.rotate_dial(1,dVal);
                    });
                });
            },
            rotate_dial: function( val, valnext, el, t ) {
                var deg = 0;
                var dial = $(".dial .inner");
                var value = Math.round(val*100);
                var range = $(".pl-meter .range-bg");
                range.css({'width': +value+'%'});

                deg = (value * 177.5) / 100;
                dial.css({'transform': 'rotate('+deg+'deg)'});
                dial.css({'-ms-transform': 'rotate('+deg+'deg)'});
                dial.css({'-moz-transform': 'rotate('+deg+'deg)'});
                dial.css({'-o-transform': 'rotate('+deg+'deg)'}); 
                dial.css({'-webkit-transform': 'rotate('+deg+'deg)'});
                if( valnext ){
                    setTimeout(function() { 
                        scf.p_lock.rotate_dial(valnext, 0);
                    }, 1500);
                        }
            },
            scan: function( el, t ) {
                $(el).on( "click", function( e ) {
                    $(this).addClass('loading');                        
                    window.location = path.base_url + 'privacy-lock?action=4';
                });
            },
            next: function( el, t ) {
                $(el).on( "click", function( e ) {
                    $(this).addClass('loading');                        
                        url = window.location.href;
                        var state = url.substr(url.length - 1)
                        console.log(state);
                        var arr = [];
                        $('input:checkbox:checked').each(function () {
                            arr.push($(this).parent().text());
                        });
                        switch(state) {
                            case 'a':
                                post_data = {
                                    type: "email",
                                    data:arr,
                                }
                              break;
                            case 'b':
                                post_data = {
                                    type: "phone",
                                    data:arr,
                                }
                              break;
                            case 'c':
                                post_data = {
                                    type: "social",
                                    data:arr,
                                }
                              break;
                            case 'd':
                                post_data = {
                                    type: "relationships",
                                    data:arr,
                                }
                              break;
                            case 'e':
                                post_data = {
                                    type: "jobs",
                                    data:arr,
                                }
                              break;
                            case 'f':
                                post_data = {
                                    type: "locations",
                                    data:arr,
                                }
                              break;
                            default:
                                window.location = path.base_url + 'privacy-lock?action=8';
                          }
                          t.http.ajax_request( 'pl_selection', 'post', post_data, function( response ) {

                            if ( response.status ) {
                                state = String.fromCharCode(state.charCodeAt() + 1);
                                while($("[name='"+state+"']").val() <1){
                                    state = String.fromCharCode(state.charCodeAt() + 1) 
                                }
                                if(state > 'f'){
                                    window.location = path.base_url + 'privacy-lock?action=6';
                                }
                                else{
                                    window.location = path.base_url + 'privacy-lock?action=5'+state;
                       
                                }
                            }

                        });

                });
            },
            age: function( el, t ) {
                $(el).on("change", function(e) {

                    $(".age_location_filter .age_value").next('#inv_age_error').remove();
                    $('.age_location_filter .age_value').show();

                    // Retrieve values
                    var day = $(".age_location_filter #datepicker_day").val();
                    var month = $(".age_location_filter #datepicker_month").val();
                    var year = $(".age_location_filter #datepicker").val();
                
                    // Check if all fields are filled
                    if (!day || !month || !year) {
                        $(".age_location_filter #age").html("");
                        $('.age_location_filter .age_value').hide();
                        return;  // Exit if any field is missing
                    }
                
                    // Create selected date object, ensuring valid month (0-indexed in JavaScript)
                    var selectedDate = new Date(year, month - 1, day);
                
                    // Check if the created date is valid (e.g., handles invalid dates like February 30)
                    if (selectedDate.getDate() != day || selectedDate.getMonth() != (month - 1) || selectedDate.getFullYear() != year) {
                        $(".age_location_filter #age").html("");
                        $('.age_location_filter .age_value').hide();
                        $(".age_location_filter .age_value").after('<span class="age_error" id="inv_age_error" style="margin-top:10px;">Invalid Age</span>');
                        return;  // Exit if the date is invalid
                    }
                    
                    // Get today's date for comparison
                    var today = new Date();
                
                    // Calculate the age
                    var age = today.getFullYear() - selectedDate.getFullYear();
                    var m = today.getMonth() - selectedDate.getMonth();
                
                    // Adjust if the birthday hasn't occurred yet this year
                    if (m < 0 || (m === 0 && today.getDate() < selectedDate.getDate())) {
                        age--;
                    }
                
                    // Display the calculated age
                    if (age >= 0) {
                        $(".age_location_filter #age").html(age);
                        $('.age_location_filter .age_value').show();
                    } else {
                        $(".age_location_filter #age").html("");
                        $('.age_location_filter .age_value').hide();
                    }
                });                
            },
            
            plan_select: function( el, t ) {
                $(el).on( "click", function( e ) {   
                 
                    t.http.ajax_request('pl-token-update', 'POST', {id:$(this).data('id'),token:$(this).data('token')}, function( response ) {
                        $('#search_ready_agreement_text').text(response['text']);
                        $('.billing_terms_text').html(response['billing_terms_text']);
                        $(".pl-checkout-box .pl-sub-plans .plan-box").removeClass( "active" );
                        $(this).closest('.plan-box').addClass('active');
                    } );

                });
            },
            save_changes: function( el, t ) {
                $(el).on( "click", function( e ) { 
                    if($(this).data('home')){
                        if ( $(this).is_loading() ) return false;
                        $(this).loading( true );
                    }else{
                        t.modal.close( 'pl_save_confirmation' );
                        if ( $(".btn-loading").is_loading() ) return false;
                        $(".btn-loading").loading( true );
                    }
                        //$("#btn_save_bottom").loading( true );

                    var emails = [];
                    let has_invalid_emails = false;
                    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                    $('input.pl-email.new').each(function () {
                        $(this).css("border-color" , "#ccc")
                        if(!emailRegex.test($(this).val()) && $(this).val() != "" ){
                            $(".btn-loading").removeClass( "loading" );
                            has_invalid_emails = true;
                            $(this).css("border-color" , "#f00e0e")
                            alert('Invalid E-mail');
                            return false;
                        }
                    });

                    $('input.pl-email').each(function () {
                        if($(this).val() != ''){
                            emails.push($(this).val());
                        }
                    });  
                    var phones = [];
                    $('input.pl-phone').each(function () {
                        if($(this).val() != ''){
                            phones.push($(this).val());
                        }
                    });  
                    post_data = {
                        state: $("#pl-state").val(),
                        city: $("#pl-city").val(),
                        birth_year: $("#birth_year").val(),
                        emails: emails,
                        phones: phones,
                    }
                    if(!has_invalid_emails){
                        t.http.ajax_request( 'save_changes', 'post', post_data, function( response ) {
                            if ( response.status ) {
                               window.location = path.base_url + 'privacy-lock?action=7a'
                            }else{
                               window.location = path.base_url + 'dashboard.html?section=privacy_monitoring'
                            }
                        });
                    }
                });
            },
            save_pl_update: function( el, t ) {
                $(el).on( "click", function( e ) { 
                    $(this).addClass('loading');
                    post_data = {
                    }
                    t.http.ajax_request( 'privacy_lock_update', 'post', post_data, function( response ) {
                        if ( response.status ) {
                            window.location = path.base_url + 'dashboard.html?section=privacy_lock_report'
                        }
                    });
                });
            },
            chart: function( el, t ) {
                t.loader.google_charts(drawChart,true);

                function drawChart() {
                    t.http.ajax_request( 'privacy_lock_chart', 'post', "", function( response ) {
                        if ( response.status ) {
                            console.log(response.data)
                            var data = new google.visualization.DataTable();
                                    data.addColumn('string', 'Date');
                                    data.addColumn('number', 'Current');
                                    $.each( response.data, function( i, obj ) {                                  
                                        data.addRows( [ [ obj.date, parseFloat(obj.count)] ] );

                                    } );
            
                                var options = {
                                curveType: 'function',
                                legend: 'none',
                                };
            
                                var chart = new google.visualization.LineChart(document.getElementById('curve_chart'));
            
                                chart.draw(data, options);                        }
                    });
                    
                }
            },
            main_toggle: function( el, t ) {
                $(el).on( "click", function( e ) {            
                    if( $(this).parent().hasClass( "active" ) ) {
                        $(this).parent().removeClass( "active" );
                    } else {
                        $(this).parent().addClass( "active" );
                    }
                });
            },
            redirect_page: function( el, t ) {
                $(el).on("click", function(){
                    window.open($(el).data("target"), '_blank');
                });
            },
            reserve_now: function( el, t ) {
                $(el).on("click", function(){
                    $(".form").css("display", "flex");
                });
            },
            add_family: function( el, t ) {
                $(el).on("click", function(){
                    post_data = {
                        email: $("#fg-email").val()
                    }
                    t.http.ajax_request( 'add_famly_guard', 'post', post_data, function( response ) {
                        if ( response.status ) {
                            $(".form").css("display", "none");
                            $(".fg-text").text("Keep an eye on your inbox! We'll let you know when you can use this feature.");
                            $(".pl-family-guard .btn").addClass("reserved-btn")
                            $(".pl-family-guard .btn").html(" <span class='si-done'></span>Reserved")
                        }
                    });
                });
            },
            report_edit: function( el, t ) {
                $(el).on("click", function(){
                    var arr = [];
                    $('input[type="checkbox"].edit_check:not(:checked)').each(function () {
                            arr.push($.trim($(this).parent().text()));
                    });

                    post_data = {
                        data: arr
                    }
                    t.http.ajax_request( 'edit_report', 'post', post_data, function( response ) {
                        if ( response.status ) {
                            window.location = path.base_url + 'dashboard.html?section=privacy_lock_report'
                        }
                    });
                });
            },
            add_email: function (el,t) {
                $(el).on("change",function(){
                    var customEmailInput = $('.view_pl_score #custom-email');
                    var email = $(this).val();
                    if (email === 'custom') {
                        customEmailInput.show();
                        customEmailInput.setAttribute('required', 'true'); 
                        customEmailInput.focus();
                    } else {
                        customEmailInput.hide();
                        customEmailInput.removeAttribute('required');
                    }
                });
            },
            score_share: function (el,t) {
                $(el).on("click",function(){
                    var $this = $(this);  // Store the reference to the original element
                    $this.addClass('loading');

                    var fname = $('.view_pl_score #fname').text(),
                    content =  $('.view_pl_score #email_content').text();

                    var email =  $('.view_pl_score #email-select').val();
                    if(email  == 'custom'){
                        email = $('.view_pl_score #custom-email').val();
                    }
                   
                     // Email validation
                    var emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                    if (!emailPattern.test(email)) {
                        $('.view_pl_score #error').show();
                        $('.view_pl_score #error').text("Please enter a valid email address.");
                        $this.removeClass('loading');
                        $('.view_pl_score #custom-email').css('border-color', '#f00e0e'); // Add red border to the input field
                        $('.view_pl_score #email-select').css('border-color', '#f00e0e'); // Add red border to the input field
                        return; // Exit the function if the email is invalid
                    } else {
                        $('.view_pl_score #error').hide();
                        $('.view_pl_score #custom-email').css('border-color', ''); // Remove red border if email is valid
                        $('.view_pl_score #email-select').css('border-color', ''); // Remove red border if email is valid
                    }
                    var action = $('.view_pl_score #action').val();
                    
                    input_post = {
                        fname:fname,
                        content:content,
                        email:email,
                        action:action,
                    }

                    //remove error messages
                    $('.view_pl_score #error').hide();
                    $('.view_pl_score #custom-email').css('border-color', ''); // Remove red border if email is valid
                    $('.view_pl_score #email-select').css('border-color', ''); // Remove red border if email is valid

                    t.http.ajax_request( 'share_privacy_score', 'post', input_post, function( response ) {
                        $this.removeClass('loading');  // Use the stored reference
                        if ( response.status ) {
                            
                            var subject = encodeURIComponent('Your Privacy Score is ');
                            var body = encodeURIComponent(content);
                            // Open the email client in a new tab
                            var mailtoLink = `mailto:${email}?subject=${subject}&body=${body}`;
                            window.open(mailtoLink, '_blank');
                        }else{
                            $('.view_pl_score #error').show();
                            $('.view_pl_score #error').text("Something went wrong!.");
                        }
                    });
                });
            },
            view_more_live_data_alerts: function( el, t ) {
                $(el).on( "click", function( e ) {            
                    $(this).parent().find('.rl-list').removeClass('d-none');
                    $(this).hide();
                });
            },
            mark_pl_alert_as_read: function( el, t ) {
                $(el).on( "click", function(e) {     
                    e.preventDefault();
                    post_data = {
                        id: $(this).data("id")
                    }
                    t.http.ajax_request( 'update_pl_alert_as_read', 'post', post_data, function( response ) {
                        if(response){
                            $(el).addClass("marked");
                            $(el).html('<i class="si-done"></i> Marked as Read');
                        }
                    });
                });
            },
            email_checkbox: function( el, t ) {
                $(el).on("change", function(){
                    // Get the parent '.list' element
                    var list = $(this).closest('.list');                    
                    // Check if the '.checked' class is present
                    if (list.hasClass('checked')) {
                        // Remove the class if it is present
                        list.removeClass('checked');
                    } else {
                        // Add the class if it is not present
                        list.addClass('checked');
                    }
                });
            },
            privacy_type: function( el, t ) {
                $(el).on("click", function(){
                    $('.scf-pl-steps .privacy-types').removeClass('selected');
                    // Add the 'selected' class to the clicked option
                    $(this).addClass('selected');
                       
                    // Store the selected option's ID
                    selectedType = $(this).attr('id');
                });
            },
        }
    }
    scf.merge( func );
    // ChatBot
	var func = {
		chatbot: {
			bubble: function( message, bot ) {

				var 
				replace = [ { 'message': message }, { 'bot': ( bot ? '' : '-user' ) }, { 'direction': ( bot ? 'left' : 'right' ) } ],
				bubble = atob('PGRpdiBjbGFzcz0ibXNnIHtkaXJlY3Rpb259LW1zZyI+PGRpdiBjbGFzcz0ibXNnLWltZ3tib3R9IiA+PC9kaXY+PGRpdiBjbGFzcz0ibXNnLWJ1YmJsZSI+PGRpdiBjbGFzcz0ibXNnLXRleHQiPnttZXNzYWdlfTwvZGl2PjwvZGl2PjwvZGl2Pg==');

				replace.map( function( data ) {

					bubble = bubble.replace( '{' + Object.keys( data )[0] + '}', Object.values( data )[0] );

				} );

				return $(bubble);

			},
			send: function( message, bot ) {

				var 
				chatbot = this;

				if ( ! bot ) {

					this.$input.val("");
					chatbot.$chat.append( chatbot.bubble( message, false ) );

				}

				scf.http.ajax_request( 'chatbot_submit', 'post', { data: message }, function( response ) {

					chatbot.$chat.append( chatbot.bubble( response.return, true ) );

				} );								

			},
			init: function( el, t, o ) {

				var append = ( o.$chat = $(el).find(".msger-chat") ).append;				
				o.$chat.append = function() {

					var ret = append.apply( this, arguments );
					o.$chat.scrollTop( 100000 );
					return ret;

				}

				o.$submit = $(el).find(".chatbox-submit").on( "click", function() {

					o.send( o.$input.val(), false );

				} );

				o.$input = $(el).find(".chatbox-input").on( "keydown", function( e ) {

					if ( 13 == e.keyCode ) {

						o.$submit.click();

					}

				} ).focus();

				o.send( 'welcome', true );

			},
			faq: function ( el, t, o ) {

				$(el).find('span').on( 'click', function() {

					o.$input.val( $(this).text() );

				} );

			},
		}
	}
    scf.merge( func );
    
    //Backfill Identity
    var func = {
        backfill_identity: {
            toggle: function( el, t ) {
                $(el).on("click", function(){
                    $(".scf-card.backfill_identity .scf-table").toggleClass("d-none");
                });
            },
            fetch_data: function( el, t ) {
                $(el).on("click", function(){
                    $(el).addClass("loading");
                    t.http.ajax_request( 'bing_api', 'post', {url:$(el).data("url")}, function( response ) {
                    $(el).removeClass("loading");
                        $($(el).parent().parent().find("input[type=text]")[0]).val(response["data"]["tags"][1]["displayName"]);
                    });
                });
            },
            
            search_bing: function( el, t ) {
                $(el).on("click", function(){
                    $(el).addClass("loading");
                    t.http.ajax_request( 'bing_api', 'post', {url:$(el).data("url")}, function( response ) {
                    $(el).removeClass("loading");
                        let imageInsightsToken = response["data"]["image"]["imageInsightsToken"];
                        window.open("https://www.bing.com/images/search?view=detailV2&insightsToken="+imageInsightsToken+"&FORM=SBIVSP&iss=SBIUPLOADGET&sbisrc=ImgPicker&idpbck=1", '_blank').focus();
                    });
                });
            },
        }
    }
    scf.merge( func );

    var func = {
        card_option: {
            subscription: function( el, t ) {

                $(el).find('.input-wrapper input').on('change', function(){
                    
                    if($(this).is(':checked')){
                        var type = $(this).attr('data-type');

                        $('.payment-section .card-wrapper').slideUp(function(){
                            $('#'+type).find('.card-wrapper').slideDown();
                        });                        
                    }

                });

            },
            select: function( el, t ) {
                $(el).find('.card-option').on("click", function(){
                    var $this = $(this),
                        selectedWrapper = $this.parents('.card-inner-wrapper').find('.selected-item'),
                        optionsWrapper = $this.find('.options-wrapper'),
                        htmlEl = $this[0].innerHTML;
                    
                    $this.parents('.card-inner-wrapper').toggleClass("active");
                    selectedWrapper.html( htmlEl );

                    if(!$this.hasClass('selected-item')){
                        $('.options-wrapper .card-option').removeClass('selected');
                        $this.addClass('selected');
                    }                   

                });
            }
        }
    }
    scf.merge( func );

    //Holehe
    var func = {
        holehe: {
            onclick_show: function( el, t ) {
                
                $(el).on( "click", function() {
                    var icon = $(el).find('.item-inner .icon-image').html(),
                        text = $(el).find('.item-inner').text();

                    $('.scf-popup.holehe-popup').find('.input').html(icon);
                    $('.scf-popup.holehe-popup').find("input[name='username']").val('https://www.'+text+'/');
                    //$('.scf-popup.holehe-popup').find('.email').text($(this).data( "email" ));
                    
                    t.modal.show("holehe-popup");
                });

            },
            go_to_link: function( el, t ) {
                $(el).on("click", function () {
                window.open($('.scf-popup.holehe-popup').find("input[name='username']").val());
            });
            },
            close: function( el, t ) {

            },
            view_all: function (el, t) {
                var pretext = $('#holehe-view-more').html();
                $(el).on("click", function () {
                    var elm = $(this).parent().find('.items-wrapper');
                    $(this)
                    if (elm.hasClass('limit')) {
                        elm.removeClass('limit');
                        $(this).text('Show Less').append("<span class='si-up'></span>");
                    } else {
                        elm.addClass('limit');

                        $(this).html(pretext)
                    }
                    //       $(this).parent().find('.items-wrapper').toggleClass("limit").end().toggleText( 'Show Less', 'View All' ).end().find("span").toggleClass("si-down");

                });

            },
        }
    }
    scf.merge( func );
    //Backfill Identity
    var func = {
        pl_update_profile: {
            add: function( el, t ) {
                $(el).on("click", function(){
                    
                    var type = $(this).attr('data-type'),
                        lastEmail = $('.scf-form.pl-email').last().val(),
                        lastPhone = $('.scf-form.pl-phone').last().val();

                    if(type == 'email' && lastEmail != '') {
                        $( '<input type="email" class="scf-form pl-email new" placeholder="Enter Email ID..." />' ).insertBefore( $(this) );
                    } 

                    if(type == 'phone' && lastPhone != '') {
                        $( '<input type="text" class="scf-form pl-phone" placeholder="Enter Phone Number..." />' ).insertBefore( $(this) );
                    }

                });
            },
            remove: function( el, t ) {
                $(el).on("click", function(){
                    
                    $(this).parent('.form-list').remove();

                });                
            },
            remove_and_save: function (el, t) {
                $(el).on("click", function (event) {
                    event.stopPropagation();
                    // Save the reference to the removed element
                    const $removedElement = $(this).parent('.form-list');
                    const $originalParent = $removedElement.parent(); // Store the original parent to reinsert later
                    
                    // Remove the element
                    $removedElement.detach();
            
                    // Optionally, save the element reference in `t` to access it later
                    t.removedElements = t.removedElements || [];
                    t.removedElements.push({ element: $removedElement, originalParent: $originalParent });
            
                    var target = $(this).data('target');
                    if (typeof t.modal.ref[target] !== 'undefined') {
                        t.modal.ref[target].data('current', $(this).data());
                        if ((typeof t.modal[target] == "object") && typeof t.modal[target]["pre_show"] == "function") {
                            t.modal[target]["pre_show"](t.modal.ref[target], t);
                        }
                        t.modal.show(target);
                    }
            
                    t.modal.ref[target].find('#saveBtn').data('home', true);
                });
            },
            restore_elements: function (el, t) {
                $(el).on("click", function () {
                    // Check if there are removed elements stored
                    if (t.removedElements && t.removedElements.length > 0) {
                        t.removedElements.forEach(({ element, originalParent }) => {
                            // Append the removed element back to its original parent
                            originalParent.append(element);
                        });

                        // Clear the removed elements array after restoring
                        t.removedElements = [];
                    }
                });
            },
            toggle_accordion:function (el,t) {
                $(el).on("click", function () {
                    $(this).toggleClass('active');
                
                    const $icon = $(this).find('b');
                    $icon.toggleClass('si-up-circle si-down-circle');
                });                
            }
            
        }
    }
    scf.merge( func );
    //Refund
    var func = {
        refund: {
            tr_toggle: function( el, t ) {
                
                $('#refund-by-user-tbl').on( "click",'.toggle', function() {
                    //$(this).toggleClass('si-triangle-up','si-triangle-down');
                    var tr=$( this ).closest('tr');
                    if ( tr.is( ".full" ) ) {
                        tr.removeClass('full');
                    } else {
                        tr.addClass('full');
                    }
                    
                });

            },
            toggle_tab: function ( el, t, o ) {

                $(el).on( "click",'li', function() {
                $(el).find('li').removeClass('active');
                $(this).addClass('active');
                $('.refund-tabs').hide();
                $('#tab-'+$(this).data('target')).show();

                });

            },
            graph_display: function (el, t, o) {
                $('#chart-tab').on('click', get_chart);
                $('#chart-mode').on('change', get_chart);
                const ctx = document.getElementById("myChart1").getContext('2d');
                function get_chart() {

                    //var ctx = document.getElementById("myChart1").getContext("2d");



                    t.loader.chartjs(function () {
                        t.http.ajax_request('refund_graph', 'post', { type: $('#chart-mode').val() }, function (response) {

                            var config = {
                                type: 'line',
                                data: {
                                    //labels:["January", "February", "March", "April", "May", "June"],
                                    datasets: [{

                                        label: 'Total Amount $',
                                        data: response.data,
                                        fillColor: "#79D1CF",
                                        borderColor: "#470faa",
                                        borderWidth: 2,
                                        fill: {
                                            target: 'origin',
                                            above: 'rgba(22, 38, 226, 0.5)',   // Area will be red above the origin

                                        }
                                    }]
                                },
                                options: {
                                    scales: {
                                        y: {
                                            beginAtZero: true,
                                            ticks: {
                                                callback: (label) => `$ ${label}`,
                                              },
                                        }
                                    },
                                    tension: 0.3
                                }
                            };
                            let chartStatus = Chart.getChart("myChart1"); // <canvas> id
                            if (chartStatus != undefined) {
                                chartStatus.destroy();
                            }
                            var myChart = new Chart(ctx, config);




                            el.classList.remove('loading');
                        });
                    });

                }
            },

            }
    }
    scf.merge( func );
    //PL - US map with states
    var func = {
        pl_svg_map: {
            pointer: function( el ) {

                var pointer = $(el).find('.count');

                pointer.hover(function(e) {
                    $("#info-box").css("display", "block");
                    $("#info-box").html($(this).data("info"));
                    $("#info-box .count").html($(this).data("count"));
                });
                
                pointer.mouseleave(function(e) {
                    $("#info-box").css("display", "none");
                });
                
                $(document).mousemove(function(e) {
                    $("#info-box").css("top", e.pageY - $("#info-box").height() - 35);
                    $("#info-box").css("left", e.pageX - ($("#info-box").width() / 2) - 300);
                }).mouseover();
                
                /*var ios = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
                if (ios) {
                    $("a").on("click touchend", function() {
                    var link = $(this).attr("href");
                    window.open(link, "_blank");
                    return false;
                    });
                }*/                  
                
            },
            show_on_map: function( el ) {

                var states = $(el).find('.state');
                
                states.each(function(){
                    var stcode = $(this).attr('data-state'),
                        count = $(this).attr('data-count');
                    
                    if(count != '0' ){
                        $('.map-wrapper .state-'+stcode).addClass('active');
                        $('.map-wrapper .state-'+stcode).attr('data-count', count);
                    }                    
                });

            }
        }
    }
    scf.merge( func );

    //Delete Archive Page
    var gv_clicked;
    var func = {
        delete_archive: {
            toggle: function( el, t ) {
                $(el).find('.more-btn').on( 'click', function() {

                    var $this = $(this);
                    gv_clicked=$this;
                    $('.more-btn-inner-wrapper').slideUp();

                    if( !$this.hasClass('active') ){
                        $this.addClass('active');
                        $this.siblings('.more-btn-inner-wrapper').slideDown();
                    } else {
                        $this.removeClass('active');    
                    }
                    
                } );

            },
            check_all: function( el, t ) {
                
                $(el).on( 'change', function() {
                    $('.archived-reports .checkbox input:checkbox').not(this).prop('checked', this.checked);
                    if($('.archived-reports td .checkbox input:checkbox:checked').length >= 1){
                        $('.archived-reports .delete-selected-btn').addClass('active');
                        $('.archived-reports td .checkbox input:checkbox:checked').parents('.search-history-tr').find('.delete-btn').addClass('active');
                    } else {
                        $('.archived-reports .delete-selected-btn').removeClass('active');
                        $('.delete-btn').removeClass('active');
                    }
                });

            },
            check: function( el, t ) {
                $(el).on( 'click', function() {
                    if($('.archived-reports td .checkbox input:checkbox:checked').length >= 1){
                        $('.archived-reports .delete-selected-btn').addClass('active');
                        $(this).parents('.search-history-tr').find('.delete-btn').addClass('active');
                    } else {
                        $('.archived-reports .delete-selected-btn').removeClass('active');
                        $(this).parents('.search-history-tr').find('.delete-btn').removeClass('active');
                    }

                    // Uncheck the header checkbox if any row checkbox is unchecked
                    const allChecked = $('.archived-reports td .checkbox input:checkbox').length === 
                    $('.archived-reports td .checkbox input:checkbox:checked').length;
                    $('.archived-reports .checkAll').prop('checked', allChecked);
                });
            },
            delete_selected: function( el, t ) {
                $(el).on( 'click', function() {                   
                    var count = $('.archived-reports td .checkbox input:checkbox:checked').length;                    
                    var delete_array = $(".archived-reports td .checkbox input:checkbox:checked").map(function() {
                        return $(this).data("id");
                    }).get();

                    if(count > 1){
                        t.modal.ref[ 'delete_multiple_report' ].find('#sh-mutlidelete-modal-btn').attr('data-ids',delete_array)
                        t.modal.ref[ 'delete_multiple_report' ].find('.count').text( count );
                        t.modal.show( 'delete_multiple_report' );
                    } else {
                        t.modal.ref[ 'delete_report' ].find('#sh-delete-modal-btn').attr('data-id',delete_array);
                        t.modal.show( 'delete_report' );
                    }

                });
            },
            update: function( el, t ) {                
                var $this = $(el),
                    $status = $this.attr('data-status'),
                    $btnViewReport = $this.parents('td').find('.btnViewReport'),
                    $report_id = $btnViewReport.data('person_id')?$btnViewReport.data('person_id'):$btnViewReport.data('id'),
                    $type = $this.attr('data-type');

                $this.on( "click", function() {                    
                    var $action = $this.attr('data-action'),
                        $date = $this.attr('data-date');              
                    var $id = $this.attr('data-id'),$sh_id=$this.attr('data-sh_id');
                    if($action == "deletemulti"){
                        $ids = $this.attr('data-ids');
                        t.http.ajax_request( "update_sh", "POST", {  "action": $action, "ids": $ids }, function() {
                            location.reload();
                        });
                    }
                    else{
                        t.http.ajax_request( "update_sh", "POST", { "status": $status, "id": $id, "sh_id": $sh_id, "report_id": $report_id, "type": $type, "date": $date, "action": $action }, function() {
                            location.reload();
                        });
                    }
                    
                } );
            },
            show_modal: function( el, t ) {
                $(el).on( 'click', function() {
                    var target = $(this).data('target');
                        t.modal.ref[ target ].data( 'current', $(this).data() );
                    if ( typeof t.modal.ref[ target ] !== 'undefined' ) {
                        var id = $(this).attr('data-id');
                        t.modal.show( target );
                        if($(this).data('action') == "adddelete"){
                                $("#sh-delete-modal-btn").attr('data-action',"adddelete");
                                $("#sh-delete-modal-btn").attr('data-date',$(this).data('date'));
                        }
                        $("#sh-delete-modal-btn").attr('data-sh_id',$(this).attr('data-sh_id'));
                        $("#sh-delete-modal-btn").attr('data-id',id);
                    }
                } );

            }
        }
    }
    scf.merge( func );

    /* cancel-funnel */
    var func = {
        cancel_funnel: {
            onclick_show: function( el, t ) {

                $(el).on( 'click', function() {

                    var plan = $(this).data('plan');
                    var user = $(this).data('user');
                   
                    var target = $(this).data('target');
                    if ( typeof t.modal.ref[ target ] !== 'undefined' ) {

                        if(target == 'cancel_benefits'){
                            $('.cancel_benefits .btn-default').attr('data-plan', plan);
                            $('.cancel_benefits .btn-default').attr('data-user', user);
                        }

                        if(target == 'account_benefits2'){
                            t.http.ajax_request( 'cancel_funnel_downgrade', 'post');
                        }

                        t.modal.ref[ target ].data( 'current', $(this).data() );
                        if ( ( typeof t.modal[ target ] == "object" ) && typeof t.modal[ target ]["pre_show"] == "function" ) t.modal[ target ]["pre_show"]( t.modal.ref[ target ], t );
                        t.modal.show( target );

                    }
                    
                    $('.cancel-funnel-chat').hide("slide", { direction: "right" });
                    $('.cancel-funnel-chat .steps').hide();
                 
                } );

                $.each( $(el).data(), function( key ) {
                    $(el).removeAttr('data-' + key );
                } );
            },
            proceed: function( el, t ) {

                $(el).on('click', function(){
                    
                    $(el).addClass("loading");

                    var plan = $(this).attr('data-plan');
                    var user = $(this).attr('data-user');

                    $.ajax({
                        url: path.relative_url + "ajax.html?cmd=cancel_funnel",
                        data: { cancel: plan, user: user },
                        method: "GET",
                        success: function(data) {

                            if (data) {

                                $( ".cancel-funnel-wrapper" ).html( data );

                                t.modal.close( 'cancel_benefits' );
                                
                                $('.cancel_alt_form').find('input[name="delete"]').val( plan );
                                $('.cancel-funnel-chat').addClass('step-1');
                                $('.cancel-funnel-chat #step-1').show();
                                $('.cancel-funnel-chat').show("slide", { direction: "right" });
                                $(el).removeClass("loading");

                                t.cancel_funnel.funnel_script();
                                //t.cancel_alt.form();
                                //t.cancel_alt.other();
                                $.each( $('.cancel-funnel-chat .want-this'), function( key ) {
                                    t.cancel_funnel.onclick_show($(this), scf);
                                } );
                                
                                //t.cancel_funnel.want_this();

                            }

                        }
                     });

                });

            },
            funnel_script: function( el, t ) {

                var agent = ($('.cancel-funnel-chat').attr('data-agent') == '1') ? true : false,
                    //agent = false, // for testing
                    pl = ($('.cancel-funnel-chat').attr('data-pl') == '1') ? true : false;
                
                /* close */
                $('.close-btn').on('click', function(){
                    $('.cancel-funnel-chat').hide("slide", { direction: "right" });
                    $('.cancel-funnel-chat .steps').hide();
                });

                /* back */
                $('.back-btn').on('click', function(){
                    $('#step-1 .radio input').prop('checked', false);
                    $('.cancel-funnel-chat #step-1 .cfc-footer').addClass('disabled');
                    $('.cancel-funnel-chat .steps:visible').fadeOut(function(){
                        $('.cancel-funnel-chat #step-1').show();
                    });
                });

                /* answers */
                var footer = $('.cancel-funnel-wrapper .cfc-footer.disabled');
                $('.cancel-funnel-wrapper').on('change', '#step-1 input', function(){
                    footer.removeClass('disabled');

                    if($(this).attr('data-value') == '5'){
                        $(this).parents('.cfc-content').find('.scf-form.other-option').show();
                    } else {
                        $(this).parents('.cfc-content').find('.scf-form.other-option').hide();
                    }
                });

                /* submit answer */
                $('.cancel-funnel-chat .submit-answer').on('click', function(){
                                        
                    var amswer = $(this).parents('.steps').find("input[name='cancel_purpose']:checked").attr('data-value');
                    $('.cancel-funnel-chat').removeClass('step-1');
                    var is_combo_plan = $("#combo_plan").val() == 1 ? true: false;
                    
                        if(amswer == 1){
                            if(agent){
                                $('.cancel-funnel-chat .steps:visible').fadeOut(function(){
                                    $('.cancel-funnel-chat #step-2').show();
                                });
                            }
                            if(!agent && pl){

                                $('.cancel-funnel-chat .steps:visible').fadeOut(function(){
                                   is_combo_plan ? $('.cancel-funnel-chat #step-3-1').show() : $('.cancel-funnel-chat #step-4').show();
                                });

                            }
                            if(!agent && !pl){
                                
                                $('.cancel-funnel-chat .steps:visible').fadeOut(function(){
                                    $('.cancel-funnel-chat #step-5').show();
                                });

                            }
                        }
                        if(amswer == 2){
                            if(agent){

                                $('.cancel-funnel-chat .steps:visible').fadeOut(function(){
                                    $('.cancel-funnel-chat #step-2').show();
                                });
                            }

                            if(!agent && pl){

                                $('.cancel-funnel-chat .steps:visible').fadeOut(function(){
                                    is_combo_plan ? $('.cancel-funnel-chat #step-3-1').show() : $('.cancel-funnel-chat #step-4').show();
                                });

                            }

                            if(!agent && !pl){

                                $('.cancel-funnel-chat .steps:visible').fadeOut(function(){
                                    $('.cancel-funnel-chat #step-5').show();
                                });

                            }
                        }
                        if(amswer == 3){

                            $('.cancel-funnel-chat .steps:visible').fadeOut(function(){
                                is_combo_plan ? $('.cancel-funnel-chat #step-3-1').show() : $('.cancel-funnel-chat #step-3').show();
                            });

                        }
                        if(amswer == 4){

                            $('.cancel-funnel-chat .steps:visible').fadeOut(function(){
                                $('.cancel-funnel-chat #step-3-1').show();
                            });

                        }
                        if(amswer == 5){
                            if(pl){

                                $('.cancel-funnel-chat .steps:visible').fadeOut(function(){
                                    is_combo_plan ? $('.cancel-funnel-chat #step-3-1').show() : $('.cancel-funnel-chat #step-4').show();
                                });

                            } else {

                                $('.cancel-funnel-chat .steps:visible').fadeOut(function(){
                                    $('.cancel-funnel-chat #step-5').show();
                                });

                            }
                        }                        
                    
                });

                /* open chat */
                $('.cancel-funnel-chat .open-chat-btn').on('click', function(){
                    $('.cancel-funnel-chat').hide("slide", { direction: "right" });
                    $('.cancel-funnel-chat .steps').hide();
                    window.fcWidget.open();
                    window.fcWidget.show();
                });

                /* cancel */
                $('.cancel-funnel-chat .cancel-btn').on('click', function(){
                    var is_combo_plan = $("#combo_plan").val() == 1 ? true: false;
                    if($(this).parents('.steps').attr('id') == 'step-3'){
                        $('.cancel-funnel-chat .steps:visible').fadeOut(function(){
                            $('.cancel-funnel-chat #step-5').show();
                        });
                    } else if($(this).parents('.steps').attr('id') == 'step-2'){

                        if( pl ){
                            $('.cancel-funnel-chat .steps:visible').fadeOut(function(){
                                is_combo_plan ? $('.cancel-funnel-chat #step-3-1').show() : $('.cancel-funnel-chat #step-4').show();
                            });
                        } else {
                            $('.cancel-funnel-chat .steps:visible').fadeOut(function(){
                                $('.cancel-funnel-chat #step-5').show();
                            });
                        }

                    } else {
                        $('.cancel-funnel-chat').fadeOut(function(){
                            $('.cancel-funnel-chat .steps').hide();
                            $( '.cancel_save[data-name="cancel_ultimate"]' ).show();
                        });
                    }
                    
                });

                /* want this */
                /*$('.cancel-funnel-chat .want-this').on('click', function(){
                    var target = $(this).data('target');
                    $('.cancel-funnel-chat').hide("slide", { direction: "right" });
                    $('.cancel-funnel-chat .steps').hide();
                    $('.'+target).show();
                });*/

                /* toggle */
                $('.cancel-funnel-chat .chat-toggle').find('h4').on('click', function(){
                    $(this).parent().toggleClass('active');
                });

                /* choose days */
                $('.cancel-funnel-chat .chat-toggle .choose_days').find('span').on('click', function(){
                    $(this).siblings().removeClass('active');
                    $(this).addClass('active');
                    $(this).find("input:radio").prop("checked", true);
                });

                /* cancel form */
                $('.pause_alt_form .pause-btn').on( "click", function() {

                    $('.cancel-funnel-chat').hide("slide", { direction: "right" });
                    $('.cancel-funnel-chat .steps').hide();
                    $('.account_pause').show();
                    return false;

                } );

            },
            cancel: function( el, t ) {
                $(el).on('click', function(){
                    $('.cancel-funnel-chat .cancel_alt_form').submit();
                });

            },
            /*account_pause: function( el, t ) {
                $(el).on('click', function(){
                    console.log($('.cancel-funnel-chat .pause_alt_form'));
                    $('.cancel-funnel-chat .pause_alt_form').submit();
                });

            },*/
            other_options: function( el, t ) {
                $(el).on('click', function(){
                    t.modal.close( 'cancel_ultimate' );
                    $('.cancel-funnel-chat #step-5').show();
                    $('.cancel-funnel-chat').show();
                });
            },
            /*want_this: function( el, t ) {
                $(el).on('click', function(){
                    t.modal.close( 'just_essentials' );
                    $('.cancel-funnel-chat #step-5').show();
                    $('.cancel-funnel-chat').show();
                });
            },*/
            account_pause: function( el, t ) {
                $(el).on('click', function(){
                    t.modal.close( 'account_pause' );
                    $('.pause_alt_form').addClass('submit_ready');
                    $('.pause_alt_form').submit();
                });
            },    
        }
    }
    scf.merge( func );

    var func = {
        unfraudit: {
            select_scam_type: function( el, t ) {
                $(el).find('.scam-type').on( 'click', function() {                    
                    var $this = $(this),
                        type = $this.attr('data-type');
                    
                    $this.addClass('active');
                    $this.siblings('.scam-type').removeClass('active');
                    $this.siblings('.bottom-section').removeClass('active');
                    $this.siblings('#'+type).addClass('active');
                    //$this.parent('form').attr('class', 'show-'+type);                   
                    
                });
            },
            read_more_toggle: function( el, t ) {
                $(el).on( 'click', function() {
                    $(this).toggleClass('active');
                    $(this).siblings('.more-text').slideToggle('slow');
                } );

            },
            browse_file: function( el, t ) {
                $(el).find('input').on( 'change', function() {
                    var file = $(this)[0].files[0];
                    if (file){
                        $(this).siblings('.file-custom').find('.file-name').text(file.name);
                    }
                } );
            },
            tooltip: function( el, t ) {
                $(el).hover(
                    function() {
                        $(this).parent().siblings('.tool-tip').fadeIn();
                    }, function() {
                        $(this).parent().siblings('.tool-tip').fadeOut();
                    }
                );
            },
            back_to_search: function( el, t ) {
                $(el).on( 'click', function() {
                    $('.border-box').removeClass('hiede-from-mobile');
                });
            },
            restart: function( el, t ) {
                $(el).on( 'click', function() {
                    location.reload();
                });
            },
            analyze: function( el, t ) {
                $(el).on( 'click', function() {
                    var scam_msg;
                    var isValid = true; // Flag to check if inputs are valid

                    var viewportWidth = $(window).width();
                    if (viewportWidth < 992) {
                        $(".dashboard-2020 .form-wrapper.mobile").addClass(" hiede-from-mobile");   
                    }
                    var scam_chat_type = $('.scam-type.active').data('type');

                    switch (scam_chat_type) {
                        case "message-scam":
                            scam_msg = $("#message-text").val();
                            scam_chat_type = "text";
                            var phone_number = $('#scam_chat_phone_number').val();
         
                            break;
                        case "email-scam":
                            scam_msg = $("#message-email").val();
                            scam_chat_type = "email";
                            var email = $('#scam_chat_email').val();
                            
                            break;
                        default:
                            scam_msg = $("#message-content").val();
                            var fileInput = $('#formFile')[0]; // Assuming 'formFile' is your file input's ID
                            if (!fileInput.files.length) {
                                // Handle the error, e.g., set error message near the file input
                                isValid = false;
                            }
                            scam_chat_type = "content";
                            break;
                    }

                    // Check if message is empty
                    if (!scam_msg.trim()) {
                        $("textarea.message").attr("placeholder", "Please enter a message.");
                        return;
                    } else {
                        isValid = true;
                    }

                    if (!isValid) {
                        return;
                    }

                    $(".dashboard-2020 .analyze-completed-block").hide();
                    $(".dashboard-2020 .intro-block").hide();
                    $(".dashboard-2020 .analizing-block").show();

                    $(".bottom-section.active .analyze-btn").attr("disabled", true);

                    if (isValid){
                        var post_data = { message: scam_msg };
            
                        post_data = Object.assign(post_data, {  type: scam_chat_type  });
            
                        switch (scam_chat_type) {
                            case "text":
                                var phone_number = $('#scam_chat_phone_number').val();
                                if (phone_number) {
                                    post_data = Object.assign(post_data, {  phone_number:  phone_number  });
                                }
                                
                                break;
                            
                            case "email":
                                var email = $('#scam_chat_email').val();
                                if (email) {
                                    post_data = Object.assign(post_data, {  email:  email  });
                                }
                                
                                break;
            
                        
                                
                            default:
                                content = true;
                                var formData = new FormData($('#uploadForm')[0]);

                                $.ajax({
                                  url: path.base_url + "ajax.html?cmd=ocr_loader",
                                  type: 'POST',
                                  data: formData,
                                  processData: false,
                                  contentType: false,
                                  success: function(data) {
                                    if(data.status){
                                    //   console.log(data);
                                    }
                                  }
                                });
                                break;
                        }
            
                        let hasRetried = false; // Flag to check if the retry has been done

                        function runAjaxCall() {


                            $.ajax({ 
                                url: path.base_url + "ajax.html?cmd=unfraudit_check",  
                                method:"POST", 
                                data:post_data, 
                                error: function() {
                                    if (!hasRetried) {
                                        // If the call has not been retried yet
                                        hasRetried = true; // Set the flag to true
                                        runAjaxCall(); // Retry the AJAX call
                                    } else {
                                        // Handle the case where the retry also fails
                                        // $('#scam_detect_loader').hide();
                                        // $('#scam_detect_error').show();
                                        // scam_chat_checker_btn.show();
                                    }
                                }, 
                                success:function(d){

                                if("status" in d && d.status ){
                                    $(".dashboard-2020 btn btn-dark-blue").attr("disabled", false);
                                    $(".dashboard-2020 .analizing-block").hide();
                                    $(".dashboard-2020 .analyze-completed-block").show();
    
                                    if("scam" in d.romance_scam && d.romance_scam.scam ){
                                        $(".dashboard-2020 .no-scam-detected").hide();
                                        $(".dashboard-2020 .scam-detected-info").show();
                                        $(".dashboard-2020 .scam-description").html(d.romance_scam.details);

                                        // $(this).show();
                                        // $('#scam_detected_status').html('<button type="button" class="btn btn-red"><h4>Scam Detected!</h4></button>');
                                        // $('#scam_detected_percentage').append('<button type="button" class="btn btn-red"><h4>'+d.romance_scam.possibility+'%</h4></button>');
                                        // $('#scam_detected_more_info').html(d.romance_scam.details);
                                        //
                                    } else {
                                        $(".dashboard-2020 .scam-description").html(d.romance_scam.details);

                                    }
                                
                                    // clear redflag messages 
                                    $(".dashboard-2020 .scam-red-flags").empty();
                
                                    if("red_flags" in d ){
                                        $(".dashboard-2020 .red-flag-title").show();

                                        let i = 0;                        
                                        $(".dashboard-2020 .scam-red-flags").html("<ul>");
                                        while (i < d.red_flags.length) {
                                            $(".dashboard-2020 .scam-red-flags ul").append($("<li>").text( d.red_flags[i]));
                                            i++;
                                        }

                                    }
                                    else{
                                        // $('#scam_detect_result .note.red').hide();
                                        $(".dashboard-2020 .red-flag-title").hide();

                                    }
                                    
                                    // scam_chat_checker_btn.show();
                                }
                                else{

                                    if (!hasRetried) {
                                        // If the call has not been retried yet
                                        hasRetried = true; // Set the flag to true
                                        runAjaxCall(); // Retry the AJAX call
                                    } else {
                                        // Handle the case where the retry also fails
                                        // $('#scam_detect_loader').hide();
                                        // $('#scam_detect_error').show();
                                        // scam_chat_checker_btn.show();
                                    }
                                    // $('#scam_detect_loader').hide();
                                    // $('#scam_detect_error').show();
                                    // scam_chat_checker_btn.show();
                                }
                                $(".bottom-section.active .analyze-btn").attr("disabled", false);

                            }});

                        }

                        runAjaxCall();
                        
                    }
                });
            },
        }
    }

    scf.merge( func );
    var func = {
        data_dashboard: {
            chart: null,
            chart_element: null,
            $filters: null,
            $elements: {},
            $big_numbers: {},
            main: function( el, t, o ) {

                $(el).extract_vars( o.$elements );

            },
            big_number_filter: function( el, t, o ) {

                var $this = $(el);
                o.$big_numbers = $this.parents(".report-over-view");
                var $this = $(el).on( 'change', function() {

                    o.update_big_numbers( el, t, o );

                } ).change();

            },
            update_dashboard_chart: function( el, t, o ) {

                o.$filters = $(el).on( 'change', function(){

                    t.data_dashboard.update_line_chart( el, t, o );

                } );

            },
            big_number_dom_update: function( $el, main, change, days ) {

                var class_name = ( change < 0 ) ? 'si-downward' : 'si-upward';

                $el.text( main ).next().empty().append( "<span class='" + class_name + "'></span><b>" + Math.abs( change ) + "%</b> previous " + days + " days" );

            },
            update_big_numbers: function( el, t, o ) {

                o.$big_numbers.loading( true );
                t.http.ajax_request( "data-dashboard-bignumbers", "post", { 'value': el.value }, function( response ) {

                    var
                        $e = o.$elements,
                        d = response.data;

                    o.big_number_dom_update( $e.bn_ar_v, d.avg_revenue, d.p_avg_revenue, d.days );
                    o.big_number_dom_update( $e.bn_as_v, d.avg_subscriptions, d.p_avg_subscriptions, d.days );
                    o.big_number_dom_update( $e.bn_acr_v, d.avg_conversion_rate, d.p_avg_conversion_rate, d.days );
                    o.big_number_dom_update( $e.bn_ach_v, d.avg_churn_rate, d.p_avg_churn_rate, d.days );
                    o.big_number_dom_update( $e.bn_nps_v, d.nps, d.p_nps, d.days );
                    o.$big_numbers.loading();

                } );

            },
            update_line_chart: function( el, t, o ) {

                o.$elements.chart_wrapper.loading( true );
                var send_data = {
                    "c": o.$elements.chart.val(),
                    "fd": o.$elements.from_date.val(),
                    "d": o.$elements.to_date.val(),
                    "t": o.$elements.period.val()
                }

                t.http.ajax_request( "data-dashboard-chart", "post", JSON.stringify( send_data ), function( response ) { 

                    if ( response.status ) {

                        var
                            labels = response.data.date,
                            chart_data = {},
                            data = [];

                        $( scf.v['data_dashboard.sql'] ).val( response.data.sql );
                        $.each( response.data.data, function( k, v ) {

                            data.push(v);

                        });

                        chart_data = {
                            labels: labels,
                            datasets: data
                        };

                        if ( o.chart == null ) {

                            o.chart = new Chart( t.chart_element, {
                                type: "line",
                                data: chart_data,
                                options: {
                                    scales: {
                                        xAxes: [{
                                            reverse: true,
                                            gridLines: {
                                                color: "rgba(0,0,0,0.05)"
                                            }
                                        }],
                                        yAxes: [{
                                            gridLines: {
                                                color: "rgba(0,0,0,0)"
                                            }
                                        }]
                                    }
                                }
                            } );

                        } else {

                            o.chart.data = chart_data;
                            o.chart.update();

                        }

                    }

                    o.$elements.chart_wrapper.loading();

                } );

            },
            line_chart: function( el, t, o ) {

                t.chart_element = el;
                o.$filters.change();

            },
            add_report: function( el, t, o ) {

                $(el).on( "click", function() {

                    var
                        target = $(this).data("target");

                    t.modal[ target ].$refresh = null;
                    t.modal[ target ].load_report( 0 );

                } );

            },
            edit_report: function( el, t, o ) {

                $(el).on( "click", function() {

                    var
                        $this = $(this),
                        id = $this.data("id"),
                        target = $this.data("target");

                    t.modal[ target ].$refresh = $(this);
                    t.modal[ target ].load_report( id );

                } );

            }
        }
    }
    scf.merge( func );
    //Data Validation
    var func = {
        data_validation:{
        init: function(element,t){

            $('#data-table').on("click",'.showhide', function(){
                
                $(this).closest('tr').next('tr').toggle();
                $(this).removeClass('si-triangle-down si-triangle-up')
                if( $(this).closest('tr').next('tr').is(":visible")){
                    $(this).addClass('si-triangle-up')
                }else{
                    $(this).addClass('si-triangle-down')
                }
            });

            $('#new-main-record').click( function(e){

                $('#edit-id').val('');
                $('#edit-name').val('');
                $('#edit-gender').val('');
                $('#edit-dob').val('');
                $('#form-action').val('insert-main');
                $('#form-title').text('New Record');
                $('#form-submit').text('Insert');
                e.preventDefault();
                t.modal.show('data_validation_form_popup');
            });
            $('#data-table').on("click",'.header-edit', function(e){

                $('#edit-id').val($(this).closest('td').data('id'));
                $('#edit-name').val($(this).closest('tr').find('.name').text().trim());
                $('#edit-gender').val($(this).closest('tr').find('.gender').text().trim());
                $('#edit-dob').val($(this).closest('tr').find('.date_of_birth').text().trim());
                $('#form-action').val('update-main');
                $('#form-title').text('Edit Record');
                $('#form-submit').text('Update');
                e.preventDefault();
                t.modal.show('data_validation_form_popup');
            });

            $('#form-submit').click( function(e){
                e.preventDefault();
                t.http.request( '/dashboard.html?section=data_validation', 'post', $('#data_validation_form').serializeArray(),'json', function(d) {
                    t.modal.close('data_validation_form_popup');
                    if($('#form-action').val()=='update-main')
                    {
                    var obj = JSON.parse(d);
                    $('#tr-'+$('#edit-id').val()).find('.name').text($('#edit-name').val());
                    $('#tr-'+$('#edit-id').val()).find('.gender').text($('#edit-gender').val());
                    $('#tr-'+$('#edit-id').val()).find('.date_of_birth').text($('#edit-dob').val());
                    $('#tr-'+$('#edit-id').val()).find('.updated_date').text(obj.last_update);
                    $('#tr-'+$('#edit-id').val()).animate({backgroundColor: '#00ff1426'}, 'slow').animate({backgroundColor: '#ffffff'}, 'slow');
                    }else{
                        window.location.href='/dashboard.html?section=data_validation';
                    }
                 });
            });
            $('#data-table').on("click",'.new-line-record', function(e){

                $('#edit-line-id').val('');
                $('#edit-line-header-id').val($(this).data('header-id'));
                $('#edit-type').val('');
                $('#edit-value').val('');
                $('#form-line-action').val('insert-line');
                $('#form-title-line').text('New Data Record');
                $('#form-line-submit').text('Insert');
                e.preventDefault();
                t.modal.show('data_validation_form_line_popup');
            }); 
            $('#data-table').on("click",'.line-edit', function(e){

                $('#edit-line-id').val($(this).closest('td').data('line-id'));
                $('#edit-line-header-id').val($(this).closest('td').data('header-id'));
                $('#edit-type').val($(this).closest('tr').find('.data_pointer_type').text().trim());
                $('#edit-value').val($(this).closest('tr').find('.value').text().trim());
                $('#form-action').val('update-line');
                $('#form-title-line').text('Edit Data Record');
                $('#form-line-submit').text('Update');
                e.preventDefault();
                t.modal.show('data_validation_form_line_popup');
            }); 
            $('#form-line-submit').click( function(e){
                e.preventDefault();
                t.http.request( '/dashboard.html?section=data_validation', 'post', $('#data_validation_line_form').serializeArray(),'json', function(d) {
                    t.modal.close('data_validation_form_line_popup');
                    var obj = JSON.parse(d);
                    if($('#form-action').val()=='update-line')
                    {
                    $('#trl-'+$('#edit-line-id').val()).find('.data_pointer_type').text($('#edit-type').val());
                    $('#trl-'+$('#edit-line-id').val()).find('.value').text($('#edit-value').val());
                    $('#trl-'+$('#edit-line-id').val()).find('.last_update').text(obj.last_update);
                    $('#trl-'+$('#edit-line-id').val()).animate({backgroundColor: '#00ff1426'}, 'slow').animate({backgroundColor: '#ffffff'}, 'slow');
                }else{
                    window.location.reload();
                }
                 });
            });  
            $('#data-table').on("click",'.header-delete', function(e){
                e.preventDefault();
                var tr= $(this).closest('tr');
                if (confirm("Do you want to delete a record ?") == true) {
                    
                    t.http.request( '/dashboard.html?section=data_validation', 'post', {'action':'delete-main','id':$(this).closest('td').data('id')},'json', function(d) {
                        tr.hide('slow').next('tr').hide();
                     });
                  } 
            });
            $('#data-table').on("click",'.line-delete', function(e){
                e.preventDefault();
                var tr= $(this).closest('tr');
                if (confirm("Do you want to delete a record ?") == true) {
                    
                    t.http.request( '/dashboard.html?section=data_validation', 'post', {'action':'delete-line','id':$(this).closest('td').data('line-id')},'json', function(d) {
                        tr.hide('slow');
                     });
                  } 
            });         

            $('.toggle_tab').on( "click",'li', function() {

                $('.toggle_tab').find('li').removeClass('active');
                $(this).addClass('active');
                $('.data-divs').hide();
                $('#tab-'+$(this).data('target')).show();
if($(this).data('target')=='had'){
    window.location='/dashboard.html?section=data_validation';
}
                });
                $('#form-compare-submit').click( function(e){
                    e.preventDefault();
                    $('#compare-table-div').html('');
                    var table = $('<table>').addClass('scf-table').attr('id', 'compare-table');
                    var row1 = $('<tr></tr>');
                    var row2 = $('<tr></tr>');
                    
                    if($('.api-check:checked').length==0){
                    alert('please select atleaset one API');
                    }else{
                    $('.api-check:checked').each(function() {
                       
                        var api=this.value;
                        var data_array=$('#form-compare').serializeArray();;
                        data_array.push({ name: "selected-api", value: api });

                        var rowData = $('<th></th>').text( api);
                        var rowData2 = $('<td></td>').text('loading... ').attr('id', 'compare-td-'+api);
                        row1.append(rowData);
                        row2.append(rowData2);
                        var myvar='';
                    $.ajax({
                        url: '/dashboard.html?section=data_validation',
                        data:data_array,
                        method: "POST",
                        async: true,
                        success: function(data) {

                            var obj = JSON.parse(data);
                             myvar += '<section class="accordion">';
                            $.each( obj.data.data, function( key, value ) {
                              //Accodian
                              var myTab='';
                              myTab +='  <div class="tab">'+
                            '    <input type="checkbox" id="cb1'+api+key+'">'+
                            '    <label for="cb1'+api+key+'" class="tab__label">'+value.name+'</label>'+
                            '    <div class="tab__content">';

                            myTab += '<table class="obj-table" >'+
                             '<tr>'+
                             '<td></td>'+
                             '<td><a title="See full data object" class="see-full" dataobj=\''+(JSON.stringify(value))+'\' ><i class="si-search"></i> </a>'+
                             '&nbsp;&nbsp;<a title="Save this record to test data" class="add-record" data-name="'+value.name+'" ><i class="si-save"></i> </a></td>'+
                             '</tr>'+
                            '<tr>'+
                            '<td>Age</td><td data-name="age">'+value.age+'</td>'+
                            '</tr>'+
                            '<tr>'+
                            '<td>Gender</td><td data-name="gender" >'+value.gender+'</td>'+
                            '</tr>'+
                            '<tr>'+
                            '<td>Names</td><td data-name="name" >'+(Array.isArray(value.names)?value.names.join(', '):( typeof value.names === 'object'?Object.values(value.names).join(', '):''))+'</td>'+
                            '</tr>'+
                            '<tr>'+
                            '<td>Locations</td><td data-name="location" >'+(Array.isArray(value.locations)?value.locations.join(',<br> '):(typeof value.locations === 'object'?Object.values(value.locations).join(',<br> '):''))+'</td>'+
                            '</tr>'+
                            '<tr>'+
                            '<td>Phones</td><td data-name="phone" >'+(Array.isArray(value.phones)?value.phones.join(', '):(typeof value.phones === 'object'?Object.values(value.phones).join(', '):''))+'</td>'+
                            '</tr>'+
                            '<tr>'+
                            '<td>Usernames</td><td data-name="username" >'+(Array.isArray(value.usernames)?value.usernames.join(', '):(typeof value.usernames === 'object'?Object.values(value.usernames).join(', '):''))+'</td>'+
                            '</tr>'+
                            '<tr>'+
                            '<td>Emails</td><td data-name="email" >'+(Array.isArray(value.emails)?value.emails.join(', '):(typeof value.usernames === 'object'?Object.values(value.emails).join(', '):''))+'</td>'+
                            '</tr>'+
                            '</table>';
                                
                            myTab +='    </div>'+
                            '  </div>';
   
                            myvar +=myTab;
                              //End Accodian 
                              });
                              myvar +='</section>';

                            
                                
                            $('#compare-td-'+api).html(myvar);

                        }
                     });
                    });
                }

                    var thead= $('<thead></thead>').append(row1);
                    table.append(thead).append(row2);
                    $('#compare-table-div').append(table);

                });  

                $('#compare-table-div').on('click','.see-full', function(e){
                    
                                        e.preventDefault();
                                        t.modal.show('data_validation_object_view');
                                        $('#json_text').val('').val($(this).attr('dataobj'))
                                    });
                $('#compare-table-div').on('click','.add-record', function(e){

                    e.preventDefault();
                    var el=$(this);
                    if (confirm("Do you need to add this data to Data Validation tables")) {
                        //var data=[{name:'action',value:'insert-from-api'},{name:'Name',value:el.data('name')},{name:'dataset',value:[]}];
                        var data={'action':'insert-from-api','name':el.data('name')};
                        var obj = {}
                        el.parents('tbody').find('tr').each(function( index ) {
                           
                            if(index>0){
                                if($( this ).find("td:eq(1)").data('name')=='age'){
                                    data['age']=$( this ).find("td:eq(1)").text();
                                }else if($( this ).find("td:eq(1)").data('name')=='gender'){
                                    data['gender']=$( this ).find("td:eq(1)").text();
                                }else{
                                obj[$( this ).find("td:eq(1)").data('name')]=$( this ).find("td:eq(1)").html(); 
                             // data.push({name:$( this ).find("td:eq(0)").text().trim(),value: $( this ).find("td:eq(1)").html()});  
                                }
                            }
                           
                          });
                          data['dataset']=obj;
                          t.http.request( '/dashboard.html?section=data_validation', 'post', data,'json', function(d) {
                            var obj = JSON.parse(d);
                           if(obj.status){alert('success!')}
                         });
                      } else {
                        txt = "You pressed Cancel!";
                      }
                });                    
               
        },

         
    },
    };
    scf.merge( func );
    //BTT UI
    var func = {
        btt: {
            filter_dropdown: function( el, t ) {
                $(el).find('.chart-filter-item').on('click', function(){
                    if($(this).parent().hasClass('show-list')){
                        $(this).siblings().removeClass('active');
                        $(this).addClass('active');
                        $(this).parent().removeClass('show-list');
                        if($(this).html() == "By Browser Type") {
                            $('.filter-items .filter-item.device').addClass('deactivate');
                            $('.filter-items .filter-item.device').removeClass('act');

                            $('.filter-items .filter-item.browser').removeClass('deactivate');
                            $('.filter-items .filter-item.browser').addClass('act');
                        }else if($(this).html() == "By Device Type") {
                            $('.filter-items .filter-item.browser').addClass('deactivate');
                            $('.filter-items .filter-item.browser').removeClass('act');

                            $('.filter-items .filter-item.device').removeClass('deactivate');
                            $('.filter-items .filter-item.device').addClass('act');
                        }else {
                            $('.filter-items .filter-item.browser').addClass('deactivate');
                            $('.filter-items .filter-item.browser').removeClass('act');
                            $('.filter-items .filter-item.device').addClass('deactivate');
                            $('.filter-items .filter-item.device').removeClass('act');
                        }
                        t.btt.update_line_chart();
                    } else {
                        $(this).parent().addClass('show-list');
                    }
                    
                });
            },
            filter_checkbox: function( el, t ) {
                $(el).on('click', function(){
                    $(this).toggleClass('act');
                    t.btt.update_line_chart();
                });                
            },
            line_chart: function( el, t ) {
                var send_data = {
                    "type": "btt-chart",
                    "data": {
                        "email": $('#useremail').val(),
                        "all_user": true,
                        "fddt": $('#from_ddt').val(),
                        "tddt": $("#to_ddt").val()
                    }
                }
                var htmlobj = $.ajax({
                        type: 'POST',
                        url: tr_burl,
                        data: JSON.stringify(send_data),
                        dataType: "json", 
                        async: false
                });
                result = jQuery.parseJSON( htmlobj.responseText );
                var fr_date = result.data.fr_date;
                var to_date = result.data.to_date;
                var labels = result.data.date;
                var data = [];
                jQuery.each(result.data.data, function(k, v){
                    data.push(v);
                });

                var chartElement = $("#chartjs-line");
                var existingChart = chartElement.data('chart');
                var newChart = new Chart($("#chartjs-line"), {
                    type: "line",
                    data: { labels: labels, datasets: data },
                    options: {
                        plugins: {
                            legend: {
                                display: false
                            },
                            title: {
                              display: true,
                              text: 'Time Duration - '+fr_date+' to '+to_date,
                              position: 'bottom',
                            }
                          },
                        
                        scales: {
                            xAxes: [{
                                //reverse: true,
                                gridLines: {
                                color: "rgba(0,0,0,0.05)"
                                }
                            }],
                            yAxes: [{
                                gridLines: {
                                    color: "rgba(0,0,0,0)"
                                }
                            }]
                        }
                    }
                });
                chartElement.data('chart', newChart);               
            },
            update_line_chart: function( el , t){
                var data_browser = [];
                $(".filter-items .filter-item.browser").each(function(){
                    if( $(this).hasClass('act') ) data_browser.push( $(this).data('type') );
                });
                var data_device = [];
                $(".filter-items .filter-item.device").each(function(){
                    if( $(this).hasClass('act') ) data_device.push( $(this).data('type') );
                });

                var send_data = {
                    "type": "btt-chart",
                    "data": {
                        "email": ( $(".filter-items .filter-item.user-email").hasClass('act') ) ? $('#useremail').val() : "",
                        "data_browser": data_browser,
                        "data_device": data_device,
                        "fddt": $('#from_ddt').val(),
                        "tddt": $("#to_ddt").val()
                    }
                }
                var htmlobj = $.ajax({
                        type: 'POST',
                        url: tr_burl,
                        data: JSON.stringify(send_data),
                        dataType: "json", 
                        async: false
                });

                result = jQuery.parseJSON( htmlobj.responseText );
                var fr_date = result.data.fr_date;
                var to_date = result.data.to_date;
                var labels = result.data.date;
                var data = [];
                jQuery.each(result.data.data, function(k, v){
                    data.push(v);
                });


                var chartElement = $("#chartjs-line");
                var existingChart = chartElement.data('chart');
                // Check if the chart already exists
                if (existingChart) {
                    existingChart.data = {
                                labels: labels,
                                datasets: data                                
                        };
                        existingChart.options = {
                            plugins: {
                                legend: {
                                    display: false
                                },
                                title: {
                                  display: true,
                                  text: 'Time Duration - '+fr_date+' to '+to_date,
                                  position: 'bottom',
                                }
                              },
                            
                            scales: {
                                xAxes: [{
                                    //reverse: true,
                                    gridLines: {
                                    color: "rgba(0,0,0,0.05)"
                                    }
                                }],
                                yAxes: [{
                                    gridLines: {
                                        color: "rgba(0,0,0,0)"
                                    }
                                }]
                            }
                        }
                    existingChart.update();

                }else{
                    alert("Error on Line Chart")
                }
                return;


                t.btt.line_chart.Chart.data = {
                    labels: labels,
                    datasets: data
                };
                t.btt.line_chart.Chart.update();
            }
            
        }
    }
    scf.merge( func );


    /* CSI-9420 - Dashboard updates */
    var func = {
        dashboard: {
            notifications: function( el ) {
                $( el ).on('click', function(){
                    $('.scf-nitification-popup').toggle();
                });
            },
            more_options: function( el ) {
                $( el ).on('click', function(){
                    if($(this).hasClass('active-options')){
                        $(this).removeClass('active-options');
                        $(this).siblings('.more-options').fadeOut();
                    } else {
                        $('.more-option-wrapper .more-icon').removeClass('active-options');
                        $('.more-option-wrapper .more-options').hide();
                        $(this).addClass('active-options');
                        $(this).siblings('.more-options').fadeIn();
                    }
                });
            },
            toggle_search_types: function( el ) {
                $( el ).on('click', function(){
                    $('.search-with-scf').removeClass('active');
                    $('.dashboard-revamp .search-form-2020 .list').removeClass('active');
                    $('.search-type-wrapper .search-type').removeClass('active');

                    $(this).parent('.search-type-wrapper').toggleClass('show-more');
                });
            },
            tokens_popup: function( el ) {
                $( el ).on('click', function(){
                    if($(this).hasClass('close')){
                        $(this).parents('.search-tokens-section').find('.token-count-popup').hide();
                    } else {
                        $(this).parents('.search-tokens-section').find('.token-count-popup').show();
                    }                    
                });
            },
            show_search_form: function( el ) {
                $( el ).find('.search-type').on('click', function(){
                    if(!$(this).hasClass('disabled') && !$(this).hasClass('more-btn')){
                        $('.search-with-scf').addClass('active');

                        if($(this).hasClass('active')){
                            $(this).removeClass('active');
                            $('.dashboard-revamp .search-with-scf').removeClass('active');
                            $('.dashboard-revamp .search-form-2020 .list').removeClass('active');
                        } else {
                            var type = $(this).attr('data-class');
                            $('.search-type-wrapper .search-type').removeClass('active');
                            $('.dashboard-revamp .search-form-2020 .list').removeClass('active');
                            $(this).addClass('active');
                            $('.dashboard-revamp .search-form-2020 .list.'+type).addClass('active');
                        }
                    }
                });
            },
            checkbox_inline_save: function( el,t ) {
                var user_id=$(el).data('user_id');
                $('.checkbox_inline').on('change', function(){
                    if (confirm("Do you need to save this change?")) {
                        t.http.ajax_request( 'save_user_flags', 'post', {'user_id':user_id,'value':($(this).prop("checked")?1:0),'name':$(this).attr('name')}, function( response ) {
                        
                        });
                      } else {
                        $(this).prop("checked", !$(this).prop("checked"));
                      }
                    });
                },        
            gamification_rotator: function( el,t ) {
                /*$( el ).on('init', function(event, slick, currentSlide) {
                    var index = parseInt($( el ).data('goto'));
                    $( el ).slick('slickGoTo', index)
                });*/

                var index = parseInt($( el ).data('goto'));
                if(index==13){index--}
                $( el ).slick({
                    infinite: true,
                    slidesToShow: 3,
                    slidesToScroll: 1,
                    speed: 500,
                    autoplaySpeed: 5000,
                    autoplay: false,
                    centerMode: true,
                    swipe: false,
                    arrows: true,
                    prevArrow:'<div class="slick-prev si-left '+(index<=0 ?'disable':'')+'"></div>',
                    nextArrow:'<div class="slick-next si-right '+(index==12?'disable':'')+'"></div>',
                    dots: true,
                    customPaging: function(slick,index) {
                        return '<span class="si-dot"></span>';
                    },
                    centerPadding: "0",
                    responsive: [
                        {
                            breakpoint: 1025,
                            settings: {
                                centerPadding: "100px",
                                slidesToShow: 1,
                            },
                        },
                        {
                            breakpoint: 992,
                            settings: {
                                centerPadding: "0",
                                slidesToShow: 3,
                                slidesToScroll: 1,
                            },
                        },
                        {
                            breakpoint: 650,
                            settings: {
                                centerPadding: "50px",
                                slidesToShow: 1,
                            },
                        }
                    ]
                });

                
                    $( el ).slick('slickGoTo', index)

                $( el ).on('beforeChange', function(event, slick, currentSlide, nextSlide){
                   
                    setTimeout(function(){
                        if($('.dashboard-revamp .gamification-section .slick-dots li').last().hasClass('slick-active')){
                            $('.dashboard-revamp .gamification-section .slick-arrow.slick-next').addClass('disable');
                        } else {
                            $('.dashboard-revamp .gamification-section .slick-arrow.slick-next').removeClass('disable');
                        }
    
                        if($('.dashboard-revamp .gamification-section .slick-dots li').first().hasClass('slick-active')){
                            $('.dashboard-revamp .gamification-section .slick-arrow.slick-prev').addClass('disable');
                        } else {
                            $('.dashboard-revamp .gamification-section .slick-arrow.slick-prev').removeClass('disable');
                        }
                    },100);
                    
                });

                $('.task').on("click", function(e){ 
                    e.preventDefault();
                    if($(this).hasClass('slick-current') &&  !$(this).hasClass('completed')){
                        //if($(this).parents('.task').hasClass('slick-current') && $(this).attr('title')=='Try Now'){
                        var link=$(this).data('link');
                    t.http.ajax_request( "gamification_v2_start_challange", "POST", { "task": $(this).data('task') }, function(r) {
                        if(r.link){
                            link=r.link;  
                        }
                        window.location.href=link;
                    });
                }
                });
            },
            infobox: function( el,t ) {
                $( el ).on('mouseover mouseout', function(){
                    $(this).parent().siblings('.info-box').fadeToggle();
                });
            },
        }
    }
    scf.merge( func );
    
    var func = {
        add_notes: {
            init: function( el, t, o ) {
                var tempText = $(el).find('.report-note-textarea').val();
                $(el).find('.si-close-circle').on("click", function(){
                    $(this).parent('.scf-popup-dialog').removeClass('active');
                    $(el).find('.report-note-textarea').val(tempText);
    
                    setTimeout(function(){
                        t.modal.close( 'report-note' );
                    },200);
                });     
                $(el).find('.btn').on("click", function(){
                    $(this).text("Saving");
                    $(this).prop("disabled",true);
                    var note_text = $(this).siblings('.report-note-textarea').val();
                    var report_id = $(this).data('reportid');
                    t.http.ajax_request( 'report_add_note', 'post', { note: note_text, report: report_id }, function( response ) {
                        if(response.status){
                            tempText = $(el).find('.report-note-textarea').val();
                            $(el).find('.btn').prop("disabled",false);
                            $(el).find('.btn').text("Save Notes");
                            t.modal.close( 'report-note' );                            
                            if(response.removed){
                                $(".note_added_btn").hide();
                                $(".add_note_btn").show();
                            }
                            else{
                                $(".note_added_btn").show();
                                $(".add_note_btn").hide();
                            }
                           
                        }
                    });
                });
            },
            onclick_show: function( el, t ) {
                $(el).on("click", function(){
                    $(el).parents('.add-note-intro').hide();
                    
                    var target = $(this).data('target');
                    if ( typeof t.modal.ref[ target ] !== 'undefined' ) {

                        t.modal.ref[ target ].data( 'current', $(this).data() );
                        if ( ( typeof t.modal[ target ] == "object" ) && typeof t.modal[ target ]["pre_show"] == "function" ) t.modal[ target ]["pre_show"]( t.modal.ref[ target ], t );
                        t.modal.show( target );
                        setTimeout(function(){
                            $('.'+target+' .scf-popup-dialog').addClass('active');
                        },200);
                        
                    }

                });
            },
            limit_note: function( el, t ) {
                var max = 501;
                $(el).on('input',function(e) {
                    if (this.value.length == max) {
                        e.preventDefault();
                    } else if (this.value.length >= max) {
                        this.value = this.value.substring(0, max);
                    } else {
                        $(el).siblings('.text-limit').find('.length').text(  $(this).val().length );
                    }
                });
            }
        }
    }
    scf.merge( func );

    var func = {
        search_specialist: {
            send_report: function(element,t){
               

                $('#send-report-form').submit(function (el) {

                    $('#send-report-email-validation').hide()
                    el.preventDefault();
                    if($('#send-report-email').val()==''){
                        $('#send-report-email-validation').text('Email cannot be blank.').show()
                        return false;
                    }else if($('#send-report-email').val().length>100){
                        $('#send-report-email-validation').text('Email is too long.').show()
                        return false;
                    }else if(!(/^(?!.*[-.]{2})(?!^[^@]+@[-.])(?!.*[-_.]$)[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/).test($('#send-report-email').val())){
                        $('#send-report-email-validation').text('Invalid email format.').show()
                        return false;
                    }
                    var btnTxt=$('#send-report-form-submit').val();
                    $('#send-report-form-submit').val('Sending..');
                    t.http.ajax_request('send_sample_report_submit', 'post', $('#send-report-form').serializeArray(), function (response) {
                        if (response.status) {
                            $('#send-report-form').hide();
                            $('#send-report-form-submit').val('Sent').delay().val(btnTxt);
                            $('#send-report-response-div').show()
                            if($('#send-report-email').val()!='sample@scf.com'){
                                $('#send-report-email').val('');
                            }
                            
                            setTimeout(function(){
                                $('#send-report-response-div').hide();
                                $('#send-report-form').show('slow');
                            },3000);

                        }
                    });
                });
            },
            sticky_nav: function( el, t ) {
                $(window).on('scroll', function () {
                    var scroll = $(window).scrollTop();

                    if(scroll > 100){
                        $(el).addClass('fixed');
                    } else {
                        $(el).removeClass('fixed');
                    }

                    
                });
            },
            sticky_nav_arrow: function( el, t ) {
                $(".arrow").click(function() {
                    var box = $(".sticky-nav-wrapper ul"),
                    x;
                    if ($(this).hasClass("si-right")) {
                        x = ((box.width() / 2)) + box.scrollLeft();
                        box.animate({
                            scrollLeft: x,
                        });
                    } else {
                        x = ((box.width() / 2)) - box.scrollLeft();
                        box.animate({
                            scrollLeft: -x,
                        });
                    }
                    
                    setTimeout(function(){
                        if(box.scrollLeft() == 0){
                            $(".si-left").addClass('disabled');
                            $(".si-right").removeClass('disabled');
                        } else if(box.scrollLeft() > 0){
                            $(".si-left").removeClass('disabled');
                            if((box[0].scrollWidth - box[0].offsetWidth) - box.scrollLeft() <= 3){
                                $(".si-right").addClass('disabled');
                            } else {
                                $(".si-right").removeClass('disabled');
                            }
                        } 
                    },400);
                    
                });
            },
            scrull_to_el: function( el, t ) {
                $(el).on('click', function () {
                    
                    if($(el).data('section')=='white-label'){
                        
                         if ($('#white-lable-mob-tab').is(':visible')) {
                            $('#white-lable-mob-tab').click()
                            }else{
                            $('#option5').click()
                         }
                     }
                    var id = $(this).attr('data-id');
                    var top = (id == 'form') ? $('#'+id).offset().top - 140 : $('#'+id).offset().top;
                     
                     if ($(window).width() < 768) { // mobile threshold
                        if ($("#tabs").length) {
                            // First scroll to the element
                            document.getElementById("tabs").scrollIntoView({ behavior: 'smooth' });
                            
                            // Then give images time to load by adding a second scroll with slight delay
                            setTimeout(function() {
                                // Second scroll to handle any lazy-loaded images
                                document.getElementById("tabs").scrollIntoView({ behavior: 'smooth' });
                            }, 500); // 1 second delay to allow images to start loading
                        }
                    } else {
                        $([document.documentElement, document.body]).animate({
                            scrollTop: top
                        }, 2000);
                    }
                });
            },
            inquiry_submit: function( el, t ) {
              
                $(el).submit(function (e) {

                    e.preventDefault();
                    $('#full-name-validation-msg').hide();
                    $('#message-validation-msg').hide();
                    $('#email-validation-msg').hide();
                    var formerrors=false;
                    if($('#full-name-input').val()==''){
                        formerrors=true;
                        $('#full-name-validation-msg').text('Full Name cannot be blank.').show();
                    }
                    if(!(/^[a-zA-Z]+ [a-zA-Z]+$/).test($('#full-name-input').val())){
                        formerrors=true;
                        $('#full-name-validation-msg').text('Full Name should contain first name and last name.').show();
                    }
                    if($('#message-input').val()==''){
                        formerrors=true;
                        $('#message-validation-msg').text('Please enter your message.').show();
                    }
                    if($('#email-input').val()==''){
                        formerrors=true;
                        $('#email-validation-msg').text('Email cannot be blank.').show();
                    }else if($('#email-input').val().length>100){
                        formerrors=true;
                        $('#email-validation-msg').text('Email is too long.').show();
                    }else if(!(/^(?!.*[-.]{2})(?!^[^@]+@[-.])(?!.*[-_.]$)[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/).test($('#email-input').val())){
                        formerrors=true;
                        $('#email-validation-msg').text('Invalid email format.').show();
                    }
                    if(formerrors){
                    return false;
                    }

                    $('#ss_inquiry_submit').val('Sending..')
                    t.http.ajax_request('search_specialist_inquiry_submit', 'post', $(el).serializeArray(), function (response) {
                        $('#full-name-validation-msg').text('').hide();
                        $('#email-validation-msg').text('').hide();
                        $('#message-validation-msg').text('').hide();
                        if (response.status) {
                            $('#ss_inquiry_submit').val('Sent').delay().val('Submit');
                            $(el)[0].reset();

                        }
                    });
                });

            },
            slick: function( el, t ) {
                $(el).slick({
                    dots: false,
                    infinite: true,
                    speed: 300,
                    slidesToShow: 3,
                    slidesToScroll: 1,
                    autoplay: true,
                    autoplaySpeed: 3000,
                    prevArrow: $('.prev-arrow'),
                    nextArrow: $('.next-arrow'),
                    responsive: [
                      {
                        breakpoint: 1024,
                        settings: {
                          slidesToShow: 2,
                        }
                      },
                      {
                        breakpoint: 768,
                        settings: {
                          slidesToShow: 1,
                          dots: true,
                          arrows: false,
                          centerMode: true,
                          centerPadding: '34px',
                          adaptiveHeight: true
                        }
                      }
                    ]
                });
            },
            mobile_tabs: function( el, t ) {
                $(el).find('.tab-item').on('click', function(){
                    var id = $(this).attr('data-id');

                    $(el).find('.tab-item').removeClass('active');
                    $(this).addClass('active');
                    $(el).siblings('.tabordion').find('section').hide();
                    $(el).siblings('.tabordion').find('.'+id).fadeIn();
                });
            }
        }
    }
    scf.merge( func );

    
    var func = {
        invite_family: {
            invite: function( el, t ) {
                $(el).on( 'click', function() {
                    $(this).parents('.shared-family-banner').find('.bottom-wrapper').slideDown(200);
                } );
            },
            close: function( el, t ) {
                $(el).on( 'click', function() {
                    var $this = $(this);
                    $('#invitee_email_error').hide();
                    $this.parents('.bottom-wrapper').slideUp(function(){
                        $this.parents('.bottom-wrapper').removeClass('sent');
                        $this.parents('.bottom-wrapper').find('input').val('');
                    });
                } );
            },
            send: function( el, t ) {
                $(el).on( 'click', function() {
                    var wrap=$(this).parents('.bottom-wrapper');
                    if($('#invitee_email').val()==''){
                        $('#invitee_email').addClass( "error" );
                        $('#invitee_email_error').text('Please provide an email to send the invite.').show();
                        return false;
                    }else if(!(/^(?!.*[-.]{2})(?!^[^@]+@[-.])(?!.*[-_.]$)[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/).test($('#invitee_email').val())){
                        $('#invitee_email').addClass( "error" );
                        $('#invitee_email_error').text('Invalid email format.').show()
                        return false;
                    }else if($('#invitee_email').val().length>40){
                        $('#invitee_email').addClass( "error" );
                        $('#invitee_email_error').text('The email address you entered is too long.').show()
                        return false;
                    }
                    $('#invitee_email_error').hide();
                    $(this).addClass('loading');
                    t.http.ajax_request( 'send_invitation', 'post',{ email: $('#invitee_email').val()} , function(r) { 
                        $(el).removeClass('loading');
                        if(r.status){
                        
                        wrap.addClass('sent');
                        setTimeout(function() {
                            $('#invite_family_close').click();
                          }, 3000);
                        }else{
                           $('#invitee_email_error').text(r.message).show().delay(3000).queue(function(){
                            $('#invitee_email_error').hide();
                          });
                        }
                    });

                } );
            },
            add: function( el, t ) {
                $(el).on( 'click', function() {
                    
                    var wrapper = $(el).parents('.shared-family-banner').find('.accounts-wrapper'),
                        email = $(el).parents('form').find('.email').val(),
                        date = $(el).parents('form').find('.date').val();;
                       
                    

    
                        if($('#invite_family_email').val()==''){
                            $('#invitee_email_error').text('Please provide an email to send the invite.').show();
                            return false;
                        }else if(!(/^(?!.*[-.]{2})(?!^[^@]+@[-.])(?!.*[-_.]$)[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/).test($('#invite_family_email').val())){
                                $('#invite_family_email').addClass( "error" );
                                $('#invitee_email_error').text('Invalid email format.').show()
                                return false;
                            }else if($('#invite_family_email').val().length>40){
                                $('#invitee_email_error').addClass( "error" );
                                $('#invitee_email_error').text('The email address you entered is too long.').show()
                                return false;
                            }
                            $('#invitee_email_error').hide();
                            $('#invite_family_email').removeClass( "error" );
                            $(el).addClass('loading');
                        t.http.ajax_request( 'send_invitation', 'post',{ email: $('#invite_family_email').val()} , function(r) { 
                            $(el).removeClass('loading');
                            if(r.status){
                            $(el).text('Invitation Sent').delay(1000).text('Send Invitation');
                            $('#invite_family_email').val('');
                            $('#bottom-wrapper').removeClass('hide');
                            
                            wrapper.append(`<div class="row-wrapper">
                                <div class="coll">
                                    <div class="email">`+email+`</div>
                                </div>
                                <div class="coll">`+date+`</div>
                                    <div class="coll"><span class="status inactive"></span> Not activated</div>
                            </div>`);
                            if(r.count==1){
                                $('.scf-widget-box.shared-family-banner .invite-count span').text(r.count+' Invite left' );
                            }else{
                                $('.scf-widget-box.shared-family-banner .invite-count span').text(r.count+' Invites left' );
                            }
                        }else{
                            $('#invite_family_email').addClass( "error" );
                            $('#invitee_email_error').text(r.message).show();
                        //     $('#invitee_email_error').text(r.message).show().delay(3000).queue(function(){
                        //      $('#invitee_email_error').hide();
                        //    });
                         }
                        });

                    

                    // if(wrapper.find('.row-wrapper').length >= 5){
                    //     $('.shared-family-banner .form-wrapper').hide();
                    // }

               } );
            }
        }
    }
    scf.merge( func );

    var func = {
        bank_disputes: {
            popup: function( el, t ) {
                $(el).on( 'click', function() {
                    var target = $(this).attr("data-target");
                    t.modal.show( target );
                    // if($(this)[0].checked) {
                    //     var target = $(this).attr("data-target");
                    //     t.modal.show( target );
                    // } 
                } );
            }
        }
    }
    scf.merge( func );

    //PL - US map with states
    var func = {
        search_progress: {
            circle_progress: function( el, t ) {
                const circularProgress = document.querySelectorAll(".circular-progress");
                let smallScreen = screen.width<1024;

                Array.from(circularProgress).forEach((progressBar) => {
                    const progressValue = progressBar.querySelector(".percentage");
                    const innerCircle = progressBar.querySelector(".inner-circle");
                    let startValue = 0,
                    endValue = 100//Number(progressBar.getAttribute("data-percentage")),
                    speed = 350,
                    progressColor = progressBar.getAttribute("data-progress-color");

                    const progress = setInterval(() => {
                        startValue++;
                        progressValue.textContent = `${startValue}%`;
                        progressValue.style.color = `${progressColor}`;

                        innerCircle.style.backgroundColor = `${progressBar.getAttribute(
                        "data-inner-circle-color"
                        )}`;

                        progressBar.style.background = `conic-gradient(${progressColor} ${
                        startValue * 3.6
                        }deg,${progressBar.getAttribute("data-bg-color")} 0deg)`;

                        if (startValue == 10) {
                            $('.progress-steps .search-step-1').addClass('active');
                            $('.progress-bar .bar-1').addClass('active');
                            t.http.ajax_request( "revamp_step", 'post', {"step": "search_progress_crim"}, function( response ) {
                                if (response.status) {
                                    //console.log(response);
                                }
                            });
                        }
                        if (startValue == 15) {
                            $('.progress-bar .bar-1').removeClass('active');
                            $('.progress-steps .search-step-1').addClass('completed');
                            $('.progress-bar .bar-1').addClass('completed');
                            // t.http.ajax_request( "revamp_step", 'post', {"step": "search_progress_2"}, function( response ) {
                            //     if (response.status) {
                            //         console.log(response);
                            //     }
                            // });
                        }
                        if (startValue == 20) {
                            if(smallScreen){ $('.progress-steps .search-step-1').removeClass('active');}
                            $('.progress-steps .search-step-2').addClass('active');
                            $('.progress-bar .bar-2').addClass('active');
                            $('#content-criminal').hide();
                            $('#img-criminal').hide();
                            $('#content-phone').show();
                            $('#img-phone').show();
                            t.http.ajax_request( "revamp_step", 'post', {"step": "search_progress_phone"}, function( response ) {
                                if (response.status) {
                                    //console.log(response);
                                }
                            });
                        }
                        if (startValue == 25) {
                            $('.progress-bar .bar-2').removeClass('active');                       
                            $('.progress-steps .search-step-2').addClass('completed');
                            $('.progress-bar .bar-2').addClass('completed');
                            // t.http.ajax_request( "revamp_step", 'post', {"step": "search_progress_4"}, function( response ) {
                            //     if (response.status) {
                            //         console.log(response);
                            //     }
                            // });
                        }
                        if (startValue == 35) {
                            if(smallScreen){ $('.progress-steps .search-step-2').removeClass('active');}
                            $('.progress-steps .search-step-3').addClass('active');
                            $('.progress-bar .bar-3').addClass('active');
                            $('#content-phone').hide();
                            $('#img-phone').hide();
                            $('#content-email').show();
                            $('#img-email').show();
                            t.http.ajax_request( "revamp_step", 'post', {"step": "search_progress_email"}, function( response ) {
                                if (response.status) {
                                    //console.log(response);
                                }
                            });
                        }
                        if (startValue == 45) {
                            $('.progress-bar .bar-3').removeClass('active');                        
                            $('.progress-steps .search-step-3').addClass('completed');
                            $('.progress-bar .bar-3').addClass('completed');
                            // t.http.ajax_request( "revamp_step", 'post', {"step": "search_progress_6"}, function( response ) {
                            //     if (response.status) {
                            //         console.log(response);
                            //     }
                            // });
                        }
                        if (startValue == 50) {
                            if(smallScreen){ $('.progress-steps .search-step-3').removeClass('active');}
                            $('.progress-steps .search-step-4').addClass('active');
                            $('.progress-bar .bar-4').addClass('active');
                            $('#content-email').hide();
                            $('#img-email').hide();
                            $('#content-image').show();
                            $('#img-image').show();
                            t.http.ajax_request( "revamp_step", 'post', {"step": "search_progress_image"}, function( response ) {
                                if (response.status) {
                                    //console.log(response);
                                }
                            });
                        }
                        if (startValue == 55) {
                            $('.progress-bar .bar-4').removeClass('active');                       
                            $('.progress-steps .search-step-4').addClass('completed');
                            $('.progress-bar .bar-4').addClass('completed');
                            // t.http.ajax_request( "revamp_step", 'post', {"step": "search_progress_8"}, function( response ) {
                            //     if (response.status) {
                            //         console.log(response);
                            //     }
                            // });
                        }
                        if (startValue == 70) {
                            if(smallScreen){ $('.progress-steps .search-step-4').removeClass('active');}
                            $('.progress-steps .search-step-5').addClass('active');
                            $('.progress-bar .bar-5').addClass('active');
                            $('#content-image').hide();
                            $('#img-image').hide();
                            $('#content-relative').show();
                            $('#img-relative').show();
                            t.http.ajax_request( "revamp_step", 'post', {"step": "search_progress_relative"}, function( response ) {
                                if (response.status) {
                                    //console.log(response);
                                }
                            });
                        }
                        if (startValue == 80) {
                            $('.progress-bar .bar-5').removeClass('active');                           
                            $('.progress-steps .search-step-5').addClass('completed');
                            $('.progress-bar .bar-5').addClass('completed');
                            // t.http.ajax_request( "revamp_step", 'post', {"step": "search_progress_10"}, function( response ) {
                            //     if (response.status) {
                            //         console.log(response);
                            //     }
                            // });
                        } 
                        if (startValue == 90) {
                            if(smallScreen){ $('.progress-steps .search-step-5').removeClass('active');}
                            $('.progress-steps .search-step-6').addClass('active');
                            $('.progress-bar .bar-6').addClass('active');
                            $('#content-relative').hide();
                            $('#img-relative').hide();
                            $('#content-social').show();
                            $('#img-social').show();
                            t.http.ajax_request( "revamp_step", 'post', {"step": "search_progress_social"}, function( response ) {
                                if (response.status) {
                                    //console.log(response);
                                }
                            });
                        }
                        if (startValue == 95) {
                            //if(smallScreen){ $('.progress-steps .search-step-6').removeClass('active');}
                            $('.progress-bar .bar-6').removeClass('active');                           
                            $('.progress-steps .search-step-6').addClass('completed');
                            $('.progress-bar .bar-6').addClass('completed');
                            t.http.ajax_request( "revamp_step", 'post', {"step": "search_progress_complete"}, function( response ) {
                                if (response.status) {
                                    //console.log(response);
                                }
                            });
                        }            
                        if (startValue === endValue) {
                            clearInterval(progress);
                            setTimeout(function () {
                                $('#step7').fadeOut();
                                setTimeout(function () {
                                    $('#step13').fadeIn();
                                    
                                    t.http.ajax_request( "revamp_step", 'post', {"step": "13"}, function( response ) {
                                        if (response.status) {
                                            //console.log(response);
                                        }
                                    });
                                }, 500);
                            }, 2000);
                        }
                    }, speed);
                });

            },
            carousel: function( el, t ) {
                $(el).carousel();
            },
            notification: function( el, t ) {
                $(window).scroll(function() {
                    var height = $(window). scrollTop(),
                        hH = $('#header_2020').height();
                
                    if(height >= hH) {
                        $(el).addClass('fixed');
                    } else {
                        $(el).removeClass('fixed');
                    }
                });

                setTimeout(function(){
                    $(el).fadeOut();
                },5000);
            },
            save_email: function( el, t ) {

            },
            slider: function( el, t ) {
                var slide = $(el).find('.slide');
                var elem = document.getElementById("filler");
                var val = document.getElementById("val"); 
                var width = 20;

                function slideNext() {
                    var currentSlide = $(el).find('.slide.act');

                    if(currentSlide.next().length > 0){
                        slide.removeClass('act');
                        currentSlide.next().addClass('act');

                        if (width < 100)  {
                            width = ($(el).find('.slide.act').index() + 1) * 20; 
                            elem.style.width = width + '%'; 
                            val.innerHTML = width * 1  + '%';

                            if(width == 100){
                                setTimeout(function(){
                                    slide.parents('.bg-box').find('.alert-box').show();
                                    setTimeout(function(){
                                        $('#results-ready').click();
                                    },1000);   
                                },400);                                
                            }
                        } 
                    
                    }
                }

                //Enabling auto scroll
                setInterval(slideNext, 2000);
            },
            skip_invite: function( el, t ) {
                $(el).on('click', function(){
                    $(this).parents('.scf-popup-dialog').find('.popup-contents').hide();
                    $(this).parents('.scf-popup-dialog').find('.pl-section').show();
                });
            },
            countdown: function(obj, start, end, duration) {
                let startTimestamp = null;
                const step = (timestamp) => {
                  if (!startTimestamp) startTimestamp = timestamp;
                  const progress = Math.min((timestamp - startTimestamp) / duration, 1);
                  obj.innerHTML = Math.floor(progress * (end - start) + start);
                  if (progress < 1) {
                    window.requestAnimationFrame(step);
                  }
                };
                window.requestAnimationFrame(step);
              }
        }
    }
    scf.merge( func );

    //PL Onboarding Dashboard
    var func = {
        pl_onboarding:{
            onboard_email: function( el, t ) {
                $(el).on( "click", function( e ) {
                    $(this).addClass('loading');
                    $(".email_error").remove();
                    post_data = {
                        search_type: 1,
                        email: $("#email2").val(),
                        pl_onboard: 1,
                        pl_onboard_dashboard: true, 
                    }
                    if ( ! t.validator.email( post_data.email ) ) {
                        $("#email2").after( "<span class='email_error'>Invalid Email Address*</span>" );
                        $(this).removeClass('loading');
                        return false;                        
                    }
                    t.http.ajax_request( 'onboard_email', 'post', post_data, function( response ) { });
                    t.http.request( path.base_url+'search.html', 'POST', post_data, 'json', function(response) {
                        response = JSON.parse( response );
                        if ( response.status ) {
                            window.location = path.base_url + 'dashboard.html?section=privacy_lock_onboarding&action=3'; 
                        }
                    } );
                });
            },
            onboard_name_next: function( el, t ) {
                $(el).on( "click", function( e ) {
                    var fname = $("#fname").val(),
                        lname = $("#lname").val();

                    $(".email_error").remove();

                    if ( fname == "" || lname == "" ) {
                        $("#fname").after( "<span class='email_error'>First name and last name fileds are required*</span>" );
                        $(this).removeClass('loading');
                        return false;
                    } else {
                        t.modal.show('age_location_filter2');
                    }
                                        
                });
            },
            onboard_name: function( el, t ) {
                $(el).on( "click", function( e ) {
                    
                    $(this).addClass('loading');

                    var fname = $("#fname").val(),
                    lname = $("#lname").val();

                    $(".email_error").remove();

                    if ( fname == "" || lname == "" ) {
                        $("#fname").after( "<span class='email_error'>First name and last name fileds are required*</span>" );
                        $(this).removeClass('loading');
                        return false;
                    }
                    
                    if ( $("#age").html() == "" ) {
                        $("#age_error").text("Age field is required");
                        $("#age_error").show();
                        $(this).removeClass('loading');
                        return false;
                    }

                    if ( $("#state").val() == null ||  $("#city").val() == null ) {
                        $("#loc_error").text("Location is required");
                        $("#loc_error").show();
                        $(this).removeClass('loading');
                        return false;
                    }
                    if ( $("#age").html() <= 0 ) {
                        $("#age_error").text("Please enter a valid age");
                        $("#age_error").show();
                        $(this).removeClass('loading');
                        return false;
                    }
                    
                    $agemin =  $("#age").html() - 3;
                    $agemax=  parseInt($("#age").html()) + parseInt(3);
                    $age = $agemin+" - "+$agemax;
                    post_data = {
                        search_type: 2,
                        full_name: $("#fname").val()+" "+$("#mname").val()+" "+$("#lname").val(),
                        age: $age,
                        state: $("#state").val(),
                        city: $("#city").val(),
                        pl_onboard: 2,
                        pl_onboard_dashboard: true, 
                    }
                    t.http.ajax_request( 'onboard_name', 'post', post_data, function( response ) { });
                    t.http.request( path.base_url+'search.html', 'POST', post_data, 'json', function( response ) {
                        response = JSON.parse( response );
                        window.location = path.base_url + 'dashboard.html?section=privacy_lock_onboarding&action=2';

                    } );
                });
            },
            onboard_phone: function( el, t ) {
                $(el).on( "click", function( e ) {
                    $(this).addClass('loading');
                    post_data = {
                        search_type: 3,
                        phone:$("#phone").val(),
                        pl_onboard: 3,
                        pl_onboard_dashboard: true, 
                    }
                    if($("#phone").val() == ""){
                        window.location = path.base_url + 'dashboard.html?section=privacy_lock_onboarding&action=5a';
                    }
                    else{
                    t.http.request( path.base_url+'search.html', 'POST', post_data, 'json', function( response ) {
                        response = JSON.parse( response );
                        // skipping step 4 until images are added to PL
                        window.location = path.base_url + 'dashboard.html?section=privacy_lock_onboarding&action=5a';

                    } );
                    }
                });
            },
            privacy_mode: function( el, t ) {
                $(el).on( "click", function( e ) {
                    $(this).addClass('loading');                        

                    var arr = [];
                    $('input:checkbox:checked').each(function () {
                        arr.push($(this).parent().text());
                    });

                    post_data = {
                        type: "email",
                        data:arr,
                    }
                    t.http.ajax_request( 'pl_selection', 'post', post_data, function( response ) {
                        if ( response.status ) {   
                            window.location = path.base_url + 'dashboard.html?section=privacy_lock_onboarding&action=6';
                        }
                    });
                });
            },
            selected_privacy: function( el, t ) {
                $(el).on( "click", function( e ) {
                    $(this).addClass('loading');

                    var arr = $('input[name="privacy"]:checked').attr('data-id');
                    if (!arr) {
                        $("#selected_privacy").after( "<span class='email_error'>Privacy Type is required*</span>" );
                        $(this).removeClass('loading');
                        return false;
                    }
                    post_data = {
                        type: "privacy_type",
                        data:arr,
                        pl_onboard_dashboard: true, 
                    }
                    
                    t.http.ajax_request( 'pl_type_selection', 'post', post_data, function( response ) {
                        if ( response.status ) {   
                            window.location = path.base_url + 'dashboard.html?section=privacy_lock_onboarding&action=7';
                        }
                    });
                });
            },
            scan: function( el, t ) {
                $(el).on( "click", function( e ) {
                    $(this).addClass('loading');                        
                    window.location = path.base_url + 'dashboard.html?section=privacy_lock_onboarding&action=5a';
                });
            },
            next: function( el, t ) {
                $(el).on( "click", function( e ) {
                    $(this).addClass('loading');                        
                        url = window.location.href;
                        var state = url.substr(url.length - 1)
                        console.log(state);
                        var arr = [];
                        $('input:checkbox:checked').each(function () {
                            arr.push($(this).parent().text());
                        });
                        switch(state) {
                            case 'a':
                                post_data = {
                                    type: "email",
                                    data:arr,
                                }
                              break;
                            case 'b':
                                post_data = {
                                    type: "phone",
                                    data:arr,
                                }
                              break;
                            case 'c':
                                post_data = {
                                    type: "social",
                                    data:arr,
                                }
                              break;
                            case 'd':
                                post_data = {
                                    type: "relationships",
                                    data:arr,
                                }
                              break;
                            case 'e':
                                post_data = {
                                    type: "jobs",
                                    data:arr,
                                }
                              break;
                            case 'f':
                                post_data = {
                                    type: "locations",
                                    data:arr,
                                }
                              break;
                            default:
                                window.location = path.base_url + 'dashboard.html?section=privacy_lock_onboarding&action=8';
                          }
                          t.http.ajax_request( 'pl_selection', 'post', post_data, function( response ) {

                            if ( response.status ) {
                                state = String.fromCharCode(state.charCodeAt() + 1);
                                while($("[name='"+state+"']").val() <1){
                                    state = String.fromCharCode(state.charCodeAt() + 1) 
                                }
                                if(state > 'f'){
                                    window.location = path.base_url + 'dashboard.html?section=privacy_lock_onboarding&action=6';
                                }
                                else{
                                    window.location = path.base_url + 'dashboard.html?section=privacy_lock_onboarding&action=5'+state;
                       
                                }
                            }

                        });

                });
            },
            age: function( el, t ) {
                $(el).on("change", function(e) {
                    // Retrieve values
                    var day = $(".age_location_filter #datepicker_day").val();
                    var month = $(".age_location_filter #datepicker_month").val();
                    var year = $(".age_location_filter #datepicker").val();
                
                    // Check if all fields are filled
                    if (!day || !month || !year) {
                        $(".age_location_filter #age").html("");
                        return;  // Exit if any field is missing
                    }
                
                    // Create selected date object, ensuring valid month (0-indexed in JavaScript)
                    var selectedDate = new Date(year, month - 1, day);
                
                    // Check if the created date is valid (e.g., handles invalid dates like February 30)
                    if (selectedDate.getDate() != day || selectedDate.getMonth() != (month - 1) || selectedDate.getFullYear() != year) {
                        $(".age_location_filter #age").html("");
                        return;  // Exit if the date is invalid
                    }
                
                    // Get today's date for comparison
                    var today = new Date();
                
                    // Calculate the age
                    var age = today.getFullYear() - selectedDate.getFullYear();
                    var m = today.getMonth() - selectedDate.getMonth();
                
                    // Adjust if the birthday hasn't occurred yet this year
                    if (m < 0 || (m === 0 && today.getDate() < selectedDate.getDate())) {
                        age--;
                    }
                
                    // Display the calculated age
                    if (age >= 0) {
                        $(".age_location_filter #age").html(age);
                    } else {
                        $(".age_location_filter #age").html("");
                    }
                });                
            },
            export : {
                pdf: function (el, t) {
                    $(el).on('click', function (event) {
                        event.preventDefault();

                        // Get the content of the printable area
                        var body = $('.pl_onboarding_form #printable_area').html();

                        // Create a new window for printing
                        var newWindow = window.open('Loading', '__blank');

                        // Write the printable content to the new window
                        newWindow.document.write(`
                            <html>
                            <head>
                                <title>Print Preview</title>
                                <style>
                                    /* Add any styles here if needed */
                                    body { font-family: Arial, sans-serif; }
                                    /* Table Container */
                                    .table-container {
                                        overflow-x: auto;
                                        margin: 20px 0;
                                    }

                                    /* Table Styling */
                                    .table {
                                        width: 100%;
                                        border-collapse: collapse;
                                        margin-bottom: 20px;
                                    }

                                    /* Table Header */
                                    thead {
                                        background-color: #26273c;
                                        color: white;
                                    }

                                    thead.bg-primary {
                                        background-color: #470faa !important;
                                        color: white;
                                    }

                                    /* Table Cells */
                                    td {
                                        text-align: left !important;
                                    }

                                    th, 
                                    td {
                                        padding: 10px;
                                        white-space: nowrap;
                                        width: 100%;
                                    }

                                    /* Table Row Hover Effect */
                                    tbody tr:hover {
                                        background-color: #f0f0f0;
                                    }

                                    /* Zebra Striping */
                                    tbody tr:nth-child(even) {
                                        background-color: #f7f7f7;
                                    }

                                    /* Label Cells */
                                    .label-cell {
                                        font-weight: bold;
                                        width: 50%;
                                    }

                                    /* Value Cells */
                                    .value-cell {
                                        width: 50%;
                                    }

                                    /* Responsive Table: Overflow Handling for Small Screens */
                                    @media screen and (max-width: 600px) {
                                        table, thead, tbody, th, td, tr {
                                            display: block;
                                        }

                                        th, 
                                        td {
                                            box-sizing: border-box;
                                            width: 100%;
                                            display: flex;
                                            justify-content: space-between;
                                        }

                                        th {
                                            background-color: #26273c;
                                            text-align: right;
                                            color: white;
                                        }

                                        .label-cell {
                                            text-align: left;
                                        }
                                    }

                                </style>
                            </head>
                            <body>
                                <h3>PL Onboarding Data</h3>
                                ${body}
                            </body>
                            </html>
                        `);

                        // Close the document writing
                        newWindow.document.close();

                        // Trigger the print dialog
                        newWindow.print();

                        // Close the new window after the print dialog is closed
                        newWindow.close();

                    });
                    
                }
            },
            back:function(el,t){
                $(el).on('click',function(){
                    // Get the URL parameters using jQuery
                    const urlParams = new URLSearchParams(window.location.search);

                    // Get the value of the 'action' parameter
                    const action = urlParams.get('action');
                    
                    const step = action - 1;

                    window.location = path.base_url + 'dashboard.html?section=privacy_lock_onboarding&action='+ step;
                });
            }
        }
    }
    scf.merge( func );

    $(document).on("click", ".module-singular .view-report-btn, .view-full-report-checkout, .module-singular .quick-navigation-btn, .module-singular .unlock-btn, .module-singular .full-report-btn, .module-singular .view-details-btn, .version-two.scf-search-pointer .faq-block p a", function () {
        var current_url = window.location.href;
        var url_split = current_url.split('?')[0];



        window.location.href = url_split + "?search=new";

    });

    $(document).on("click", "#dashboard_tracking_refs", function () {
        var userid = $(this).data('userid');
        //Remove Payment gateways
        var paymentGateways = [
            "Stripe",
            "PayPal",
            "Square",
            "Braintree",
            "Authorize.Net",
            "Adyen",
            "Amazon Pay",
            "Worldpay",
            "Skrill"
        ];
        $('#referrer_history_modal').show();       
        $('#referrer-data-tbody').html('<i>Loading...</i>');
        $.ajax({ url: path.relative_url + "ajax.html?cmd=get_referrer_history",  method:"POST", data:{ ref_user:userid },  success:function(response){
            if ( response.status ) {
                $('#referrer-data-tbody').empty();
                if(response.data.length == 0){
                    $('#referrer-data-tbody').html('<i>No data found<i>');
                }
                else {
                    response.data.forEach(function(item) {
                        var skip = false;
                        // Convert the referer_url to lower case once for performance
                        var lowerUrl = item.referer_url.toLowerCase();
                        
                        // Loop through each gateway and check for a match
                        for (var i = 0; i < paymentGateways.length; i++) {
                            if (lowerUrl.indexOf(paymentGateways[i].toLowerCase()) !== -1) {
                                skip = true;
                                break;
                            }
                        }
                        
                        // If none of the gateway keywords are found, append the item
                        if (!skip) {
                            var list = $('<div>');
                            list.append('<div>' + item.datetime + '  :  ' + item.referer_url + '</div>');
                            $('#referrer-data-tbody').append(list);
                        }
                    });
                }      
            }
        }});
    });

    $(".lock-on .privacy-form-switch input, .lock-off .privacy-form-switch input, .pl-db-filter input").click(function () {
		var val = ($(this).data('val')) ?  $(this).data("val") : "";
        if($(this).is(':checked')) {
            var v = 2;

                $.ajax({ url: path.relative_url + "ajax.html?cmd=privacy_lock&v=" + v + "&val=" + val, dataType : 'json',  method:"POST", data:{},  success:function(d){
                    if("failed" in d){
                        $(".privacy_lock_need_active_account").show();
                    } else window.location = path.base_url + 'dashboard.html?section=privacy_lock_report';
                }});

        } else {
            var v = 1;
            $.ajax({ url: path.relative_url + "ajax.html?cmd=privacy_lock&v=" + v + "&val=" + val, dataType : 'json',  method:"POST", data:{},  success:function(d){
                if("failed" in d){
                    $(".privacy_lock_need_active_account").show();
                } else location.reload();

            }});


        }

    });

    $(document).on("click", ".cancel_alternative_options .js_close_modal", function () {
        $(".cancel_alternative_options").hide();
    });

    $(document).ready(function () {
        $('.search_progress_revamp .content-box input[name="age"]').change(function () {
            // Remove 'active' class from all .radio elements
            $('.radio').removeClass('active');

            // Add 'active' class to the parent .radio of the selected input
            if ($(this).is(':checked')) {
                $(this).parent('.radio').addClass('active');
            }
        });
    });

    /****Search Dropdown****/
    
function create_Search_dropdowns() {             
    $("div.dropdown-select-search").remove();
    $('.dropdown-select-search').each(function (i, select) {
        if (!$(this).next().hasClass('dropdown-select-search')) {
            $(this).hide();
            $(this).after('<div class="wide ' + ($(this).attr('class') || '') + '" tabindex="0"><span class="current"></span><div class="list"><ul></ul></div></div>');
            var dropdown = $(this).next();
            var options = $(select).find('option');
            var selected = $(this).find('option:selected');
            dropdown.find('.current').html(selected.data('display-text') || selected.text());
            options.each(function (j, o) {
                var display = $(o).data('display-text') || '';
                dropdown.find('ul').append('<li class="option ' + ($(o).is(':selected') ? 'selected' : '') + '" data-value="' + $(o).val() + '" data-display-text="' + display + '">' + $(o).text() + '</li>');
            });
        }
    });

    $('.dropdown-select-search ul').before('<div class="dd-search"><input  autocomplete="off" placeholder="Search.." onkeyup="filter_Search_dropdowns(this)" class="dd-searchbox scf-form" type="text"></div>');
};

// Event listeners

// Open/close
$(document).on('click', '.dropdown-select-search', function (event) {
    if($(event.target).hasClass('dd-searchbox')){
        return;
    }
    $('.dropdown-select-search').not($(this)).removeClass('open');
    $(this).toggleClass('open');
    if ($(this).hasClass('open')) {
        $(this).find('.option').attr('tabindex', 0);
        $(this).find('.selected').focus();
    } else {
        $(this).find('.option').removeAttr('tabindex');
        $(this).focus();
    }
});

// Close when clicking outside
$(document).on('click', function (event) {
    if ($(event.target).closest('.dropdown-select-search').length === 0) {
        $('.dropdown-select-search').removeClass('open');
        $('.dropdown-select-search .option').removeAttr('tabindex');
    }
	if ($(event.target).closest('.ris-filter').length === 0) {
        $('.ris-filter').removeClass('active-filter');
    }
    if ($(event.target).closest('.search-form-2020 input').length === 0) {
        $('.search-example').fadeOut();
    }
    event.stopPropagation();
});


// Search

// Option click
$(document).on('click', '.dropdown-select-search .option', function (event) {
   // $("#txtSearchValue").focus();
    $(this).closest('.list').find('.selected').removeClass('selected');
    $(this).addClass('selected');
    var text = $(this).data('display-text') || $(this).text();
    $(this).closest('.dropdown-select-search').find('.current').text(text);
    $(this).closest('.dropdown-select-search').prev('select').val($(this).data('value')).trigger('change');
});

// Keyboard events
$(document).on('keydown', '.dropdown-select-search', function (event) {
    var focused_option = $($(this).find('.list .option:focus')[0] || $(this).find('.list .option.selected')[0]);
    // Space or Enter
    //if (event.keyCode == 32 || event.keyCode == 13) {
    if (event.keyCode == 13) {
        if ($(this).hasClass('open')) {
            focused_option.trigger('click');
        } else {
            $(this).trigger('click');
        }
        return false;
        // Down
    } else if (event.keyCode == 40) {
        if (!$(this).hasClass('open')) {
            $(this).trigger('click');
        } else {
            focused_option.next().focus();
        }
        return false;
        // Up
    } else if (event.keyCode == 38) {
        if (!$(this).hasClass('open')) {
            $(this).trigger('click');
        } else {
            var focused_option = $($(this).find('.list .option:focus')[0] || $(this).find('.list .option.selected')[0]);
            focused_option.prev().focus();
        }
        return false;
        // Esc
    } else if (event.keyCode == 27) {
        if ($(this).hasClass('open')) {
            $(this).trigger('click');
        }
        return false;
    }
});

// Pie Charts
function sliceSize(dataNum, dataTotal) {
  return (dataNum / dataTotal) * 360;
}

function addSlice(id, sliceSize, pieElement, offset, sliceID, color) {
  $(pieElement).append("<div class='slice "+ sliceID + "'><span></span></div>");
  var offset = offset - 1;
  var sizeRotation = -179 + sliceSize;

  $(id + " ." + sliceID).css({
    "transform": "rotate(" + offset + "deg) translate3d(0,0,0)"
  });

  $(id + " ." + sliceID + " span").css({
    "transform"       : "rotate(" + sizeRotation + "deg) translate3d(0,0,0)",
    "background-color": color
  });
}

function iterateSlices(id, sliceSize, pieElement, offset, dataCount, sliceCount, color) {
  var
    maxSize = 179,
    sliceID = "s" + dataCount + "-" + sliceCount;

  if( sliceSize <= maxSize ) {
    addSlice(id, sliceSize, pieElement, offset, sliceID, color);
  } else {
    addSlice(id, maxSize, pieElement, offset, sliceID, color);
    iterateSlices(id, sliceSize-maxSize, pieElement, offset+maxSize, dataCount, sliceCount+1, color);
  }
}

function createPie(id) {
  var
    listData      = [],
    listTotal     = 0,
    offset        = 0,
    i             = 0,
    pieElement    = id + " .pie-chart-pie"
    dataElement   = id + " .pie-chart-data"

    color         = [
      "#4F8BEB",
      "#F8933C",
      "#2AC984",
      "#E94A74"
    ];

  $(dataElement+" .count").each(function() {
    listData.push(Number($(this).html()));
  });

  for(i = 0; i < listData.length; i++) {
    listTotal += listData[i];
  }

  for(i=0; i < listData.length; i++) {
    var size = sliceSize(listData[i], listTotal);
    iterateSlices(id, size, pieElement, offset, i, 0, color[i]);
    $(dataElement + " li:nth-child(" + (i + 1) + ") .bullet").css("background", color[i]);
    offset += size;
  }
}

function createPieCharts() {
  createPie('.pieID-phone-numbers' );
}



$(document).ready(function () {
    create_Search_dropdowns();
	createPieCharts();
});

$(window).on('load', function(){
	var address = $('.search-form-2020 .pac-target-input').val();
	if(address){
		$('.search-form-2020 .go').trigger('click');
	}
});

$(window).on('load', function(){
	var address = $('.search-form-2020 .pac-target-input').val();
	if(address){
		$('.search-form-2020 .go').trigger('click');
	}
    if($('.ss-table-wrapper .animated-arrow').length > 0){
        $('.ss-table-wrapper .animated-arrow').addClass('animate');
    }
});





























// Open/close
$(document).on('click', '#scam_chat_checker_btn', function (event) {
    var scam_chat_checker_btn =  $(this);
    scam_chat_checker_btn.hide();
    $('#scam_detect_result').hide();
    $('#scam_detect_image').hide();
    $('#scam_detect_loader').show();
    $('#scam_detect_error').hide();
    // alert("test");
    // console.log("test");
    var scam_msg = $('#scam_chat_message').val();
    $.ajax({ url: path.relative_url + "ajax.html?cmd=scam_chat_check",  method:"POST", data:{ message: scam_msg },  success:function(d){
        if("status" in d && d.status ){
            console.log(d);
            
            $('#scam_detect_loader').hide();
            $('#scam_detect_result').show();
            if("scam" in d.romance_scam && d.romance_scam.scam ){

                // $(this).show();
                $('#scam_detected_status').html('<button type="button" class="btn btn-red"><h4>Scam Detected!</h4></button>');
                $('#scam_detected_percentage').append('<button type="button" class="btn btn-red"><h4>'+d.romance_scam.possibility+'%</h4></button>');
                $('#scam_detected_more_info').html(d.romance_scam.details);
                //
            }
            else{
                $('#scam_detected_status').html('<button type="button" class="btn btn-green"><h4>No Scam Detected!</h4></button>');
                $('#scam_detected_more_info').html(d.romance_scam.details);
            }
            
            scam_chat_checker_btn.show();
        }
        else{
            $('#scam_detect_loader').hide();
            $('#scam_detect_error').show();
            scam_chat_checker_btn.show();
        }
    }});

});

if( module_js == "register" ) {
    $(window).on('message', function(e) {
        var card_types = ["visa", "master", "american", "discover", "diners", "jcb", "maestro"];
    
        var oe = e.originalEvent;
        if ("https://assets.braintreegateway.com" == oe.origin) {
    
            try {
                var data = JSON.parse(oe.data.replace(/\/\*.+\*\//, ''));
                var event_data = data.eventData;
    
                if (event_data.type && "validityChange" == event_data.type) {
                    var card_valid = event_data.merchantPayload.fields['number'].isValid;
                    if( card_valid ) {
                        $(".braintree-card-ok").removeClass("si-warn-round");
                        $(".braintree-card-ok").addClass("active");
                    } else {
                        $(".braintree-card-ok").addClass("si-warn-round");
                        $(".braintree-card-ok").removeClass("active");
                    }
                }
    
                if (event_data.type && "cardTypeChange" == event_data.type) {
                    
                    // Check if the cards array is empty
                    if (event_data.merchantPayload.cards.length === 0) {
                        $(".scf_2020_style .scf-card-no").css('background-image', 'url(' + path.base_url + 'assets/template/2020/images/cc/default.svg)');
                    } else {
                        var card_type = event_data.merchantPayload.cards[0].type;
                        var card = card_type.split('-')[0]; 
                        var cardCount = event_data.merchantPayload.cards.length;                  
    
                        if (card_types.includes(card) && cardCount < 2 ) {
                            $(".scf_2020_style .scf-card-no").css('background-image', 'url(' + path.base_url + 'assets/template/2020/images/cc/' + card + '.svg)');
                        } else {
                            $(".scf_2020_style .scf-card-no").css('background-image', 'url(' + path.base_url + 'assets/template/2020/images/cc/default.svg)');
                        }
                    }
                }
    
            } catch (e) {}
    
        }
    });
}

$(document).on('click', '.pl_next_intro', function (event) {
    var next_id = $(this).data("target");
    $( ".privacy_intro .intro_slider" ).hide();
    $( ".privacy_intro ." + next_id ).show();
});

$(".customer_post_enrollment .submit").click(function () {

    var $this = $(this);
    if( $this.hasClass( "disabled" ) ) return false;

    var phoneNumber = $( ".customer_post_enrollment .scf-form" ).val();
    var phonePattern = /^\d{10,12}$/;
    $(".customer_post_enrollment .scf-notification").hide();

    if( phoneNumber == "" ){
        $(".customer_post_enrollment .scf-notification.error").html('Phone Number Required');
        $(".customer_post_enrollment .scf-notification.error").show();
    }else if ( phonePattern.test( phoneNumber ) ) {
        $.ajax({ url: path.relative_url + "ajax.html?cmd=customer_post_enrollment", dataType : 'json',  method:"POST", data:{ "phone": phoneNumber },  success:function(d){
            $(".customer_post_enrollment .scf-notification.success").show();
            $this.addClass("disabled");
        }});
    } else {
        $(".customer_post_enrollment .scf-notification.error").html('Invalid Phone Number');
        $(".customer_post_enrollment .scf-notification.error").show();
    }
    
});

/* Start CC Validation */
$('#payment .cc_number').on('keypress change blur keyup', function () {

    var card_no = $(this).val();
    card_no = card_no.replace(/-/g, '');

    var card_type = detectCreditCard( card_no );
    var card_length = card_no.length;
    $(this).css( 'background-image', 'url(' + path.base_url + 'assets/template/2020/images/cc/' + card_type[0] + '.svg)' );

    if( card_type[1] == card_length ) {
        $(".scf-checkout .validated_cc_form i.cc_number_valid, .scf-checkout-pro .validated_cc_form i.cc_number_valid").addClass("ok");
        $(".scf-checkout .validated_cc_form i.cc_number_valid, .scf-checkout-pro .validated_cc_form i.cc_number_valid").removeClass("si-warn-round");
    } else {
        $(".scf-checkout .validated_cc_form i.cc_number_valid, .scf-checkout-pro .validated_cc_form i.cc_number_valid").removeClass("ok");
        $(".scf-checkout .validated_cc_form i.cc_number_valid, .scf-checkout-pro .validated_cc_form i.cc_number_valid").addClass("si-warn-round");
    }
    
});

function detectCreditCard(cardNumber) {
    if (/^4/.test(cardNumber)) {
      $return = ["visa", "16"];
    } else if (/^5[1-5]/.test(cardNumber)) {
      $return = ["master", "16"];
    } else if (/^3[47]/.test(cardNumber)) {
      $return = ["american", "15"];
    } else if (/^(60|62|64|65)/.test(cardNumber)) {
      $return = ["discover", "16"];
    } else if (/^(30|36|54|55)/.test(cardNumber)) {
      $return = ["diners", "16"];
    } else if (/^35/.test(cardNumber)) {
      $return = ["jcb", "16"];
    } else if (/^(5018|5020|5038|6304|6759|6761|6762|6763)/.test(cardNumber)) {
      $return = ["maestro", "12"];
    } else {
      $return = ["default", "16"];
    }
    return $return;
}

$('#payment .cc_number').on('copy cut paste', function () {
    setTimeout(function () {
      $('#payment .cc_number').trigger("change");
    });
});
/* End CC Validation */

    $(document).on('click', '.next_slider', function () {
        // Find the nearest parent with the class 'item' and remove 'active' class
        var currentSlide = $(this).closest('.item');
        currentSlide.removeClass('active');

        // Check if there is a next sibling with the class 'item'
        if (currentSlide.next('.item').length > 0) {
        // If yes, add 'active' class to the next sibling
        currentSlide.next('.item').addClass('active');
        } else {
        // If no, add 'active' class to the first sibling
        currentSlide.siblings('.item:first').addClass('active');
        }
    });

    $(document).ready(function () {
        if( ris_login ) {
            function checkPercentage() {
                var sid = $("#sid_ris_login").val();
                var post_data = { "sid": sid, "type": "intermediate" };
                function makeRequest() {
                    $.ajax({
                        url: path.relative_url + "ajax.html?cmd=get_ris_percentage",
                        method: "POST",
                        data: post_data,
                        success: function (response) {
                            var percentage = response["percentage"];   
                            $(".login-ris-progrress h5").text( percentage + "% completed" );
                            $(".login-ris-progrress .scf-progress-bar .value").css("width", percentage + "%");                         
                            if (percentage >= "40" && usign && sid != undefined) {
                                newUrl = path.base_url +"reverse-image-search/?sid="+sid;
                                window.location.href = newUrl;
                            } else {
                                setTimeout(makeRequest, 1000);                                
                            }
                        },
                        error: function (error) {
                            // Handle errors
                            console.error("Error fetching data:", error);
                        }
                    });
                }
                makeRequest();
            }
            checkPercentage();
        }    
    }); 

    $(document).ready(function() {
        $('.temp_loading_img').remove();
        $('.first_step_ani').css('display', 'block');
    });

    function animateNumber($element, start, end, duration) {
        $({ count: start }).animate({ count: end }, {
            duration: duration,
            easing: 'swing',
            step: function() {
                $element.text(Math.floor(this.count));
            },
            complete: function() {
                $element.text(this.count);
            }
        });
    }

    var func = {
        enhanced: {
            urls: [],
            select_image: function( el ,t) {
                   var url = $(el).parent().parent().find(".img-thumbnail img").prop("src");
                   let index = 0;

                   if($(el).is(":checked")){
                        t.enhanced.urls.push(url);
                   }else if(!$(el).is(":checked")){
                        index = t.enhanced.urls.indexOf(url);
                        t.enhanced.urls.splice(index, 1);
                   }
                   
                    index = t.enhanced.urls.indexOf(url);
                   $(el).attr("data-enhanced-index", index); 

                   $(".enhanced_selected_image_count").html(t.enhanced.urls.length);
                   t.enhanced.fetch_urls(scf);
            },
            fetch_urls: function(t) {

                $(".img_list").empty();

                $.each(t.enhanced.urls, function(index, url) {
                 $(".img_list").append(`<div class="item">
                         <img src="`+url+`" style="background-image: url(`+url+`)" />
                         <i onclick="scf.enhanced.remove_selected_image(this, scf)" class="si-close-circle"></i>
                     </div>`);
               });

            },
            remove_selected_image: function( el ,t ) {
                    let url = $(el).parent().find("img").prop("src");
                    let index = t.enhanced.urls.indexOf(url);
                    alert(index);
                    t.enhanced.urls.splice(index, 1);
                    t.enhanced.fetch_urls(scf);
                    $('[data-enhanced-index="'+index+'"]').prop("checked" , false);
            },
            queue_images: function( el ,t ) {
                $( el ).on('click', function(){
                   console.log(t.enhanced.urls);
                   t.http.ajax_request( 'initiate_child_searches', 'post',{ urls: t.enhanced.urls, parent_image_search_id:$(this).data("id") } , function() { 
                    
                   });
                });
            },
        },
    }
    
    scf.merge( func );

    //PL Onboarding 
    var func = {
        pl_onboard: {
                export: function( el, t ) {

                    $(el).on( "click", function() {
                        
                        var id = $(this).parents(".scf-card").find("table").attr("id");
                        
                        exportTableToExcel( id, "PL Onboard " );
                        function exportTableToExcel(tableID, filename = ''){
                            var downloadLink;
                            var dataType = 'application/vnd.ms-excel';
                            var tableSelect = document.getElementById(tableID);
                            var tableHTML = tableSelect.outerHTML.replace(/ /g, '%20');
                            var d = new Date();
                            var todaydate = d.getFullYear() + "/" + (d.getMonth()+1) + "/" + d.getDate();
                            // Specify file name
                            filename = filename?filename+todaydate+'.xls':'excel_data.xls';

                            // Create download link element
                            downloadLink = document.createElement("a");

                            document.body.appendChild(downloadLink);

                            if(navigator.msSaveOrOpenBlob){
                                var blob = new Blob(['\ufeff', tableHTML], {
                                    type: dataType
                                });
                                navigator.msSaveOrOpenBlob( blob, filename);
                            }else{
                                // Create a link to the file
                                downloadLink.href = 'data:' + dataType + ', ' + tableHTML;

                                // Setting the file name
                                downloadLink.download = filename;

                                //triggering the function
                                downloadLink.click();
                            }
                        }
                    } );

                },
            }
    };
    scf.merge( func );

        //PL Onboarding 
        var func = {
            casefile: {
                    dashboard: function( el, t ) {
                        var casefileTitle,selectedCasefile,header_id;
                        $("#create-new-casefile").on( "click", function() {
                            var form =$(this).parents('form');
                            $('#case-alert').removeClass('alert').addClass('eg').text('Eg: John Doe Case File.')
                            $('#stack_folder_img').attr('src',form.data('imgesrc3'));
                            form.find('.add-name').removeClass('error');
                        
                        $(this).addClass('loading');
                        if($('#stack_name').val().trim()==''){
                            $('#case-alert').removeClass('eg').addClass('alert').text('Case file name cannot be empty.')
                            $('#stack_folder_img').attr('src',form.data('imgesrc1'));
                            form.find('.add-name').addClass('error');
                            return false;
                        }else if(/[\\/:*?"<>|]/.test($('#stack_name').val())){
                            $('#case-alert').removeClass('eg').addClass('alert').text('A file name can\'t contain any of the following characters: \\ / : ? * " < > |')
                            $('#stack_folder_img').attr('src',form.data('imgesrc1'));
                            form.find('.add-name').addClass('error');
                            return false;
                        }else if($('#stack_name').val().length>50){
                            $('#case-alert').removeClass('eg').addClass('alert').text('Case file name is too long.')
                            $('#stack_folder_img').attr('src',form.data('imgesrc1'));
                            form.find('.add-name').addClass('error');
                            return false;
                        }
                        t.http.request( form.data('link'), 'post', form.serializeArray(),'json', function(d) {
                        var obj = JSON.parse(d);
                        if(obj.status){
                            $('body').scf_notification({type:'green',text:'New case file created successfully.'})
                            setTimeout(function(){  location.reload();}, 1500);
                           
                        }else{
                            $('#case-alert').removeClass('eg').addClass('alert').text(obj.message)                       
                            $('#stack_folder_img').attr('src',form.data('imgesrc1'));
                            $('#stack_name').val('');
                            form.find('.add-name').addClass('error');

                        
                        }
                        });
                       
                        } );

                        $(".new-case-button").on( "click", function(e) {
                            e.preventDefault();
                            var form =$('#create-new-casefile-form');
                            $('#stack_name').val('');
                            $('#case-alert').removeClass('alert').addClass('eg').text('Eg: John Doe Case File.')
                            $('#stack_folder_img').attr('src',form.data('imgesrc3'));
                            form.find('.add-name').removeClass('error');
                            t.modal.show('create_new_case_file');

                        });
                        $(".rename-casefile").on( "click", function(e) {
                            e.preventDefault();
                             selectedCasefile=$(this).parents('.case-item');
                             casefileTitle=selectedCasefile.find('.case-item-p-title').text();
                            $('#rename_casefile_inp').val(casefileTitle);
                            $('#rename_id').val($(this).parents('.more-btn-wrapper').data('id'))
                            $('#case-alert-rename').text('');
                            $('#rename_casefile_inp').parent().removeClass('error');
                            t.modal.show('rename_case_file');

                        });
                        $(".add-name .si-close").on( "click", function(e) {
                            e.preventDefault();
                            $(this).parent().find('input').val('');

                        });
                        $('#stack_name').on( "keyup", function(e) {
                            e.preventDefault();
                            console.log($(this).val().length)
                            if($(this).val().length>1){
                                $(".add-name .si-close").show()
                            }else{
                                $(".add-name .si-close").hide()

                            };

                        });
                        
                        $("#rename-casefile").on( "click", function() {
                            var el=$(this);
                            var form =el.parents('form');
                            form.find('.add-name').removeClass('error');
                                                  
                        if($('#rename_casefile_inp').val().trim()==''){
                            $('#case-alert-rename').text('Case file name cannot be empty.')
                            form.find('.add-name').addClass('error');
                            return false;
                        }else if(/[\\/:*?"<>|]/.test($('#rename_casefile_inp').val())){
                            $('#case-alert-rename').text('A file name can\'t contain any of the following characters: \\ / : ? * " < > |')
                            form.find('.add-name').addClass('error');
                            return false;
                        }else if($('#rename_casefile_inp').val().length>50){
                            $('#case-alert-rename').text('Case file name is too long.')
                            form.find('.add-name').addClass('error');
                            return false;
                        }
                        el.addClass('loading');
                        t.http.request( form.data('link'), 'post', form.serializeArray(),'json', function(d) {
                        var obj = JSON.parse(d);
                        if(obj.status){
                            if(gv_clicked){gv_clicked.click();}  
                            t.modal.close('rename_case_file');
                            el.removeClass('loading');
                            selectedCasefile.find('.case-item-p-title').text(obj.newHeader);
                            $('body').scf_notification({type:'blue',text:'Name changed successfully.'})
                            //setTimeout(function(){  location.reload();}, 1500);
                        }else{
                            $('#case-alert-rename').removeClass('eg').addClass('alert').text(obj.message)                       
                            form.find('.add-name').addClass('error');
                            el.removeClass('loading');
                        
                        }
                        });
                       
                        } );
                        //delete case file modal
                        
                        $(".delete-casefile").on( "click", function(e) {
                            e.preventDefault();
                            casefileTitle=$(this).parents('.case-item').find('.case-item-p-title').text();
                            $('#delete-casefile-name').text(casefileTitle+'?');
                            
                            $('#btn-delete-casefile').data('id',$(this).parents('.more-btn-wrapper').data('id'))
                            t.modal.show('delete_case_file');

                        });
                        //delete calse file ajax request
                        $("#btn-delete-casefile").on( "click", function() {
                            var el=$(this);
                            var data={id:el.data('id'),'key':'delete-casefile'}
                            
                            el.addClass('loading');
                        t.http.request( el.data('link'), 'post', data,'json', function(d) {
                        var obj = JSON.parse(d);
                        el.data('id','');
                        if(obj.status){
                            $('body').scf_notification({type:'deleted',text:'<strong>'+casefileTitle+'</strong> Case file deleted.'})                           
                            setTimeout(function(){  location.reload();}, 1500);
                        }else{
                            
                            el.removeClass('loading');
                            location.reload();
                        }
                        });
                       
                        } );
                        //bringing to top calse file ajax request
                        $(".bringingtotop-casefile").on( "click", function() {
                            var el=$(this).parents('.more-btn-wrapper');
                            var data={'header_id':el.data('id'),'key':'bringingtotop-casefile'};

                        t.http.request( '/dashboard.html?section=case_files', 'post', data,'json', function(d) {
                        var obj = JSON.parse(d);
                        if(obj.status){location.reload();}else{
                            
                        }
                        });
                       
                        } );
                    //tracking on off
                    $('.tracking-onoff').click(function () {
                        var checked = $(this).hasClass('blue') ? 0 : 1;
                        var el=$(this);
                        selectedCasefile=el.parents('.case-item');

                        t.http.request('/dashboard.html?section=case_files', 'post', { 'checked': checked ? 1 : 0, 'header_id': $(this).parents('.more-btn-wrapper').data('id'), 'key': 'tracking-onoff-casefile' }, 'json', function (d) {
                           
                            if (checked) {
                              el.addClass('blue').html('<span class="si-notification"></span>Tracking Off')
                              selectedCasefile.find('.bell-icon').addClass('si-notification-fill active').removeClass('si-notification');

                            } else {
                               el.removeClass('blue').html('<span class="si-notification" style="color:black !important;" ></span>Tracking On')
                               selectedCasefile.find('.bell-icon').removeClass('si-notification-fill active').addClass('si-notification');


                            }


                        });

                    }); 
                        //view calse file reports ajax request
                        $(".case-item").on( "click", function(evt) {
                            evt.stopPropagation();

                             selectedCasefile=$(this);
                             var el=selectedCasefile.find('.more-btn-wrapper');
                             let imgFolderEl=selectedCasefile.find('.img-folder');
                             let imgFolderSrc=imgFolderEl.attr('src')
                            if(evt.target.tagName=='SPAN' && $(window).width()<500){
                              //  $('.more-btn-inner-wrapper').slideUp(); 
                              return false 
                            }
                            if(evt.target.tagName!='SPAN'){
                                  $('.more-btn-inner-wrapper').slideUp(); 
                              }
                             header_id=el.data('id');
                            var data={'header_id':header_id,'key':'show-reports-casefile'};
                           $('.case-item .img-folder').attr('src',imgFolderSrc.substring(0, imgFolderSrc.length - 5)+'3.png')
                           imgFolderEl.attr('src',imgFolderSrc.substring(0, imgFolderSrc.length - 5)+'1.png')
                        t.http.request( '/dashboard.html?section=case_files', 'post', data,'json', function(d) {
                            $(".case-item").removeClass('active');
                            selectedCasefile.addClass('active')
                            var title=el.parents('.case-item').find('.case-item-p-title').text();
                            $('#casfile-response-div').html(d);
                            if($(window).width()<500){
                              
                                $('#casfile-header-div').hide();
                                $('#casfile-response-div').show();
                                $('#mobile-back-btn').find('span').text(title);
                                $('#mobile-back-btn').show();
                                $('#mobile-back-btn').attr('style', 'display: flex !important;');
                                $('#create-new-btn').hide()
                            }else{
                                $('#casfile-header-div').show();
                                $('#casfile-response-div').show();
                                $('#mobile-back-btn').hide();
                                $('#create-new-btn').show()


                            }
                            $('#mobile-back-btn').click(function() {
                                $('#casfile-header-div').show();
                                $('#casfile-response-div').hide();
                                $('#mobile-back-btn').hide();
                                $('#create-new-btn').show()
                            });
                            $('#sub-con').change(function() {

                                var checked=this.checked;
                                t.http.request('/dashboard.html?section=case_files', 'post', {'checked':checked?1:0,'header_id':header_id,'key':'tracking-onoff-casefile'}, 'json', function (d) {

                                   
                                    selectedCasefile=$('#h'+header_id);
                                    var el=selectedCasefile.find('.tracking-onoff');
                                    if (checked) {
                                        el.addClass('blue').html('<span class="si-notification"></span>Tracking Off')
                                        selectedCasefile.find('.bell-icon').addClass('si-notification-fill active').removeClass('si-notification');
                                      } else {
                                         el.removeClass('blue').html('<span class="si-notification" style="color:black !important;" ></span>Tracking On')
                                         selectedCasefile.find('.bell-icon').removeClass('si-notification-fill active').addClass('si-notification');
          
                                      }
                                });
       
                            });

                        });
                        
                        } );  
                        $('#casfile-response-div').on('click','.remove_report', function () {
                            var clickedEl = $(this);
                            var line_id=clickedEl.data('line_id');
                            var report_id=clickedEl.data('report_id');
                            var u_id=clickedEl.data('u_id');
                            var ispid=clickedEl.data('ispid');
                            var report_type=clickedEl.data('report_type');

                            t.modal.show('remove_report_from_file');
                            $('#id-btn-remove_report').off().on('click', function () {
                                t.http.request('/dashboard.html?section=case_files', 'post', { 'line_id': line_id, 'report_type': report_type,'report_id': report_id, 'header_id': header_id,'u_id':u_id,'ispid':ispid, 'key': 'remove-report-casefile' }, 'json', function (d) {
                                    clickedEl.parents('.search-item-1').hide('slow');
                                    t.modal.close('remove_report_from_file');
                                    var countFiles =(parseInt(selectedCasefile.find('.case-item-p').text().split(" ")[0])-1);
                                    if(countFiles==0){
                                        selectedCasefile.click();
                                        $('#h'+header_id).find('.si-notification-fill').removeClass('active').removeClass('si-notification-fill').addClass('si-notification');
                                        $('#h'+header_id).find('.tracking-onoff').removeClass('tracking-onoff blue').addClass('disabled');
                                        
                                    }

                                    selectedCasefile.find('.case-item-p').text(countFiles==1?countFiles+' case file':countFiles+' case files')
                                    $('body').scf_notification({type:'orange',text:'Report removed from the case file.'})

                                });
                            });

                        });   
                        if($(window).width()>500){                    
                            // $('#firstItem').click();
                            $(".case-item:first").click()
                        }
                    },
                add_to_case: function( el, t ) {


                    $(".addto-case-btn").on( "click", function(e) {
                        e.preventDefault();
                        $('#add_to_case_file_body').html('');
                        var clickedLink=$(this);
                        t.http.request( '/dashboard.html?section=case_files', 'post', {'key':'add_to_case_file_popup_content'},'json', function(d) {
                            $('#add_to_case_file_body').html(d);
                            $('#new_casefile_inp').val('');
                            
                            t.modal.show('add_to_case_file');
                            t.modal.init(document.getElementById('add_to_case_file_modal'),t);
                            //add to case file save report
                            if(clickedLink.data('page')=='history'){
                                var td=clickedLink.parents('td').find('.btnViewReport');
                            }else{
                                var td=clickedLink;
                            }

                            $('#add_to_case_report_query').val(td.data('query'));
                            $('#add_to_case_report_link').val(td.data('link')?td.data('link'):td.data('target'));
                            $('#add_to_case_report_type').val(td.data('type'));
                            $('#add_to_case_report_id').val(td.data('person_id')?td.data('person_id'):td.data('id'));
                            $('#add_to_case_is_pointer').val(td.data('person_id')?0:1);
                            $('#case-alert-new').removeClass('errormsg').text( $('#case-alert-new').data('text'));;
                            $('#add-to-casefile-form').find('.add-name').removeClass('error');
                            $("#addto-casefile-btn").on( "click", function() {

                                var el=$(this);
                                var form =el.parents('form');
                                form.find('.add-name').removeClass('error');
    
                                el.addClass('loading');
    
                            if($('input[name="caseFile"]:checked').val()=='new-casefile'){

                            if($('#new_casefile_inp').val().trim()===''){
                                $('#case-alert-new').text('Case file name cannot be empty.').addClass('errormsg')
                                form.find('.add-name').addClass('error');
                                el.removeClass('loading');
                                return false;
                            }else if($('#new_casefile_inp').val().length>50){
                                $('#case-alert-new').text('Case file name is too long.').addClass('errormsg')
                                form.find('.add-name').addClass('error');
                                el.removeClass('loading');
                                return false;
                            }
                             }
                            t.http.request( form.data('link'), 'post', form.serializeArray(),'json', function(d) {
                            var obj = JSON.parse(d);
                            if(obj.status){
                                el.removeClass('loading');
                                t.modal.close('add_to_case_file');
                                $('body').scf_notification({type:'blue',text:'Report added to <strong>'+obj.header+'</strong> case file successfully.'})
                                if(gv_clicked){gv_clicked.click();}  
                                if(!clickedLink.parents('tr').find('.si-searched-file-fill').length){
                                    clickedLink.parents('tr').find('td:nth-child(3)').append('<div class="show-note"><i class="si-searched-file-fill"></i></div>')                             
                                } 
                            }else{
                                if(obj.error==2){
                                    $('body').scf_notification({type:'orange',text:obj.message})
                                }else{
                                    $('#case-alert-new').text(obj.message).addClass('errormsg')   
                                     form.find('.add-name').addClass('error');      

                                }

                                el.removeClass('loading');
                            
                            }
                            });
                           
                            } );
                            $("#new_casefile_inp").on( "click", function(e) {
                                $("#radio-new-casefile").prop("checked", true);
                            });
                            $(".add-name .si-close").on( "click", function(e) {
                                e.preventDefault();
                                $(this).parent().find('input').val('');
        
                            });
                            $('#new_casefile_inp').on( "keyup", function(e) {
                                e.preventDefault();
                                if($(this).val().length>1){
                                    $(".add-name .si-close").show()
                                }else{
                                    $(".add-name .si-close").hide()
        
                                };
        
                            });
                         });
                        

                    });
                }
                }
        };
        scf.merge( func );
    // Add to case file - CASE FILE

    document.addEventListener("DOMContentLoaded", function() {
        const radioButtons = document.querySelectorAll('input[name="caseFile"]');
        const updateImages = () => {
            radioButtons.forEach(radio => {
                const img = radio.parentElement.querySelector('img');
                if (radio.checked) {
                    radio.parentElement.style.backgroundColor = '#EFF3FC';
                    radio.parentElement.style.fontWeight = '800'; // Set the font weight to 800
                    img.src = img.src.replace('folder3.png', 'folder1.png');
                } else {
                    radio.parentElement.style.backgroundColor = '';
                    radio.parentElement.style.fontWeight = ''; // Reset the font weight
                    img.src = img.src.replace('folder1.png', 'folder3.png');
                }
            });
        };
        radioButtons.forEach(radio => {
            radio.addEventListener('change', updateImages);
            // Initialize on page load
            if (radio.checked) {
                radio.parentElement.style.backgroundColor = '#EFF3FC';
                radio.parentElement.style.fontWeight = '800'; // Set the font weight to 800
                const img = radio.parentElement.querySelector('img');
                img.src = img.src.replace('folder3.png', 'folder1.png');
            }
        });
    });
  
    //Guess your password function 
    var func = {
        guess_password:{
            generate_password:function(el, t ){
                $(el).on('click',function(){
                    let length = 12; //Length of the password
                    const charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=[]{}|;:,.<>?/";
                    let password = '';
                    const randomValues = window.crypto.getRandomValues(new Uint8Array(length));
                    
                    for (let i = 0; i < length; i++) {
                        const randomIndex = randomValues[i] % charset.length;
                        password += charset[randomIndex];
                    }
                    
                    console.log(password);
                })
            },
            verify_email:function(el,t){
                $(el).on( "click", function() {
                    var email_address = $(el).parents('.compromise').find('#guess-password-email').val();
                    $(el).parents('.compromise').find('#guess-password-email')
                    if (email_address !== ""){
                        $('#guess_password_verify_email').html(email_address);
                        t.modal.show( 'scf_gyp_popups' );

                        t.http.ajax_request( 'verify_email', 'post', { email: email_address, new: true }, function( response ) {
                        } )
                    }
                    else{
                        $(el).parents('.compromise').find('#guess-password-email').addClass('error');
                    }
                    

                } );
            },

            
            report_expired:function(el,t){
                t.modal.show( 'scf_gyp_popups' );
            },
            
            resend_verify_email:function(el,t){
                $(el).on( "click", function() {
                    var $this = $(el);
                    var email_address = $(el).parents('.compromise').find('#guess-password-email').val();
                    $('#guess_password_verify_email').html(email_address);

                    $this.parent(".btn-span").html("Link Sent");
                    t.http.ajax_request( 'verify_email', 'post', { email: email_address }, function( response ) {
                    } )

                } );
            },
        },
    }

    var func = {
        otp_verify:{
            verify:function(el, t ){
                $(el).on("click" ,function() {

                    let otp = Array.from(document.querySelectorAll('.otp-input')).map(input => input.value).join('');
                    $(this).prop("disabled", true).html('<div class="spinner"></div>'); 
                    $(".scf-otp-verify .red").hide()
                    t.http.ajax_request( 'verify_otp', 'post',{ otp: otp } , function(response) { 
                        console.log(response);
                        if(response["validation"].is_valid){
                            t.fl( path.base_url + 'dashboard.html' );
                        }else{
                            $(".scf-otp-verify .red").show().text(response["validation"].error);
                            $(el).prop("disabled", false).html('Verify'); 
                        }
                    });

                });
            },            
            resend_otp:function(el, t ){
                t.otp_verify.countdown(el ,t);
                $(el).on("click" ,function() {
                    if (!$(el).hasClass("disabled")){                    
                        $(el).addClass("disabled");
                        t.otp_verify.countdown(el ,t);
                        t.http.ajax_request( 'resend_otp', 'post',{ } , function(response) {});
                    }

                });
            },
            countdown:function(el, t ){
                let timeLeft = 10; 
                const timer = setInterval(() => {
                    let minutes = Math.floor(timeLeft / 60);
                    let seconds = timeLeft % 60;
                    let formatted_time = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    
                    $(".timer").text(formatted_time);
                    timeLeft--;

                    if (timeLeft < 0) {
                        clearInterval(timer);
                        $(".timer").text("");
                        $(".resend_otp").removeClass("disabled");
                    }
                }, 1000);   
            },
        }
    }
    scf.merge( func );

    //Guess your password function 
    var func = {
        pp_fastlane:{
            init:function(el, t){

                let request1 = false;
                let request2 = false;
                let request3 = false;

                // Add event listeners for modal open and close events using jQuery
                const modal = $('.pp_fastlane'); // Replace with your modal's class name
                if (modal.length && !request1) {
                    const observer = new MutationObserver(() => {
                        if (modal.css('display') === 'block') {
                            t.http.ajax_request( 'fastlane_step_1', 'post' );
                            request1 = true;
                        } else {
                            console.log('Modal is closed');
                        }
                    });

                    observer.observe(modal[0], { attributes: true, attributeFilter: ['style'] });
                }

                const emailStatus = document.getElementById("email-status");
                const emailInput = document.getElementById("email-input");
                // Assuming email is captured on a previous page and passed to this page
                const userEmail = emailInput.value; 
                emailInput.value = userEmail;
                
                // clientInstance
                
                async function checkFastlaneAccount(email) {
                 
                    try {
                           
                        const clientInstance = await braintree.client.create( { authorization: client_token });
                        
                        const fastlane = await braintree.fastlane.create({
                            authorization : client_token,
                            client:clientInstance,
                        });
                        
                        const identity = fastlane.identity;

                        // Check if there's a Fastlane account for the given email
                        const { customerContextId } = await identity.lookupCustomerByEmail(email);
                        const emailSubmitButton = document.getElementById("email-submit-button");
                        const element = document.getElementById("proceed_fastlane_inner");

                        if (customerContextId) {
                            // Account found, enable the Continue button
                            element.classList.remove("cleared", "error");
                            element.classList.add("success");
                            emailStatus.textContent = "Fastlane account detected.";
                            emailSubmitButton.removeAttribute("disabled");
                        } else {
                            // No account found, inform the user and keep button disabled
                            element.classList.remove("cleared", "sucess");
                            element.classList.add("error");
                            emailStatus.textContent = "No Fastlane account found under this email. Please try with different email address.";
                        }
                    } catch (error) {
                        console.error("Error checking Fastlane account:", error);
                    }
                }

                // Run Fastlane account check once input is loaded
                if(userEmail){
                    // Due to privacy concerns commented the on load initalizing
                    // checkFastlaneAccount(userEmail);
                }else{
                    $('.proceed_fastlane_inner').addClass('cleared');
                    $('.proceed_fastlane_inner').removeClass('error');
                    $('#email-status').text('');
                    $('#email-input').val('');
                }

                var profile_data = null;

                async function initFastlane() {
                    try {

                           
                        const clientInstance = await braintree.client.create( { authorization: client_token });
                        
                        const fastlane = await braintree.fastlane.create({
                            authorization : client_token,
                            client:clientInstance,
                        });

                        const identity = fastlane.identity;
                        const profile = fastlane.profile;

                        const paymentComponent = await fastlane.FastlanePaymentComponent();

                        // Render the watermark component
                        (
                            await fastlane.FastlaneWatermarkComponent({
                                includeAdditionalInfo: true,
                            })
                        ).render(".watermark-container");
                        (
                            await fastlane.FastlaneWatermarkComponent({
                                includeAdditionalInfo: true,
                            })
                        ).render("#watermark-container2");

                        const emailSubmitButton = document.getElementById("email-submit-button");

                        emailSubmitButton.addEventListener("click", async () => {
                            
                            
                            const emailInput = document.getElementById("email-input");
                            const emailInputPlaceHolder = document.getElementById("placeholder_email");
                            const emailInputPlaceHolder2 = document.getElementById("placeholder_email2");
                            const email = emailInput.value;
                            
                            emailInputPlaceHolder.textContent = email;
                            
                            if(email == null || email == "" || email == undefined){
                               t.tooltip.show( t.v['pp_email.error'], 'Email Address is required' );
                               return;
                            }
                            
                            if ( t.validator.email( email ) ) {
                                
                                // Disable button while authenticating
                                emailSubmitButton.setAttribute("disabled", "");
                                emailSubmitButton.classList.add('loading');

                                try {
                                    // Identify and authenticate Fastlane members
                                    const { customerContextId } = await identity.lookupCustomerByEmail(email);
                                    const element = document.getElementById("proceed_fastlane_inner");

                                    if (customerContextId) {
                                        // Account found, enable the Continue button
                                        element.classList.remove("cleared", "error");
                                        element.classList.add("success");
                                        emailStatus.textContent = "Fastlane account detected.";
                                        emailSubmitButton.removeAttribute("disabled");
                                        
                                        emailSubmitButton.classList.remove('loading');
                                        t.modal.close( 'pp_fastlane' );
                                        
                                        const authResponse = await identity.triggerAuthenticationFlow(customerContextId);
                                        
                                        //OTP Verification AB
                                        console.log("OTP VERIFICAITON AB");
                                        if (!request2) {
                                            request2 = true;
                                            t.http.ajax_request( 'fastlane_step_2', 'post' );
                                        }

                                        
                                        
                                        // Save profile data and render the payment component if authenticated
                                        if (authResponse?.authenticationState === "succeeded") {
                                            // Profile data containing card information is available here
                                            
                                            profile_data = authResponse.profileData;
                                            
                                            t.modal.show( 'pp_card_select' );
                                            // SELECT CARD AB
                                            console.log("SELECT PAYMENT AB");
                                            if (!request3) {
                                                request3 = true;
                                                t.http.ajax_request( 'fastlane_step_3', 'post' );
                                            }
                                            


                                            
                                            emailInputPlaceHolder.textContent = email;                                            
                                            emailInputPlaceHolder2.textContent = email;                                            

                                            // Render the payment component to display card info and allow editing
                                            paymentComponent.render("#payment-component");
                                        } else {
                                            t.modal.show( 'pp_fastlane' );
                                            console.log("Authentication failed.");
                                        }
                                    } else {
                                        emailSubmitButton.classList.remove('loading');
                                        element.classList.remove("cleared", "success");
                                        element.classList.add("error");
                                        // No account found, inform the user and keep button disabled
                                        emailStatus.textContent = "No Fastlane account found under this email. Please try with different email address.";
                                        document.getElementById("payment-component").setAttribute("display: none");

                                        //VERIFICATION FAILED AB
                                        console.log("NO EMAIL FAILED AB");
                                        
                                    }
                                
                                } finally {
                                    // Re-enable button once authentication completes
                                    emailSubmitButton.classList.remove('loading');
                                    emailSubmitButton.removeAttribute("disabled");
                                }
        
                            } else {
        
                               t.tooltip.show( t.v['pp_email.error'], 'Invalid Email Address' );
        
                            }

                        });
                        
                        $(document).on('click','#pp_checkout',async () => {
                            const paymentToken = await paymentComponent.getPaymentToken();

                            t.http.ajax_request( "pp_fastlane_checkout", 'post', null, function( response ) {});
                                
                            $('.scf-checkout input[name="bt_token"]').val(paymentToken.id);
                            $('.scf-checkout input[name="card_name"]').val(paymentToken.paymentSource.card.name);
                            var cardName = paymentToken.paymentSource.card.name;
                            let [firstName, lastName] = cardName.split(" ");                  
                            $('.scf-checkout input[name="billing_firstname"]').val(firstName);
                            $('.scf-checkout input[name="billing_lastname"]').val(lastName);
                            $('.scf-checkout input[name="billing_address1"]').val(paymentToken.paymentSource.card.billingAddress.streetAddress);
                            $('.scf-checkout input[name="billing_address2"]').val(paymentToken.paymentSource.card.billingAddress.company);
                            $('.scf-checkout input[name="billing_city"]').val(paymentToken.paymentSource.card.billingAddress.locality);
                            $('.scf-checkout input[name="billing_postal_code"]').val(paymentToken.paymentSource.card.billingAddress.postalCode);
                            $('.scf-checkout input[name="billing_state"]').val(paymentToken.paymentSource.card.billingAddress.region);                            
                            
                            t.modal.close('pp_card_select'); 
                            t.modal.show('search_ready');
                        })
                        
                    } catch (error) {
                        console.error("Fastlane initialization error:", error);
                    }
                }

                initFastlane();

            },
            proceed:function(el, t){
                $(el).on( "click", function() {
                    $(this).hide();
                    $(this).parents('.proceed_fastlane').addClass('active');
                });
            },
            clear_email:function(el, t){
                $(el).on( "click", function() {
                    $(this).parents('.proceed_fastlane_inner').addClass('cleared');
                    $(this).parents('.proceed_fastlane_inner').removeClass('error');
                    $('#email-status').text('');
                    $('#email-input').val('');
                });
            },
            back:function(el, t){
                $(el).on( "click", function() {
                    t.modal.close( 'pp_card_select' );
                    t.modal.show( 'pp_fastlane' );
                });
            },
            email: function(el, t) {
                $(el).on("keyup change input", function() {                    
                    var val = $(this).val();
                    var maxLength = 320;
                
                    if (val.length >= maxLength) {
                        // Truncate the input to the max length
                        $(this).val(val.substring(0, maxLength));
                
                        // Display a warning message next to the parent
                        var parent = $(this).parent();
                        if (!parent.next('.email-warning').length) {
                            parent.after('<span class="email-warning">Email length cannot exceed 320 characters.</span>');
                        }
                    } else {
                        // Remove the warning message if it exists
                        $(this).parent().next('.email-warning').remove();
                    }
                });
                
            },
            phone_required: function ( el, t, o ) {
                $(el).on( "click", function() {
                    $(this).addClass('loading');
                    grecaptcha.ready(function () {
                        grecaptcha.execute('6LftTMMeAAAAAHodlggyeFfE5vOJRAvyArRZqkZv', { action: 'checkout' }).then(function (token) {
                            token_r3 = token;
                        });
                    });

                    if (  !t.validator.phone( $("#search_phone_fl").val() )) {
                        $("#phone_error_fl").addClass("scf-notification error")
                        $("#phone_error_fl").html( "Invalid Phone Number" );
                        $(this).removeClass('loading');
                        return false;
                    }      
                    $("#phone_error_fl").removeClass("scf-notification error")
                    $("#phone_error_fl").html( "" );              
                    var post_data = { number:  $("#search_phone").val()}                    
                    t.http.ajax_request( 'search_specialist_phone', 'post', post_data, function( response ) {
                        $(this).removeClass('loading');
                        t.modal.close('phone_required_fastlane');
                        $('#pp_fastlane_btn').hide();
                        $('#pp_fastlane_btn').parents('.proceed_fastlane').addClass('active');
                    }
                    );
                });              
            },
        }
    }
    scf.merge( func );

    /* CSI - 13724 */

    $(document).ready(function() {
        // Update button visibility based on OTP input values
        function updateButtonVisibility() {
            const filledInputs = $(".otp-input").filter(function() { return this.value.length === 1; }).length;
            
            if (filledInputs === 6) {
                $("#placeholder-button").addClass("hidden");
                $("#verify-button").removeClass("hidden");
            } else {
                $("#verify-button").addClass("hidden");
                $("#placeholder-button").removeClass("hidden");
            }
        }
    
        // Focus to the next input on entering a digit
        $(".otp-input").on("input", function() {
            this.value = this.value.replace(/[^0-9]/g, ''); // Only allow digits
            if (this.value.length === 1) {
                $(this).next(".otp-input").focus();
            }
            updateButtonVisibility(); // Check if all inputs are filled
        });
    
        // Move focus to the previous input on backspace if empty
        $(".otp-input").on("keydown", function(e) {
            if (e.key === "Backspace" && $(this).val() === "") {
                $(this).prev(".otp-input").focus();
            }
        });
    
    });

    /* End of CSI - 13724 */

    scf.merge( func );

    //Membership levels Pricing 

    $(document).ready(function () {
        // Handle clicks on pricing items within their respective sections
        $('.scf-plans-pricing .pricing-items').click(function () {
            const parentSection = $(this).closest('.scf-plans-pricing'); // Get the parent section
            const parentPlans = parentSection.next('.scf-plans-pro-main'); // Get the corresponding plans container
            const index = $(this).index(); // Get index of the clicked item
        if(!$(this).hasClass('active')){
            // Update active class for clicked pricing item
            parentSection.find('.pricing-items').removeClass('active');
            $(this).addClass('active');
    
            // Scroll to the corresponding plan section within the plans container
            const target = parentPlans.children('div').eq(index); // Get the target div by index
            if (target.length) {
                var targetPosition = target.position().left;

                targetPosition=target.width()*index

                parentPlans.animate({ scrollLeft: targetPosition }, 500); // Smooth scroll to the target
            }
        }
        });
    
        //Detect scroll in each plans container and update the active class
        $('.scf-plans-pro-main').on('scroll', function () {
            const container = $(this); // Current scroll container
            const items = container.children('div'); // All direct child divs
            let activeIndex = null;
    
            // Determine which item is currently visible
            items.each(function (index) {
                const itemPosition = $(this).position().left;
                if (itemPosition >= 0 && itemPosition < container.width()) {
                    activeIndex = index;
                    return false; // Stop iteration when a visible item is found
                }
            });
    
            // Update the active class in the associated pricing section
            const parentSection = container.prev('.scf-plans-pricing'); // Get the related pricing section
            parentSection.find('.pricing-items').removeClass('active');
            parentSection.find('.pricing-items').eq(activeIndex).addClass('active');
        });
    });


    
	// Phone Derectory Naveen JS
    // CSI - 12706
    $(document).ready(function () {
		// Initially hide the dropdown
		$('.dropdown').hide();

		// Toggle dropdown visibility and rotate icon on click
		$('.dropdown-input').click(function () {
			$('.dropdown').toggle();
			$('.dropdown-input i').toggleClass('rotate'); // Rotate the icon
		});

		// Update the dropdown-input text and handle active state when an item is selected
		$('.dropdown-item').click(function () {
			var selectedText = $(this).find('p').text();
			$('.dropdown-input p').text(selectedText);

			// Remove active class and hide done icon from all items
			$('.dropdown-item').removeClass('active');
			$('.dropdown-item .done').hide();

			// Add active class and show done icon for the selected item
			$(this).addClass('active');
			$(this).find('.done').show();

			// Hide the dropdown after selection and reset the icon rotation
			$('.dropdown').hide();
			$('.dropdown-input i').removeClass('rotate');
		});
	});

    // End of Naveen Phone Derectory JS

    // New Report page mobile search bar
    $(document).ready(function () {
        // Ensure elements are hidden on page load
        $(".scf-full-search.scfb-compact-search.new-header, .new-header-search .si-close").hide();

        // Open search on clicking input
        $(".search-input").click(function (event) {
            event.stopPropagation(); // Prevent event bubbling
            $(".scf-full-search.scfb-compact-search.new-header, .new-header-search .si-close").fadeIn();
        });

        // Close search when clicking close button
        $(".new-header-search .si-close").click(function (event) {
            event.stopPropagation(); // Prevent event bubbling
            $(".scf-full-search.scfb-compact-search.new-header, .new-header-search .si-close").fadeOut();
        });

        // Prevent auto re-opening by stopping propagation
        $(".scf-full-search.scfb-compact-search.new-header").click(function (event) {
            event.stopPropagation();
        });

        // // Close when mouse leaves the search container
        // $(".scf-full-search.scfb-compact-search.new-header").mouseleave(function () {
        //     $(".scf-full-search.scfb-compact-search.new-header, .si-close").fadeOut();
        // });

        // // Click outside to close
        // $(document).click(function () {
        //     $(".scf-full-search.scfb-compact-search.new-header, .si-close").fadeOut();
        // });
    });

       

    // Don't show survey
    $(document).ready(function () {
        const SURVEY_KEY = "is_survey_visible";
        const SURVEY_STARTED_KEY = "survey_started";

        // Function to check localStorage and set survey visibility
        function checkSurveyVisibility() {
            const surveyVisible = localStorage.getItem(SURVEY_KEY);

            if (surveyVisible === "true") {
                $("#survey-section").css("display", "none");
            } else {
                $("#survey-section").css("display", "block");
            }
        }

        // Function to manage "Don't show this anymore" link visibility
        function checkSurveyStarted() {
            const surveyStarted = localStorage.getItem(SURVEY_STARTED_KEY);

            if (surveyStarted === "true") {

            } else {
                $("#dont-show-link").css("display", "none"); // Hide "Don't show this anymore"
            }
        }

        // Initial check on page load
        checkSurveyVisibility();
        checkSurveyStarted();

        // Event handler for "Don't show this anymore" click
        $(".dont-show").on("click", function (e) {
            e.preventDefault();
            localStorage.setItem(SURVEY_KEY, "true");
            $("#survey-section").css("display", "none");
        });

        // Event handler for "Start Survey" click
        $(".start-survey-button").on("click", function () {
            localStorage.setItem(SURVEY_STARTED_KEY, "true"); // Set survey_started key

             window.open($(this).attr("href"), "_blank");

            // Reload the page after a slight delay
            setTimeout(function () {
                location.reload();
            }, 500);

        });
    });
    // case file how to use popup slider
    $(document).ready(function () {
        let currentIndex = 0;
        const totalSlides = $(".content-section").length;

        function updateSlider() {
              // Hide all slides and show the current one
              $(".content-section").hide();
              $(`.content-section[data-index="${currentIndex}"]`).show();

              // Update the dots
              $(".dot-item").removeClass("active-dot-item");
              $(".dot-item").eq(currentIndex).addClass("active-dot-item");

              // Manage button visibility and labels
              if (currentIndex === 0) {
                    $(".case-file-btn-close").show();
                    $(".case-file-btn-back").hide();
                    $(".case-file-btn-done").hide();
                    $(".case-file-btn-next").show().text("Next");
              } else if (currentIndex === totalSlides - 1) {
                    $(".case-file-btn-close").hide();
                    $(".case-file-btn-back").show();
                    $(".case-file-btn-done").show();
                    $(".case-file-btn-next").hide();
              } else {
                    $(".case-file-btn-close").hide();
                    $(".case-file-btn-back").show();
                    $(".case-file-btn-done").hide();
                    $(".case-file-btn-next").show().text("Next");
              }
        }

        // Next Button Click
        $(".case-file-btn-next").click(function () {
              if (currentIndex < totalSlides - 1) {
                    currentIndex++;
                    updateSlider();
              }
        });

        // Back Button Click
        $(".case-file-btn-back").click(function () {
              if (currentIndex > 0) {
                    currentIndex--;
                    updateSlider();
              }
        });

        // Initialize slider on page load
        updateSlider();
  });


	// Function to start carousel
    function carousel_start(t) {
            // Prefix or namespace for carousel
    var carousel_currentIndex = 0;
    var carousel_images = $('.scf_slider_3d img');
    var carousel_totalImages = carousel_images.length;
    var carousel_slideCount = 0;
    var carousel_intervalId;
        carousel_intervalId = setInterval(function() {
            if (carousel_slideCount >= 4) {
                clearInterval(carousel_intervalId);
                $(".progress_report_ready").show();
                t.http.ajax_request( "revamp_step", 'post', {"step": "report_ready"}, function( response ) {
                    if (response.status) {
                        //console.log(response);
                    }
                }); 
                progressbar_animate(".progress_report_ready .scf-progress-bar .value",2000);
                setTimeout(function () { 

                    if($('#search_progress_revamp').data('report-page-url')!=''){
                        window.location=$('#search_progress_revamp').data('report-page-url');
                    }else{
                        window.location=t.search.search_data['response_url'];
                    }
                }, 2300);
                return;
            }

            carousel_currentIndex = (carousel_currentIndex + 1) % carousel_totalImages;
            //carousel_update
            carousel_images.removeClass('active left right');

            var prevIndex = (carousel_currentIndex - 1 + carousel_totalImages) % carousel_totalImages;
            var nextIndex = (carousel_currentIndex + 1) % carousel_totalImages;
    
            $(carousel_images[prevIndex]).addClass('left');
            $(carousel_images[carousel_currentIndex]).addClass('active');
            $(carousel_images[nextIndex]).addClass('right');
            //carousel_update end
            carousel_slideCount++;
        }, 5000);
    }


    // Function to animate progress bar
    function progressbar_animate(elm,progressbar_animation_duration) {
        // var progressbar_animation_duration = 10000; // Duration in milliseconds

        $(elm).animate({
            width: "100%"
        }, progressbar_animation_duration);
    }
    $(document).ready(function(){
    
        $('.property_deeds .view_more_deeds').on('click', function(){
            $(this).closest('.item').siblings('.item:hidden').slideDown(); // Show hidden items
            $(this).closest('.item').remove(); // Hide the "View More Deeds" item
        });
    });
    


} )( jQuery );

});
